2025-10-07 01:28:17.985 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=3h16m33s42ms137µs600ns).
2025-10-07 01:44:23.147 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m5s152ms243µs100ns).
2025-10-07 01:58:33.648 [MessageBroker-2] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 12, active threads = 1, queued tasks = 0, completed tasks = 20]
2025-10-07 02:58:50.640 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=59m27s492ms201µs700ns).
2025-10-07 03:27:30.946 [MessageBroker-2] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 12, active threads = 1, queued tasks = 0, completed tasks = 21]
2025-10-07 03:38:05.089 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:05.154 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:08.183 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:08.183 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:08.189 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 03:38:08.189 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 03:38:08.189 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 03:38:08.196 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 03:38:08.197 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:08.198 [http-nio-8080-exec-9] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 03:38:08.199 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 03:38:08.200 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:08.201 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 03:38:08.202 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 03:38:08.204 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 03:38:08.205 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 03:38:08.478 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:08.480 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 03:38:08.480 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 03:38:08.482 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 03:38:08.483 [http-nio-8080-exec-1] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 03:38:08.707 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:08.712 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0
2025-10-07 03:38:08.717 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:08.718 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0
2025-10-07 03:38:10.823 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:10.825 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - API: Fetching queued print jobs
2025-10-07 03:38:10.826 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 03:38:10.827 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 03:38:10.827 [http-nio-8080-exec-9] INFO  c.e.b.controllers.PrintJobController - API: Returning 0 queued print jobs
2025-10-07 03:38:10.829 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:10.831 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - API: Fetching queued print jobs
2025-10-07 03:38:10.831 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 03:38:10.832 [http-nio-8080-exec-6] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 03:38:10.833 [http-nio-8080-exec-6] INFO  c.e.b.controllers.PrintJobController - API: Returning 0 queued print jobs
2025-10-07 03:38:12.071 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:12.071 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:12.073 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 03:38:12.074 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 03:38:12.074 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 03:38:12.075 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 03:38:12.076 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 03:38:12.076 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:12.078 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:12.078 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 03:38:12.079 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 03:38:12.079 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 03:38:12.081 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 03:38:12.082 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 03:38:12.365 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:12.367 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 03:38:12.368 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 03:38:12.370 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 03:38:12.371 [http-nio-8080-exec-3] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 03:38:14.201 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:14.204 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 03:38:14.205 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - Generating sticker PDF for invoice 14
2025-10-07 03:38:14.209 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        il1_0.invoice_id,
        il1_0.id,
        il1_0.area_m2,
        il1_0.cutting_price,
        il1_0.cutting_type,
        il1_0.dimension_unit,
        il1_0.glass_type_id,
        il1_0.height,
        il1_0.length_m,
        il1_0.line_total,
        il1_0.width 
    from
        invoice_line il1_0 
    where
        il1_0.invoice_id=?
2025-10-07 03:38:14.211 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 03:38:14.215 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 03:38:14.232 [http-nio-8080-exec-7] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/stickers/20251007_033814_f1405e0f_sticker_14.pdf
2025-10-07 03:38:14.233 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - Sticker PDF generated successfully: http://localhost:9000/elguindy/stickers/20251007_033814_f1405e0f_sticker_14.pdf
2025-10-07 03:38:14.235 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 03:38:15.765 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:15.768 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0
2025-10-07 03:38:15.772 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:15.774 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0
2025-10-07 03:38:21.483 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:21.486 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - API: Fetching queued print jobs
2025-10-07 03:38:21.486 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 03:38:21.487 [http-nio-8080-exec-6] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 03:38:21.488 [http-nio-8080-exec-6] INFO  c.e.b.controllers.PrintJobController - API: Returning 1 queued print jobs
2025-10-07 03:38:21.489 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:21.491 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - API: Fetching queued print jobs
2025-10-07 03:38:21.491 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 03:38:21.491 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 03:38:21.492 [http-nio-8080-exec-1] INFO  c.e.b.controllers.PrintJobController - API: Returning 1 queued print jobs
2025-10-07 03:38:23.481 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:23.484 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - API: Marking print job 34 as PRINTING
2025-10-07 03:38:23.484 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 03:38:23.486 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        created_at=?,
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 03:38:23.500 [http-nio-8080-exec-10] INFO  c.e.b.controllers.PrintJobController - API: Print job 34 marked as PRINTING
2025-10-07 03:38:23.516 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:23.518 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - API: Fetching queued print jobs
2025-10-07 03:38:23.519 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 03:38:23.520 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 03:38:23.520 [http-nio-8080-exec-5] INFO  c.e.b.controllers.PrintJobController - API: Returning 0 queued print jobs
2025-10-07 03:38:29.780 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:29.781 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:29.783 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 03:38:29.783 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 03:38:29.783 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 03:38:29.786 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 03:38:29.787 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:29.787 [http-nio-8080-exec-3] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 03:38:29.788 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 03:38:29.788 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:29.790 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 03:38:29.790 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 03:38:29.792 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 03:38:29.793 [http-nio-8080-exec-4] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 03:38:30.068 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:38:30.071 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 03:38:30.071 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 03:38:30.073 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 03:38:30.073 [http-nio-8080-exec-9] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 03:44:07.776 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:44:07.776 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:44:07.779 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 03:44:07.779 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 03:44:07.780 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 03:44:07.781 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 03:44:07.782 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 03:44:08.771 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:44:08.774 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 03:44:08.774 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 03:44:08.776 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 03:44:08.777 [http-nio-8080-exec-3] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 03:45:20.783 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:45:20.785 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:45:20.789 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 03:45:20.790 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 03:45:20.790 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 03:45:20.794 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 03:45:20.795 [http-nio-8080-exec-9] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 03:45:21.770 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 03:45:21.772 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 03:45:21.773 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 03:45:21.776 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 03:45:21.777 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 03:57:30.950 [MessageBroker-2] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 12, active threads = 1, queued tasks = 0, completed tasks = 22]
2025-10-07 04:27:30.954 [MessageBroker-2] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 12, active threads = 1, queued tasks = 0, completed tasks = 23]
2025-10-07 06:01:01.661 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h33m39s846ms159µs700ns).
2025-10-07 06:07:57.098 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-07 06:07:57.105 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-10-07 06:07:57.107 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-10-07 06:07:57.107 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@31e1a699]]
2025-10-07 06:07:57.107 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-10-07 06:07:57.113 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 06:07:57.118 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-07 06:07:57.120 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-07 06:08:43.858 [main] INFO  c.example.backend.BackendApplication - Starting BackendApplication using Java 23.0.2 with PID 28336 (C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem\backend\target\classes started by Abdullah Shaddad in C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem)
2025-10-07 06:08:43.858 [main] DEBUG c.example.backend.BackendApplication - Running with Spring Boot v3.5.5, Spring v6.2.10
2025-10-07 06:08:43.859 [main] INFO  c.example.backend.BackendApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-07 06:08:44.286 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 06:08:44.287 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-10-07 06:08:44.307 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CustomerRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:08:44.307 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingDetailRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:08:44.308 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingRateRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:08:44.309 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.GlassTypeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:08:44.309 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceLineRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:08:44.310 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:08:44.311 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.NotificationRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:08:44.311 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.PrintJobRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:08:44.312 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:08:44.312 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 0 JDBC repository interfaces.
2025-10-07 06:08:44.319 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 06:08:44.319 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-07 06:08:44.342 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20 ms. Found 9 JPA repository interfaces.
2025-10-07 06:08:44.628 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-07 06:08:44.636 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-07 06:08:44.637 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-07 06:08:44.673 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-07 06:08:44.673 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 785 ms
2025-10-07 06:08:44.749 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-07 06:08:44.786 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-07 06:08:44.810 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-07 06:08:44.978 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-07 06:08:44.997 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-07 06:08:45.080 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@6a6e9289
2025-10-07 06:08:45.081 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-07 06:08:45.108 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-07 06:08:45.122 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-07 06:08:45.780 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-07 06:08:46.036 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 06:08:46.150 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-07 06:08:46.683 [main] DEBUG c.e.b.c.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-07 06:08:46.709 [main] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-07 06:08:46.709 [main] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-07 06:08:47.175 [main] INFO  c.e.backend.services.StorageService - MinIO bucket already exists: elguindy
2025-10-07 06:08:47.204 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-07 06:08:47.654 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-10-07 06:08:47.655 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@62027c17]]
2025-10-07 06:08:47.655 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-10-07 06:08:47.665 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-07 06:08:47.669 [main] INFO  c.example.backend.BackendApplication - Started BackendApplication in 4.043 seconds (process running for 4.415)
2025-10-07 06:08:47.674 [main] INFO  c.e.backend.config.DataInitializer - Starting application data initialization...
2025-10-07 06:08:47.674 [main] INFO  c.e.backend.config.DataInitializer - Application data initialization completed successfully.
2025-10-07 06:08:47.726 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 06:08:47.738 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 06:08:47.740 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 06:08:47.741 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 06:08:47.742 [main] INFO  c.e.backend.config.DataInitializer - User initialization completed. Default users created if they didn't exist.
2025-10-07 06:08:47.742 [main] INFO  c.e.backend.config.DataInitializer - IMPORTANT: Please change default passwords after first login for security!
2025-10-07 06:09:47.654 [MessageBroker-1] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2025-10-07 06:18:40.168 [http-nio-8080-exec-3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-07 06:18:40.169 [http-nio-8080-exec-3] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-07 06:18:40.170 [http-nio-8080-exec-3] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-10-07 06:18:40.267 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:18:40.267 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:18:40.299 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 06:18:40.302 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 06:18:40.315 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 06:18:40.338 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 06:18:40.340 [http-nio-8080-exec-4] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 06:18:40.342 [http-nio-8080-exec-4] WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2025-10-07 06:18:40.351 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:18:40.355 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 06:18:40.356 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:18:40.359 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 06:18:40.360 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 06:18:40.362 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 06:18:40.363 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 06:18:40.430 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:18:40.433 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 06:18:40.434 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 06:18:40.437 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 06:18:40.438 [http-nio-8080-exec-9] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 06:18:42.371 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:18:42.378 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 06:18:42.379 [http-nio-8080-exec-5] INFO  c.e.b.services.PdfGenerationService - Generating sticker PDF for invoice 14
2025-10-07 06:18:42.516 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        il1_0.invoice_id,
        il1_0.id,
        il1_0.area_m2,
        il1_0.cutting_price,
        il1_0.cutting_type,
        il1_0.dimension_unit,
        il1_0.glass_type_id,
        il1_0.height,
        il1_0.length_m,
        il1_0.line_total,
        il1_0.width 
    from
        invoice_line il1_0 
    where
        il1_0.invoice_id=?
2025-10-07 06:18:42.521 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 06:18:42.525 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 06:18:42.551 [http-nio-8080-exec-5] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/stickers/20251007_061842_0cbd0377_sticker_14.pdf
2025-10-07 06:18:42.552 [http-nio-8080-exec-5] INFO  c.e.b.services.PdfGenerationService - Sticker PDF generated successfully: http://localhost:9000/elguindy/stickers/20251007_061842_0cbd0377_sticker_14.pdf
2025-10-07 06:18:42.561 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 06:19:59.320 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:19:59.320 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:19:59.324 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 06:19:59.325 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 06:19:59.325 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 06:19:59.326 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 06:19:59.327 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 06:19:59.330 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:19:59.331 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:19:59.333 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 06:19:59.333 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 06:19:59.333 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 06:19:59.335 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 06:19:59.337 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 06:20:00.582 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:20:00.587 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 06:20:00.588 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 06:20:00.592 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 06:20:00.594 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 06:20:04.427 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:20:04.432 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - API: Fetching queued print jobs
2025-10-07 06:20:04.436 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 06:20:04.439 [http-nio-8080-exec-4] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 06:20:04.442 [http-nio-8080-exec-4] INFO  c.e.b.controllers.PrintJobController - API: Returning 1 queued print jobs
2025-10-07 06:20:04.447 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:20:04.452 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - API: Fetching queued print jobs
2025-10-07 06:20:04.453 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 06:20:04.456 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 06:20:04.457 [http-nio-8080-exec-7] INFO  c.e.b.controllers.PrintJobController - API: Returning 1 queued print jobs
2025-10-07 06:20:34.570 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:20:34.574 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - API: Fetching queued print jobs
2025-10-07 06:20:34.575 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 06:20:34.576 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 06:20:34.577 [http-nio-8080-exec-9] INFO  c.e.b.controllers.PrintJobController - API: Returning 1 queued print jobs
2025-10-07 06:21:04.574 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:21:04.578 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - API: Fetching queued print jobs
2025-10-07 06:21:04.578 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 06:21:04.580 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 06:21:04.581 [http-nio-8080-exec-1] INFO  c.e.b.controllers.PrintJobController - API: Returning 1 queued print jobs
2025-10-07 06:21:34.584 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:21:34.588 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - API: Fetching queued print jobs
2025-10-07 06:21:34.589 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 06:21:34.590 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 06:21:34.592 [http-nio-8080-exec-3] INFO  c.e.b.controllers.PrintJobController - API: Returning 1 queued print jobs
2025-10-07 06:22:04.571 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:22:04.575 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - API: Fetching queued print jobs
2025-10-07 06:22:04.575 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 06:22:04.576 [http-nio-8080-exec-8] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 06:22:04.577 [http-nio-8080-exec-8] INFO  c.e.b.controllers.PrintJobController - API: Returning 1 queued print jobs
2025-10-07 06:22:34.571 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:22:34.575 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - API: Fetching queued print jobs
2025-10-07 06:22:34.576 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 06:22:34.577 [http-nio-8080-exec-4] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 06:22:34.578 [http-nio-8080-exec-4] INFO  c.e.b.controllers.PrintJobController - API: Returning 1 queued print jobs
2025-10-07 06:23:04.569 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:23:04.572 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - API: Fetching queued print jobs
2025-10-07 06:23:04.572 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 06:23:04.573 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 06:23:04.574 [http-nio-8080-exec-7] INFO  c.e.b.controllers.PrintJobController - API: Returning 1 queued print jobs
2025-10-07 06:23:34.567 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:23:34.570 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - API: Fetching queued print jobs
2025-10-07 06:23:34.570 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 06:23:34.572 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 06:23:34.573 [http-nio-8080-exec-9] INFO  c.e.b.controllers.PrintJobController - API: Returning 1 queued print jobs
2025-10-07 06:24:04.568 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:24:04.571 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - API: Fetching queued print jobs
2025-10-07 06:24:04.571 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 06:24:04.572 [http-nio-8080-exec-10] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 06:24:04.573 [http-nio-8080-exec-10] INFO  c.e.b.controllers.PrintJobController - API: Returning 1 queued print jobs
2025-10-07 06:24:34.570 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:24:34.574 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - API: Fetching queued print jobs
2025-10-07 06:24:34.574 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 06:24:34.576 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 06:24:34.577 [http-nio-8080-exec-5] INFO  c.e.b.controllers.PrintJobController - API: Returning 1 queued print jobs
2025-10-07 06:25:06.675 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:25:06.678 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - API: Fetching queued print jobs
2025-10-07 06:25:06.679 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 06:25:06.681 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 06:25:06.683 [http-nio-8080-exec-1] INFO  c.e.b.controllers.PrintJobController - API: Returning 1 queued print jobs
2025-10-07 06:25:08.148 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:25:08.148 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:25:08.152 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 06:25:08.152 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 06:25:08.152 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 06:25:08.154 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 06:25:08.156 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 06:25:08.158 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:25:08.158 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:25:08.162 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 06:25:08.162 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 06:25:08.162 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 06:25:08.165 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 06:25:08.166 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 06:25:08.448 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:25:08.450 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 06:25:08.451 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 06:25:08.453 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 06:25:08.454 [http-nio-8080-exec-4] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 06:25:11.629 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:25:11.638 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        upper(c1_0.name) like upper(?) escape '\'
2025-10-07 06:25:11.936 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:25:11.940 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        upper(c1_0.name) like upper(?) escape '\'
2025-10-07 06:25:17.060 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:25:17.104 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 100.0x100.0, cutting: SHATF
2025-10-07 06:25:17.104 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 06:25:17.110 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 06:25:17.133 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:25:17.133 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:25:17.141 [http-nio-8080-exec-3] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 100.0x100.0, cutting: SHATF
2025-10-07 06:25:17.142 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 100.0x100.0, cutting: SHATF
2025-10-07 06:25:17.143 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 06:25:17.143 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 06:25:17.145 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 06:25:17.145 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 06:25:18.615 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:25:18.624 [http-nio-8080-exec-4] INFO  c.e.backend.services.InvoiceService - Starting invoice creation for customer ID: 1
2025-10-07 06:25:18.626 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 06:25:18.630 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.Invoice */insert 
    into
        invoice (customer_id, issue_date, notes, payment_date, status, total_price) 
    values
        (?, ?, ?, ?, ?, ?)
2025-10-07 06:25:18.632 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 06:25:18.633 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 06:25:18.636 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.InvoiceLine */insert 
    into
        invoice_line (area_m2, cutting_price, cutting_type, dimension_unit, glass_type_id, height, invoice_id, length_m, line_total, width) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-07 06:25:18.653 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.Invoice */update invoice 
    set
        customer_id=?,
        issue_date=?,
        notes=?,
        payment_date=?,
        status=?,
        total_price=? 
    where
        id=?
2025-10-07 06:25:18.658 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        where
            i1_0.id=?
2025-10-07 06:25:18.661 [http-nio-8080-exec-4] INFO  c.e.b.services.PdfGenerationService - Generating PDF for invoice 24 with type CLIENT
2025-10-07 06:25:18.718 [http-nio-8080-exec-4] ERROR c.e.b.services.PdfGenerationService - Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
java.lang.NullPointerException: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
	at com.example.backend.services.PdfGenerationService.addInvoiceLinesTable(PdfGenerationService.java:255)
	at com.example.backend.services.PdfGenerationService.generateInvoicePdf(PdfGenerationService.java:71)
	at com.example.backend.services.PrintJobService.createSinglePrintJob(PrintJobService.java:129)
	at com.example.backend.services.PrintJobService.createPrintJobs(PrintJobService.java:71)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.PrintJobService$$SpringCGLIB$$0.createPrintJobs(<generated>)
	at com.example.backend.services.InvoiceService.handlePrintJobCreation(InvoiceService.java:292)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:119)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 06:25:18.721 [http-nio-8080-exec-4] ERROR c.e.backend.services.PrintJobService - PDF generation failed for CLIENT job: Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
2025-10-07 06:25:18.722 [http-nio-8080-exec-4] INFO  c.e.b.services.PdfGenerationService - Generating PDF for invoice 24 with type OWNER
2025-10-07 06:25:18.724 [http-nio-8080-exec-4] ERROR c.e.b.services.PdfGenerationService - Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
java.lang.NullPointerException: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
	at com.example.backend.services.PdfGenerationService.addInvoiceLinesTable(PdfGenerationService.java:255)
	at com.example.backend.services.PdfGenerationService.generateInvoicePdf(PdfGenerationService.java:71)
	at com.example.backend.services.PrintJobService.createSinglePrintJob(PrintJobService.java:129)
	at com.example.backend.services.PrintJobService.createPrintJobs(PrintJobService.java:79)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.PrintJobService$$SpringCGLIB$$0.createPrintJobs(<generated>)
	at com.example.backend.services.InvoiceService.handlePrintJobCreation(InvoiceService.java:292)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:119)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 06:25:18.735 [http-nio-8080-exec-4] ERROR c.e.backend.services.PrintJobService - PDF generation failed for OWNER job: Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
2025-10-07 06:25:18.735 [http-nio-8080-exec-4] INFO  c.e.b.services.PdfGenerationService - Generating sticker PDF for invoice 24
2025-10-07 06:25:18.736 [http-nio-8080-exec-4] ERROR c.e.b.services.PdfGenerationService - Error generating sticker PDF: Cannot invoke "java.util.List.get(int)" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
java.lang.NullPointerException: Cannot invoke "java.util.List.get(int)" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
	at com.example.backend.services.PdfGenerationService.buildStickerPdf(PdfGenerationService.java:407)
	at com.example.backend.services.PdfGenerationService.generateStickerPdf(PdfGenerationService.java:113)
	at com.example.backend.services.PrintJobService.createStickerPrintJob(PrintJobService.java:171)
	at com.example.backend.services.PrintJobService.createPrintJobs(PrintJobService.java:87)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.PrintJobService$$SpringCGLIB$$0.createPrintJobs(<generated>)
	at com.example.backend.services.InvoiceService.handlePrintJobCreation(InvoiceService.java:292)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:119)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 06:25:18.737 [http-nio-8080-exec-4] ERROR c.e.backend.services.PrintJobService - Sticker PDF generation failed: Error generating sticker PDF
2025-10-07 06:25:18.737 [http-nio-8080-exec-4] ERROR c.e.backend.services.InvoiceService - Unexpected error creating print jobs for invoice 24: فشل في إنشاء جميع مهام الطباعة: فشل في إنشاء مهمة طباعة العميل: فشل في إنشاء ملف PDF لنوع CLIENT: Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null, فشل في إنشاء مهمة طباعة المالك: فشل في إنشاء ملف PDF لنوع OWNER: Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null, فشل في إنشاء مهمة طباعة الملصق: فشل في إنشاء ملف PDF للملصق: Error generating sticker PDF
com.example.backend.exceptions.printjob.PrintJobCreationException: فشل في إنشاء جميع مهام الطباعة: فشل في إنشاء مهمة طباعة العميل: فشل في إنشاء ملف PDF لنوع CLIENT: Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null, فشل في إنشاء مهمة طباعة المالك: فشل في إنشاء ملف PDF لنوع OWNER: Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null, فشل في إنشاء مهمة طباعة الملصق: فشل في إنشاء ملف PDF للملصق: Error generating sticker PDF
	at com.example.backend.services.PrintJobService.createPrintJobs(PrintJobService.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.PrintJobService$$SpringCGLIB$$0.createPrintJobs(<generated>)
	at com.example.backend.services.InvoiceService.handlePrintJobCreation(InvoiceService.java:292)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:119)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 06:25:18.740 [http-nio-8080-exec-4] WARN  c.e.backend.services.InvoiceService - Print job failure notification for invoice 24: خطأ غير متوقع في إنشاء مهام الطباعة
2025-10-07 06:25:18.746 [http-nio-8080-exec-4] INFO  c.e.backend.services.InvoiceService - Invoice 24 created successfully for customer 'Abdullah Shaddad' (ID: 1) with 1 lines, total: 4002.0 EGP. 0 errors occurred.
2025-10-07 06:25:18.748 [http-nio-8080-exec-4] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Transaction silently rolled back because it has been marked as rollback-only
org.springframework.transaction.UnexpectedRollbackException: Transaction silently rolled back because it has been marked as rollback-only
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:804)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:758)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:698)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:416)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 06:26:05.308 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:26:05.311 [http-nio-8080-exec-7] INFO  c.e.backend.services.InvoiceService - Starting invoice creation for customer ID: 1
2025-10-07 06:26:05.311 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 06:26:05.313 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.Invoice */insert 
    into
        invoice (customer_id, issue_date, notes, payment_date, status, total_price) 
    values
        (?, ?, ?, ?, ?, ?)
2025-10-07 06:26:05.314 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 06:26:05.315 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 06:26:05.316 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.InvoiceLine */insert 
    into
        invoice_line (area_m2, cutting_price, cutting_type, dimension_unit, glass_type_id, height, invoice_id, length_m, line_total, width) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-07 06:26:05.318 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.Invoice */update invoice 
    set
        customer_id=?,
        issue_date=?,
        notes=?,
        payment_date=?,
        status=?,
        total_price=? 
    where
        id=?
2025-10-07 06:26:05.319 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        where
            i1_0.id=?
2025-10-07 06:26:05.320 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - Generating PDF for invoice 25 with type CLIENT
2025-10-07 06:26:05.322 [http-nio-8080-exec-7] ERROR c.e.b.services.PdfGenerationService - Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
java.lang.NullPointerException: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
	at com.example.backend.services.PdfGenerationService.addInvoiceLinesTable(PdfGenerationService.java:255)
	at com.example.backend.services.PdfGenerationService.generateInvoicePdf(PdfGenerationService.java:71)
	at com.example.backend.services.PrintJobService.createSinglePrintJob(PrintJobService.java:129)
	at com.example.backend.services.PrintJobService.createPrintJobs(PrintJobService.java:71)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.PrintJobService$$SpringCGLIB$$0.createPrintJobs(<generated>)
	at com.example.backend.services.InvoiceService.handlePrintJobCreation(InvoiceService.java:292)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:119)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 06:26:05.323 [http-nio-8080-exec-7] ERROR c.e.backend.services.PrintJobService - PDF generation failed for CLIENT job: Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
2025-10-07 06:26:05.323 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - Generating PDF for invoice 25 with type OWNER
2025-10-07 06:26:05.325 [http-nio-8080-exec-7] ERROR c.e.b.services.PdfGenerationService - Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
java.lang.NullPointerException: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
	at com.example.backend.services.PdfGenerationService.addInvoiceLinesTable(PdfGenerationService.java:255)
	at com.example.backend.services.PdfGenerationService.generateInvoicePdf(PdfGenerationService.java:71)
	at com.example.backend.services.PrintJobService.createSinglePrintJob(PrintJobService.java:129)
	at com.example.backend.services.PrintJobService.createPrintJobs(PrintJobService.java:79)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.PrintJobService$$SpringCGLIB$$0.createPrintJobs(<generated>)
	at com.example.backend.services.InvoiceService.handlePrintJobCreation(InvoiceService.java:292)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:119)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 06:26:05.325 [http-nio-8080-exec-7] ERROR c.e.backend.services.PrintJobService - PDF generation failed for OWNER job: Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
2025-10-07 06:26:05.325 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - Generating sticker PDF for invoice 25
2025-10-07 06:26:05.326 [http-nio-8080-exec-7] ERROR c.e.b.services.PdfGenerationService - Error generating sticker PDF: Cannot invoke "java.util.List.get(int)" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
java.lang.NullPointerException: Cannot invoke "java.util.List.get(int)" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
	at com.example.backend.services.PdfGenerationService.buildStickerPdf(PdfGenerationService.java:407)
	at com.example.backend.services.PdfGenerationService.generateStickerPdf(PdfGenerationService.java:113)
	at com.example.backend.services.PrintJobService.createStickerPrintJob(PrintJobService.java:171)
	at com.example.backend.services.PrintJobService.createPrintJobs(PrintJobService.java:87)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.PrintJobService$$SpringCGLIB$$0.createPrintJobs(<generated>)
	at com.example.backend.services.InvoiceService.handlePrintJobCreation(InvoiceService.java:292)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:119)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 06:26:05.327 [http-nio-8080-exec-7] ERROR c.e.backend.services.PrintJobService - Sticker PDF generation failed: Error generating sticker PDF
2025-10-07 06:26:05.327 [http-nio-8080-exec-7] ERROR c.e.backend.services.InvoiceService - Unexpected error creating print jobs for invoice 25: فشل في إنشاء جميع مهام الطباعة: فشل في إنشاء مهمة طباعة العميل: فشل في إنشاء ملف PDF لنوع CLIENT: Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null, فشل في إنشاء مهمة طباعة المالك: فشل في إنشاء ملف PDF لنوع OWNER: Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null, فشل في إنشاء مهمة طباعة الملصق: فشل في إنشاء ملف PDF للملصق: Error generating sticker PDF
com.example.backend.exceptions.printjob.PrintJobCreationException: فشل في إنشاء جميع مهام الطباعة: فشل في إنشاء مهمة طباعة العميل: فشل في إنشاء ملف PDF لنوع CLIENT: Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null, فشل في إنشاء مهمة طباعة المالك: فشل في إنشاء ملف PDF لنوع OWNER: Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null, فشل في إنشاء مهمة طباعة الملصق: فشل في إنشاء ملف PDF للملصق: Error generating sticker PDF
	at com.example.backend.services.PrintJobService.createPrintJobs(PrintJobService.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.PrintJobService$$SpringCGLIB$$0.createPrintJobs(<generated>)
	at com.example.backend.services.InvoiceService.handlePrintJobCreation(InvoiceService.java:292)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:119)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 06:26:05.329 [http-nio-8080-exec-7] WARN  c.e.backend.services.InvoiceService - Print job failure notification for invoice 25: خطأ غير متوقع في إنشاء مهام الطباعة
2025-10-07 06:26:05.329 [http-nio-8080-exec-7] INFO  c.e.backend.services.InvoiceService - Invoice 25 created successfully for customer 'Abdullah Shaddad' (ID: 1) with 1 lines, total: 4002.0 EGP. 0 errors occurred.
2025-10-07 06:26:05.330 [http-nio-8080-exec-7] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Transaction silently rolled back because it has been marked as rollback-only
org.springframework.transaction.UnexpectedRollbackException: Transaction silently rolled back because it has been marked as rollback-only
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:804)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:758)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:698)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:416)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 06:28:25.883 [main] INFO  c.example.backend.BackendApplication - Starting BackendApplication using Java 23.0.2 with PID 37932 (C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem\backend\target\classes started by Abdullah Shaddad in C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem)
2025-10-07 06:28:25.884 [main] DEBUG c.example.backend.BackendApplication - Running with Spring Boot v3.5.5, Spring v6.2.10
2025-10-07 06:28:25.884 [main] INFO  c.example.backend.BackendApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-07 06:28:26.318 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 06:28:26.319 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-10-07 06:28:26.343 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CustomerRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:28:26.343 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingDetailRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:28:26.344 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingRateRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:28:26.344 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.GlassTypeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:28:26.345 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceLineRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:28:26.346 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:28:26.346 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.NotificationRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:28:26.347 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.PrintJobRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:28:26.348 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:28:26.348 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 26 ms. Found 0 JDBC repository interfaces.
2025-10-07 06:28:26.354 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 06:28:26.355 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-07 06:28:26.378 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20 ms. Found 9 JPA repository interfaces.
2025-10-07 06:28:26.642 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-07 06:28:26.649 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-07 06:28:26.649 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-07 06:28:26.683 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-07 06:28:26.684 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 764 ms
2025-10-07 06:28:26.767 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-07 06:28:26.794 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-07 06:28:26.814 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-07 06:28:26.963 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-07 06:28:26.978 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-07 06:28:27.054 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@139089a4
2025-10-07 06:28:27.054 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-07 06:28:27.070 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-07 06:28:27.083 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-07 06:28:27.659 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-07 06:28:27.902 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 06:28:28.057 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-07 06:28:28.570 [main] DEBUG c.e.b.c.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-07 06:28:28.601 [main] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-07 06:28:28.602 [main] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-07 06:28:29.068 [main] INFO  c.e.backend.services.StorageService - MinIO bucket already exists: elguindy
2025-10-07 06:28:29.104 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-07 06:28:29.609 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-10-07 06:28:29.609 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@4043405a]]
2025-10-07 06:28:29.610 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-10-07 06:28:29.614 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-10-07 06:28:29.614 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@4043405a]]
2025-10-07 06:28:29.614 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-10-07 06:28:29.615 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-10-07 06:28:29.618 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 06:28:29.619 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-07 06:28:29.622 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-07 06:28:29.628 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-10-07 06:28:29.649 [main] ERROR o.s.b.d.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

2025-10-07 06:28:36.507 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-07 06:28:36.511 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-10-07 06:28:36.513 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-10-07 06:28:36.513 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@62027c17]]
2025-10-07 06:28:36.513 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-10-07 06:28:36.516 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 06:28:36.517 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-07 06:28:36.519 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-07 06:28:40.123 [main] INFO  c.example.backend.BackendApplication - Starting BackendApplication using Java 23.0.2 with PID 38832 (C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem\backend\target\classes started by Abdullah Shaddad in C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem)
2025-10-07 06:28:40.124 [main] DEBUG c.example.backend.BackendApplication - Running with Spring Boot v3.5.5, Spring v6.2.10
2025-10-07 06:28:40.124 [main] INFO  c.example.backend.BackendApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-07 06:28:40.550 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 06:28:40.551 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-10-07 06:28:40.577 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CustomerRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:28:40.578 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingDetailRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:28:40.579 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingRateRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:28:40.579 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.GlassTypeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:28:40.580 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceLineRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:28:40.581 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:28:40.582 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.NotificationRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:28:40.582 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.PrintJobRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:28:40.583 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:28:40.583 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 29 ms. Found 0 JDBC repository interfaces.
2025-10-07 06:28:40.589 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 06:28:40.589 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-07 06:28:40.612 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20 ms. Found 9 JPA repository interfaces.
2025-10-07 06:28:40.888 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-07 06:28:40.895 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-07 06:28:40.895 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-07 06:28:40.925 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-07 06:28:40.925 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 766 ms
2025-10-07 06:28:41.000 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-07 06:28:41.026 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-07 06:28:41.043 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-07 06:28:41.192 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-07 06:28:41.207 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-07 06:28:41.284 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1008df1e
2025-10-07 06:28:41.285 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-07 06:28:41.302 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-07 06:28:41.314 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-07 06:28:41.910 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-07 06:28:42.155 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 06:28:42.312 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-07 06:28:42.839 [main] DEBUG c.e.b.c.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-07 06:28:42.864 [main] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-07 06:28:42.865 [main] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-07 06:28:43.321 [main] INFO  c.e.backend.services.StorageService - MinIO bucket already exists: elguindy
2025-10-07 06:28:43.356 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-07 06:28:43.851 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-10-07 06:28:43.851 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@38fdbc9]]
2025-10-07 06:28:43.852 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-10-07 06:28:43.867 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-07 06:28:43.871 [main] INFO  c.example.backend.BackendApplication - Started BackendApplication in 3.995 seconds (process running for 4.375)
2025-10-07 06:28:43.876 [main] INFO  c.e.backend.config.DataInitializer - Starting application data initialization...
2025-10-07 06:28:43.876 [main] INFO  c.e.backend.config.DataInitializer - Application data initialization completed successfully.
2025-10-07 06:28:43.928 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 06:28:43.939 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 06:28:43.940 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 06:28:43.941 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 06:28:43.942 [main] INFO  c.e.backend.config.DataInitializer - User initialization completed. Default users created if they didn't exist.
2025-10-07 06:28:43.942 [main] INFO  c.e.backend.config.DataInitializer - IMPORTANT: Please change default passwords after first login for security!
2025-10-07 06:29:01.555 [http-nio-8080-exec-2] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-07 06:29:01.556 [http-nio-8080-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-07 06:29:01.557 [http-nio-8080-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-10-07 06:29:01.628 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:29:01.655 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        upper(c1_0.name) like upper(?) escape '\'
2025-10-07 06:29:06.531 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:29:06.570 [http-nio-8080-exec-1] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 100.0x100.0, cutting: SHATF
2025-10-07 06:29:06.577 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 06:29:06.585 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 06:29:06.609 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:29:06.609 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:29:06.614 [http-nio-8080-exec-3] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 100.0x100.0, cutting: SHATF
2025-10-07 06:29:06.614 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 100.0x100.0, cutting: SHATF
2025-10-07 06:29:06.614 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 06:29:06.614 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 06:29:06.617 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 06:29:06.617 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 06:29:07.390 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:29:07.398 [http-nio-8080-exec-7] INFO  c.e.backend.services.InvoiceService - Starting invoice creation for customer ID: 1
2025-10-07 06:29:07.398 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 06:29:07.409 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.Invoice */insert 
    into
        invoice (customer_id, issue_date, notes, payment_date, status, total_price) 
    values
        (?, ?, ?, ?, ?, ?)
2025-10-07 06:29:07.417 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 06:29:07.419 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 06:29:07.420 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.InvoiceLine */insert 
    into
        invoice_line (area_m2, cutting_price, cutting_type, dimension_unit, glass_type_id, height, invoice_id, length_m, line_total, width) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-07 06:29:07.434 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.Invoice */update invoice 
    set
        customer_id=?,
        issue_date=?,
        notes=?,
        payment_date=?,
        status=?,
        total_price=? 
    where
        id=?
2025-10-07 06:29:07.437 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 06:29:07.440 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - Generating PDF for invoice 26 with type CLIENT
2025-10-07 06:29:07.605 [http-nio-8080-exec-7] ERROR c.e.b.services.PdfGenerationService - Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
java.lang.NullPointerException: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
	at com.example.backend.services.PdfGenerationService.addInvoiceLinesTable(PdfGenerationService.java:255)
	at com.example.backend.services.PdfGenerationService.generateInvoicePdf(PdfGenerationService.java:71)
	at com.example.backend.services.PrintJobService.createSinglePrintJob(PrintJobService.java:129)
	at com.example.backend.services.PrintJobService.createPrintJobs(PrintJobService.java:71)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.PrintJobService$$SpringCGLIB$$0.createPrintJobs(<generated>)
	at com.example.backend.services.InvoiceService.handlePrintJobCreation(InvoiceService.java:292)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:119)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 06:29:07.607 [http-nio-8080-exec-7] ERROR c.e.backend.services.PrintJobService - PDF generation failed for CLIENT job: Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
2025-10-07 06:29:07.608 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - Generating PDF for invoice 26 with type OWNER
2025-10-07 06:29:07.610 [http-nio-8080-exec-7] ERROR c.e.b.services.PdfGenerationService - Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
java.lang.NullPointerException: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
	at com.example.backend.services.PdfGenerationService.addInvoiceLinesTable(PdfGenerationService.java:255)
	at com.example.backend.services.PdfGenerationService.generateInvoicePdf(PdfGenerationService.java:71)
	at com.example.backend.services.PrintJobService.createSinglePrintJob(PrintJobService.java:129)
	at com.example.backend.services.PrintJobService.createPrintJobs(PrintJobService.java:79)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.PrintJobService$$SpringCGLIB$$0.createPrintJobs(<generated>)
	at com.example.backend.services.InvoiceService.handlePrintJobCreation(InvoiceService.java:292)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:119)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 06:29:07.610 [http-nio-8080-exec-7] ERROR c.e.backend.services.PrintJobService - PDF generation failed for OWNER job: Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
2025-10-07 06:29:07.611 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - Generating sticker PDF for invoice 26
2025-10-07 06:29:07.612 [http-nio-8080-exec-7] ERROR c.e.b.services.PdfGenerationService - Error generating sticker PDF: Cannot invoke "java.util.List.get(int)" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
java.lang.NullPointerException: Cannot invoke "java.util.List.get(int)" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null
	at com.example.backend.services.PdfGenerationService.buildStickerPdf(PdfGenerationService.java:407)
	at com.example.backend.services.PdfGenerationService.generateStickerPdf(PdfGenerationService.java:113)
	at com.example.backend.services.PrintJobService.createStickerPrintJob(PrintJobService.java:173)
	at com.example.backend.services.PrintJobService.createPrintJobs(PrintJobService.java:87)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.PrintJobService$$SpringCGLIB$$0.createPrintJobs(<generated>)
	at com.example.backend.services.InvoiceService.handlePrintJobCreation(InvoiceService.java:292)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:119)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 06:29:07.613 [http-nio-8080-exec-7] ERROR c.e.backend.services.PrintJobService - Sticker PDF generation failed: Error generating sticker PDF
2025-10-07 06:29:07.613 [http-nio-8080-exec-7] ERROR c.e.backend.services.InvoiceService - Unexpected error creating print jobs for invoice 26: فشل في إنشاء جميع مهام الطباعة: فشل في إنشاء مهمة طباعة العميل: فشل في إنشاء ملف PDF لنوع CLIENT: Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null, فشل في إنشاء مهمة طباعة المالك: فشل في إنشاء ملف PDF لنوع OWNER: Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null, فشل في إنشاء مهمة طباعة الملصق: فشل في إنشاء ملف PDF للملصق: Error generating sticker PDF
com.example.backend.exceptions.printjob.PrintJobCreationException: فشل في إنشاء جميع مهام الطباعة: فشل في إنشاء مهمة طباعة العميل: فشل في إنشاء ملف PDF لنوع CLIENT: Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null, فشل في إنشاء مهمة طباعة المالك: فشل في إنشاء ملف PDF لنوع OWNER: Error generating invoice PDF: Cannot invoke "java.util.List.iterator()" because the return value of "com.example.backend.models.Invoice.getInvoiceLines()" is null, فشل في إنشاء مهمة طباعة الملصق: فشل في إنشاء ملف PDF للملصق: Error generating sticker PDF
	at com.example.backend.services.PrintJobService.createPrintJobs(PrintJobService.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.PrintJobService$$SpringCGLIB$$0.createPrintJobs(<generated>)
	at com.example.backend.services.InvoiceService.handlePrintJobCreation(InvoiceService.java:292)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:119)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 06:29:07.615 [http-nio-8080-exec-7] WARN  c.e.backend.services.InvoiceService - Print job failure notification for invoice 26: خطأ غير متوقع في إنشاء مهام الطباعة
2025-10-07 06:29:07.622 [http-nio-8080-exec-7] INFO  c.e.backend.services.InvoiceService - Invoice 26 created successfully for customer 'Abdullah Shaddad' (ID: 1) with 1 lines, total: 4002.0 EGP. 0 errors occurred.
2025-10-07 06:29:07.625 [http-nio-8080-exec-7] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Transaction silently rolled back because it has been marked as rollback-only
org.springframework.transaction.UnexpectedRollbackException: Transaction silently rolled back because it has been marked as rollback-only
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:804)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:758)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:698)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:416)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 06:29:43.862 [MessageBroker-1] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2025-10-07 06:35:11.690 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-07 06:35:11.694 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-10-07 06:35:11.695 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-10-07 06:35:11.696 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@38fdbc9]]
2025-10-07 06:35:11.696 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-10-07 06:35:11.700 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 06:35:11.701 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-07 06:35:11.703 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-07 06:35:16.831 [main] INFO  c.example.backend.BackendApplication - Starting BackendApplication using Java 23.0.2 with PID 40644 (C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem\backend\target\classes started by Abdullah Shaddad in C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem)
2025-10-07 06:35:16.832 [main] DEBUG c.example.backend.BackendApplication - Running with Spring Boot v3.5.5, Spring v6.2.10
2025-10-07 06:35:16.833 [main] INFO  c.example.backend.BackendApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-07 06:35:17.235 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 06:35:17.236 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-10-07 06:35:17.258 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CustomerRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:35:17.258 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingDetailRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:35:17.259 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingRateRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:35:17.260 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.GlassTypeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:35:17.260 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceLineRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:35:17.261 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:35:17.261 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.NotificationRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:35:17.262 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.PrintJobRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:35:17.263 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 06:35:17.263 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 25 ms. Found 0 JDBC repository interfaces.
2025-10-07 06:35:17.269 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 06:35:17.270 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-07 06:35:17.294 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 9 JPA repository interfaces.
2025-10-07 06:35:17.567 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-07 06:35:17.574 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-07 06:35:17.574 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-07 06:35:17.610 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-07 06:35:17.610 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 747 ms
2025-10-07 06:35:17.697 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-07 06:35:17.725 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-07 06:35:17.744 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-07 06:35:17.893 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-07 06:35:17.910 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-07 06:35:17.986 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@21f91efa
2025-10-07 06:35:17.987 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-07 06:35:18.004 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-07 06:35:18.017 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-07 06:35:18.620 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-07 06:35:18.870 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 06:35:19.015 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-07 06:35:19.498 [main] DEBUG c.e.b.c.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-07 06:35:19.521 [main] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-07 06:35:19.521 [main] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-07 06:35:19.952 [main] INFO  c.e.backend.services.StorageService - MinIO bucket already exists: elguindy
2025-10-07 06:35:19.980 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-07 06:35:20.430 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-10-07 06:35:20.430 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@21af7d9c]]
2025-10-07 06:35:20.431 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-10-07 06:35:20.441 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-07 06:35:20.445 [main] INFO  c.example.backend.BackendApplication - Started BackendApplication in 3.846 seconds (process running for 4.199)
2025-10-07 06:35:20.450 [main] INFO  c.e.backend.config.DataInitializer - Starting application data initialization...
2025-10-07 06:35:20.450 [main] INFO  c.e.backend.config.DataInitializer - Application data initialization completed successfully.
2025-10-07 06:35:20.500 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 06:35:20.511 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 06:35:20.512 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 06:35:20.513 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 06:35:20.514 [main] INFO  c.e.backend.config.DataInitializer - User initialization completed. Default users created if they didn't exist.
2025-10-07 06:35:20.514 [main] INFO  c.e.backend.config.DataInitializer - IMPORTANT: Please change default passwords after first login for security!
2025-10-07 06:35:29.360 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-07 06:35:29.360 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-07 06:35:29.361 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-10-07 06:35:29.440 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:35:29.507 [http-nio-8080-exec-1] INFO  c.e.backend.services.InvoiceService - Starting invoice creation for customer ID: 1
2025-10-07 06:35:29.513 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 06:35:29.531 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.Invoice */insert 
    into
        invoice (customer_id, issue_date, notes, payment_date, status, total_price) 
    values
        (?, ?, ?, ?, ?, ?)
2025-10-07 06:35:29.540 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 06:35:29.551 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 06:35:29.554 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.InvoiceLine */insert 
    into
        invoice_line (area_m2, cutting_price, cutting_type, dimension_unit, glass_type_id, height, invoice_id, length_m, line_total, width) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-07 06:35:29.568 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.Invoice */update invoice 
    set
        customer_id=?,
        issue_date=?,
        notes=?,
        payment_date=?,
        status=?,
        total_price=? 
    where
        id=?
2025-10-07 06:35:29.573 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        where
            i1_0.id=?
2025-10-07 06:35:29.580 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 06:35:29.582 [http-nio-8080-exec-1] ERROR c.e.backend.services.PrintJobService - Invoice 27 has no invoice lines after reload
2025-10-07 06:35:29.583 [http-nio-8080-exec-1] ERROR c.e.backend.services.InvoiceService - Unexpected error creating print jobs for invoice 27: لا يمكن إنشاء مهام الطباعة: الفاتورة لا تحتوي على بنود
com.example.backend.exceptions.printjob.PrintJobCreationException: لا يمكن إنشاء مهام الطباعة: الفاتورة لا تحتوي على بنود
	at com.example.backend.services.PrintJobService.createPrintJobs(PrintJobService.java:78)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.PrintJobService$$SpringCGLIB$$0.createPrintJobs(<generated>)
	at com.example.backend.services.InvoiceService.handlePrintJobCreation(InvoiceService.java:292)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:119)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 06:35:29.587 [http-nio-8080-exec-1] WARN  c.e.backend.services.InvoiceService - Print job failure notification for invoice 27: خطأ غير متوقع في إنشاء مهام الطباعة
2025-10-07 06:35:29.601 [http-nio-8080-exec-1] INFO  c.e.backend.services.InvoiceService - Invoice 27 created successfully for customer 'Abdullah Shaddad' (ID: 1) with 1 lines, total: 4002.0 EGP. 0 errors occurred.
2025-10-07 06:35:29.604 [http-nio-8080-exec-1] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Transaction silently rolled back because it has been marked as rollback-only
org.springframework.transaction.UnexpectedRollbackException: Transaction silently rolled back because it has been marked as rollback-only
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:804)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:758)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:698)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:416)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 06:35:32.526 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:35:32.530 [http-nio-8080-exec-2] INFO  c.e.backend.services.InvoiceService - Starting invoice creation for customer ID: 1
2025-10-07 06:35:32.531 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 06:35:32.532 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.Invoice */insert 
    into
        invoice (customer_id, issue_date, notes, payment_date, status, total_price) 
    values
        (?, ?, ?, ?, ?, ?)
2025-10-07 06:35:32.533 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 06:35:32.535 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 06:35:32.536 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.InvoiceLine */insert 
    into
        invoice_line (area_m2, cutting_price, cutting_type, dimension_unit, glass_type_id, height, invoice_id, length_m, line_total, width) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-07 06:35:32.539 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.Invoice */update invoice 
    set
        customer_id=?,
        issue_date=?,
        notes=?,
        payment_date=?,
        status=?,
        total_price=? 
    where
        id=?
2025-10-07 06:35:32.540 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        where
            i1_0.id=?
2025-10-07 06:35:32.541 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 06:35:32.542 [http-nio-8080-exec-2] ERROR c.e.backend.services.PrintJobService - Invoice 28 has no invoice lines after reload
2025-10-07 06:35:32.542 [http-nio-8080-exec-2] ERROR c.e.backend.services.InvoiceService - Unexpected error creating print jobs for invoice 28: لا يمكن إنشاء مهام الطباعة: الفاتورة لا تحتوي على بنود
com.example.backend.exceptions.printjob.PrintJobCreationException: لا يمكن إنشاء مهام الطباعة: الفاتورة لا تحتوي على بنود
	at com.example.backend.services.PrintJobService.createPrintJobs(PrintJobService.java:78)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.PrintJobService$$SpringCGLIB$$0.createPrintJobs(<generated>)
	at com.example.backend.services.InvoiceService.handlePrintJobCreation(InvoiceService.java:292)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:119)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 06:35:32.544 [http-nio-8080-exec-2] WARN  c.e.backend.services.InvoiceService - Print job failure notification for invoice 28: خطأ غير متوقع في إنشاء مهام الطباعة
2025-10-07 06:35:32.544 [http-nio-8080-exec-2] INFO  c.e.backend.services.InvoiceService - Invoice 28 created successfully for customer 'Abdullah Shaddad' (ID: 1) with 1 lines, total: 4002.0 EGP. 0 errors occurred.
2025-10-07 06:35:32.546 [http-nio-8080-exec-2] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Transaction silently rolled back because it has been marked as rollback-only
org.springframework.transaction.UnexpectedRollbackException: Transaction silently rolled back because it has been marked as rollback-only
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:804)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:758)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:698)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:416)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 06:35:35.300 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:35:35.304 [http-nio-8080-exec-3] INFO  c.e.backend.services.InvoiceService - Starting invoice creation for customer ID: 1
2025-10-07 06:35:35.304 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 06:35:35.306 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.Invoice */insert 
    into
        invoice (customer_id, issue_date, notes, payment_date, status, total_price) 
    values
        (?, ?, ?, ?, ?, ?)
2025-10-07 06:35:35.307 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 06:35:35.308 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 06:35:35.310 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.InvoiceLine */insert 
    into
        invoice_line (area_m2, cutting_price, cutting_type, dimension_unit, glass_type_id, height, invoice_id, length_m, line_total, width) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-07 06:35:35.312 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.Invoice */update invoice 
    set
        customer_id=?,
        issue_date=?,
        notes=?,
        payment_date=?,
        status=?,
        total_price=? 
    where
        id=?
2025-10-07 06:35:35.313 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        where
            i1_0.id=?
2025-10-07 06:35:35.314 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 06:35:35.315 [http-nio-8080-exec-3] ERROR c.e.backend.services.PrintJobService - Invoice 29 has no invoice lines after reload
2025-10-07 06:35:35.315 [http-nio-8080-exec-3] ERROR c.e.backend.services.InvoiceService - Unexpected error creating print jobs for invoice 29: لا يمكن إنشاء مهام الطباعة: الفاتورة لا تحتوي على بنود
com.example.backend.exceptions.printjob.PrintJobCreationException: لا يمكن إنشاء مهام الطباعة: الفاتورة لا تحتوي على بنود
	at com.example.backend.services.PrintJobService.createPrintJobs(PrintJobService.java:78)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.PrintJobService$$SpringCGLIB$$0.createPrintJobs(<generated>)
	at com.example.backend.services.InvoiceService.handlePrintJobCreation(InvoiceService.java:292)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:119)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 06:35:35.317 [http-nio-8080-exec-3] WARN  c.e.backend.services.InvoiceService - Print job failure notification for invoice 29: خطأ غير متوقع في إنشاء مهام الطباعة
2025-10-07 06:35:35.317 [http-nio-8080-exec-3] INFO  c.e.backend.services.InvoiceService - Invoice 29 created successfully for customer 'Abdullah Shaddad' (ID: 1) with 1 lines, total: 4002.0 EGP. 0 errors occurred.
2025-10-07 06:35:35.319 [http-nio-8080-exec-3] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Transaction silently rolled back because it has been marked as rollback-only
org.springframework.transaction.UnexpectedRollbackException: Transaction silently rolled back because it has been marked as rollback-only
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:804)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:758)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:698)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:416)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 06:35:39.729 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:35:39.739 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 06:35:39.743 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 06:35:39.753 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 06:35:39.755 [http-nio-8080-exec-4] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 06:35:39.758 [http-nio-8080-exec-4] WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2025-10-07 06:35:39.769 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 06:35:39.774 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 06:35:39.775 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 06:35:39.778 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 06:35:39.779 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 06:36:20.426 [MessageBroker-1] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2025-10-07 07:06:20.435 [MessageBroker-1] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 2, active threads = 1, queued tasks = 0, completed tasks = 1]
2025-10-07 07:36:20.443 [MessageBroker-2] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 3, active threads = 1, queued tasks = 0, completed tasks = 2]
2025-10-07 07:47:17.591 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:47:17.591 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:47:17.604 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:47:17.605 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:47:17.607 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:47:17.613 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:47:17.615 [http-nio-8080-exec-1] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 07:47:18.593 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:47:18.599 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:47:18.600 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:47:18.603 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:47:18.606 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 07:48:22.330 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:22.335 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:48:22.336 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:48:22.341 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:48:22.342 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 07:48:22.348 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:22.351 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:48:22.352 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:48:22.355 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:48:22.356 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 07:48:23.555 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:23.560 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:48:23.560 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:48:23.563 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:48:23.565 [http-nio-8080-exec-7] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 07:48:25.329 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:25.344 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0
2025-10-07 07:48:25.354 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:25.359 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0
2025-10-07 07:48:27.237 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:27.238 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:27.241 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:48:27.242 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:48:27.242 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:48:27.246 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:48:27.247 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 07:48:27.249 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:27.251 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:27.254 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:48:27.255 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:48:27.256 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:48:27.260 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:48:27.261 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 07:48:27.531 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:27.534 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:48:27.534 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:48:27.537 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:48:27.538 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 07:48:27.922 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:27.928 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - API: Fetching queued print jobs
2025-10-07 07:48:27.931 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:48:27.935 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 07:48:27.938 [http-nio-8080-exec-9] INFO  c.e.b.controllers.PrintJobController - API: Returning 1 queued print jobs
2025-10-07 07:48:27.948 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:27.955 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - API: Fetching queued print jobs
2025-10-07 07:48:27.956 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:48:27.958 [http-nio-8080-exec-10] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 07:48:27.960 [http-nio-8080-exec-10] INFO  c.e.b.controllers.PrintJobController - API: Returning 1 queued print jobs
2025-10-07 07:48:28.927 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:28.932 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - API: Marking print job 35 as PRINTING
2025-10-07 07:48:28.933 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 07:48:28.936 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        created_at=?,
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 07:48:28.942 [http-nio-8080-exec-3] INFO  c.e.b.controllers.PrintJobController - API: Print job 35 marked as PRINTING
2025-10-07 07:48:28.967 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:28.972 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - API: Fetching queued print jobs
2025-10-07 07:48:28.972 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:48:28.974 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 07:48:28.975 [http-nio-8080-exec-2] INFO  c.e.b.controllers.PrintJobController - API: Returning 0 queued print jobs
2025-10-07 07:48:32.189 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:32.189 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:32.193 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:48:32.194 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:48:32.194 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:48:32.197 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:48:32.199 [http-nio-8080-exec-4] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 07:48:32.202 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:32.202 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:32.206 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:48:32.206 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:48:32.206 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:48:32.209 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:48:32.210 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 07:48:32.481 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:32.483 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:48:32.484 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:48:32.487 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:48:32.488 [http-nio-8080-exec-7] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 07:48:41.065 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-07 07:48:41.070 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-10-07 07:48:41.071 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-10-07 07:48:41.071 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@21af7d9c]]
2025-10-07 07:48:41.072 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-10-07 07:48:41.076 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 07:48:41.078 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-07 07:48:41.081 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-07 07:48:46.473 [main] INFO  c.example.backend.BackendApplication - Starting BackendApplication using Java 23.0.2 with PID 9840 (C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem\backend\target\classes started by Abdullah Shaddad in C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem)
2025-10-07 07:48:46.474 [main] DEBUG c.example.backend.BackendApplication - Running with Spring Boot v3.5.5, Spring v6.2.10
2025-10-07 07:48:46.474 [main] INFO  c.example.backend.BackendApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-07 07:48:46.944 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 07:48:46.945 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-10-07 07:48:46.970 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CustomerRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 07:48:46.971 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingDetailRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 07:48:46.971 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingRateRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 07:48:46.972 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.GlassTypeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 07:48:46.973 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceLineRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 07:48:46.974 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 07:48:46.974 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.NotificationRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 07:48:46.975 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.PrintJobRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 07:48:46.976 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 07:48:46.976 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 27 ms. Found 0 JDBC repository interfaces.
2025-10-07 07:48:46.985 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 07:48:46.985 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-07 07:48:47.016 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 27 ms. Found 9 JPA repository interfaces.
2025-10-07 07:48:47.334 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-07 07:48:47.342 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-07 07:48:47.342 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-07 07:48:47.381 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-07 07:48:47.381 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 871 ms
2025-10-07 07:48:47.465 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-07 07:48:47.495 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-07 07:48:47.513 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-07 07:48:47.668 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-07 07:48:47.686 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-07 07:48:47.768 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@3e04abc5
2025-10-07 07:48:47.769 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-07 07:48:47.789 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-07 07:48:47.802 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-07 07:48:48.448 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-07 07:48:48.737 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 07:48:48.894 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-07 07:48:49.412 [main] DEBUG c.e.b.c.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-07 07:48:49.440 [main] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-07 07:48:49.440 [main] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-07 07:48:49.968 [main] INFO  c.e.backend.services.StorageService - MinIO bucket already exists: elguindy
2025-10-07 07:48:50.012 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-07 07:48:50.614 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-10-07 07:48:50.615 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@2ad41ea0]]
2025-10-07 07:48:50.616 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-10-07 07:48:50.627 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-07 07:48:50.632 [main] INFO  c.example.backend.BackendApplication - Started BackendApplication in 4.424 seconds (process running for 4.803)
2025-10-07 07:48:50.640 [main] INFO  c.e.backend.config.DataInitializer - Starting application data initialization...
2025-10-07 07:48:50.640 [main] INFO  c.e.backend.config.DataInitializer - Application data initialization completed successfully.
2025-10-07 07:48:50.706 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-07 07:48:50.707 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-07 07:48:50.707 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 07:48:50.708 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-10-07 07:48:50.721 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 07:48:50.724 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 07:48:50.726 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 07:48:50.728 [main] INFO  c.e.backend.config.DataInitializer - User initialization completed. Default users created if they didn't exist.
2025-10-07 07:48:50.728 [main] INFO  c.e.backend.config.DataInitializer - IMPORTANT: Please change default passwords after first login for security!
2025-10-07 07:48:50.796 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:50.818 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:48:50.823 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:48:50.826 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 07:48:50.828 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 07:48:50.845 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:50.849 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:48:50.850 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:48:50.851 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 07:48:50.852 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 07:48:52.058 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:52.061 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:52.069 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:48:52.071 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:48:52.078 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:48:52.101 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:48:52.104 [http-nio-8080-exec-4] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 07:48:52.106 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:52.108 [http-nio-8080-exec-4] WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2025-10-07 07:48:52.111 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:48:52.123 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:52.132 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:48:52.133 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:48:52.138 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:48:52.140 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 07:48:52.351 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:52.356 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:48:52.356 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:48:52.359 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:48:52.360 [http-nio-8080-exec-7] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 07:48:55.400 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:55.406 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:48:55.407 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:48:55.409 [http-nio-8080-exec-6] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 07:48:55.410 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 07:48:55.415 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:55.419 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:48:55.420 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:48:55.422 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 07:48:55.423 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 07:48:56.235 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:56.236 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:56.242 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:48:56.243 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:48:56.243 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:48:56.246 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:48:56.248 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 07:48:56.251 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:56.251 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:56.255 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:48:56.255 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:48:56.255 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:48:56.258 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:48:56.260 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 07:48:56.523 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:48:56.526 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:48:56.527 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:48:56.529 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:48:56.530 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 07:49:04.452 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:04.457 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:49:04.458 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:49:04.460 [http-nio-8080-exec-4] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 07:49:04.461 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 07:49:04.467 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:04.472 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:49:04.473 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:49:04.475 [http-nio-8080-exec-8] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 07:49:04.476 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 07:49:05.811 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:05.811 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:05.816 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:49:05.817 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:49:05.817 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:49:05.821 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:49:05.823 [http-nio-8080-exec-7] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 07:49:05.826 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:05.828 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:05.831 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:49:05.832 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:49:05.833 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:49:05.838 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:49:05.840 [http-nio-8080-exec-1] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 07:49:06.100 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:06.104 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:49:06.105 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:49:06.108 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:49:06.109 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 07:49:17.685 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:17.692 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0
2025-10-07 07:49:17.702 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:17.706 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0
2025-10-07 07:49:20.180 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:20.184 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:49:20.185 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:49:20.186 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:20.189 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:49:20.190 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 07:49:20.191 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:49:20.195 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:20.196 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:20.199 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:49:20.200 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:49:20.200 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:49:20.206 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:49:20.207 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 07:49:20.475 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:20.478 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:49:20.479 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:49:20.482 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:49:20.483 [http-nio-8080-exec-7] INFO  c.e.b.controllers.InvoiceController - Retrieved 1 invoices (page 1 of 1)
2025-10-07 07:49:24.341 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:24.349 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        upper(c1_0.name) like upper(?) escape '\'
2025-10-07 07:49:31.359 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:31.398 [http-nio-8080-exec-3] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 100.0x100.0, cutting: SHATF
2025-10-07 07:49:31.400 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 07:49:31.406 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 07:49:31.428 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:31.428 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:31.432 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 100.0x100.0, cutting: SHATF
2025-10-07 07:49:31.432 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 100.0x100.0, cutting: SHATF
2025-10-07 07:49:31.432 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 07:49:31.432 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 07:49:31.434 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 07:49:31.434 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 07:49:33.310 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:33.317 [http-nio-8080-exec-6] INFO  c.e.backend.services.InvoiceService - Starting invoice creation for customer ID: 1
2025-10-07 07:49:33.318 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:49:33.329 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.Invoice */insert 
    into
        invoice (customer_id, issue_date, notes, payment_date, status, total_price) 
    values
        (?, ?, ?, ?, ?, ?)
2025-10-07 07:49:33.340 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 07:49:33.342 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 07:49:33.344 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.InvoiceLine */insert 
    into
        invoice_line (area_m2, cutting_price, cutting_type, dimension_unit, glass_type_id, height, invoice_id, length_m, line_total, width) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-07 07:49:33.360 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.Invoice */update invoice 
    set
        customer_id=?,
        issue_date=?,
        notes=?,
        payment_date=?,
        status=?,
        total_price=? 
    where
        id=?
2025-10-07 07:49:33.364 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        where
            i1_0.id=?
2025-10-07 07:49:33.374 [http-nio-8080-exec-6] INFO  c.e.backend.services.InvoiceService - Invoice 30 created successfully for customer 'Abdullah Shaddad' (ID: 1) with 1 lines, total: 4002.0 EGP
2025-10-07 07:49:34.890 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:34.895 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 30
2025-10-07 07:49:34.896 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:49:34.899 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 07:49:34.901 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 30: 0 successful, 0 failed, 3 missing
2025-10-07 07:49:34.902 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 30: 3 total jobs
2025-10-07 07:49:34.910 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:34.914 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:49:34.914 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:49:34.918 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:49:34.919 [http-nio-8080-exec-9] INFO  c.e.b.controllers.InvoiceController - Retrieved 2 invoices (page 1 of 1)
2025-10-07 07:49:50.614 [MessageBroker-1] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2025-10-07 07:49:56.508 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:56.513 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:49:56.514 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:49:56.515 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 07:49:56.516 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 07:49:56.521 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:56.524 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:49:56.525 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:49:56.526 [http-nio-8080-exec-4] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 07:49:56.527 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 07:49:58.954 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:58.957 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:49:58.958 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:49:58.959 [http-nio-8080-exec-6] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 07:49:58.960 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 07:49:58.963 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:49:58.966 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:49:58.967 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:49:58.968 [http-nio-8080-exec-8] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 07:49:58.969 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 07:50:13.576 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:50:13.577 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:50:13.576 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:50:13.582 [http-nio-8080-exec-7] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 100.0x100.0, cutting: SHATF
2025-10-07 07:50:13.582 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:50:13.582 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 07:50:13.582 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:50:13.583 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:50:13.585 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 07:50:13.588 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:50:13.589 [http-nio-8080-exec-9] INFO  c.e.b.controllers.InvoiceController - Retrieved 2 invoices (page 1 of 1)
2025-10-07 07:50:14.571 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:50:14.576 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:50:14.576 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:50:14.579 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:50:14.580 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Retrieved 2 invoices (page 1 of 1)
2025-10-07 07:50:18.477 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:50:18.481 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:50:18.482 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:50:18.483 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 07:50:18.484 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 07:50:18.488 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:50:18.492 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:50:18.493 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:50:18.494 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 07:50:18.495 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 07:50:19.208 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:50:19.209 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:50:19.212 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:50:19.213 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:50:19.213 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:50:19.216 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:50:19.217 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 2 invoices (page 1 of 1)
2025-10-07 07:50:19.220 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:50:19.222 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:50:19.223 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:50:19.225 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:50:19.225 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:50:19.239 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:50:19.242 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 2 invoices (page 1 of 1)
2025-10-07 07:50:19.506 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:50:19.511 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:50:19.511 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:50:19.515 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:50:19.516 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Retrieved 2 invoices (page 1 of 1)
2025-10-07 07:50:23.680 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:50:23.684 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:50:23.684 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:50:23.686 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 07:50:23.687 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 07:50:23.691 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:50:23.696 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:50:23.696 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:50:23.698 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 07:50:23.699 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 07:50:24.892 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:50:24.896 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:50:24.896 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:50:24.897 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:50:24.900 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:50:24.900 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:50:24.902 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Retrieved 2 invoices (page 1 of 1)
2025-10-07 07:50:24.905 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:50:24.906 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:50:24.908 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:50:24.909 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:50:24.909 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:50:24.912 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:50:24.913 [http-nio-8080-exec-1] INFO  c.e.b.controllers.InvoiceController - Retrieved 2 invoices (page 1 of 1)
2025-10-07 07:50:25.189 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:50:25.192 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:50:25.192 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:50:25.195 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:50:25.196 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 2 invoices (page 1 of 1)
2025-10-07 07:51:32.550 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:51:32.554 [http-nio-8080-exec-9] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 100.0x100.0, cutting: SHATF
2025-10-07 07:51:32.554 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 07:51:32.556 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 07:51:32.574 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:51:32.574 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:51:32.577 [http-nio-8080-exec-3] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 100.0x100.0, cutting: SHATF
2025-10-07 07:51:32.577 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 100.0x100.0, cutting: SHATF
2025-10-07 07:51:32.578 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 07:51:32.578 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 07:51:32.579 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 07:51:32.579 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 07:51:37.308 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:51:37.314 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        upper(c1_0.name) like upper(?) escape '\'
2025-10-07 07:51:38.792 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:51:38.797 [http-nio-8080-exec-1] INFO  c.e.backend.services.InvoiceService - Starting invoice creation for customer ID: 1
2025-10-07 07:51:38.797 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:51:38.799 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.Invoice */insert 
    into
        invoice (customer_id, issue_date, notes, payment_date, status, total_price) 
    values
        (?, ?, ?, ?, ?, ?)
2025-10-07 07:51:38.800 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 07:51:38.801 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 07:51:38.803 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.InvoiceLine */insert 
    into
        invoice_line (area_m2, cutting_price, cutting_type, dimension_unit, glass_type_id, height, invoice_id, length_m, line_total, width) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-07 07:51:38.805 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.Invoice */update invoice 
    set
        customer_id=?,
        issue_date=?,
        notes=?,
        payment_date=?,
        status=?,
        total_price=? 
    where
        id=?
2025-10-07 07:51:38.806 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        where
            i1_0.id=?
2025-10-07 07:51:38.808 [http-nio-8080-exec-1] INFO  c.e.backend.services.InvoiceService - Invoice 31 created successfully for customer 'Abdullah Shaddad' (ID: 1) with 1 lines, total: 4002.0 EGP
2025-10-07 07:51:40.319 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:51:40.323 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 31
2025-10-07 07:51:40.323 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:51:40.325 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 07:51:40.326 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 31: 0 successful, 0 failed, 3 missing
2025-10-07 07:51:40.327 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 31: 3 total jobs
2025-10-07 07:51:40.332 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:51:40.337 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:51:40.337 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:51:40.342 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:51:40.343 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 3 invoices (page 1 of 1)
2025-10-07 07:51:48.817 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:51:48.822 [http-nio-8080-exec-7] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 100.0x100.0, cutting: SHATF
2025-10-07 07:51:48.822 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 07:51:48.824 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 07:51:48.835 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:51:48.835 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:51:48.838 [http-nio-8080-exec-9] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 100.0x100.0, cutting: SHATF
2025-10-07 07:51:48.838 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 100.0x100.0, cutting: SHATF
2025-10-07 07:51:48.838 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 07:51:48.838 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 07:51:48.840 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 07:51:48.840 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 07:51:55.252 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:51:55.258 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        upper(c1_0.name) like upper(?) escape '\'
2025-10-07 07:51:55.568 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:51:55.571 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        upper(c1_0.name) like upper(?) escape '\'
2025-10-07 07:51:56.330 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:51:56.335 [http-nio-8080-exec-1] INFO  c.e.backend.services.InvoiceService - Starting invoice creation for customer ID: 1
2025-10-07 07:51:56.335 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:51:56.336 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.Invoice */insert 
    into
        invoice (customer_id, issue_date, notes, payment_date, status, total_price) 
    values
        (?, ?, ?, ?, ?, ?)
2025-10-07 07:51:56.338 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 07:51:56.339 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 07:51:56.340 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.InvoiceLine */insert 
    into
        invoice_line (area_m2, cutting_price, cutting_type, dimension_unit, glass_type_id, height, invoice_id, length_m, line_total, width) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-07 07:51:56.342 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.Invoice */update invoice 
    set
        customer_id=?,
        issue_date=?,
        notes=?,
        payment_date=?,
        status=?,
        total_price=? 
    where
        id=?
2025-10-07 07:51:56.343 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        where
            i1_0.id=?
2025-10-07 07:51:56.344 [http-nio-8080-exec-1] INFO  c.e.backend.services.InvoiceService - Invoice 32 created successfully for customer 'Abdullah Shaddad' (ID: 1) with 1 lines, total: 4200.0 EGP
2025-10-07 07:51:57.946 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:51:57.950 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 07:51:57.950 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:51:57.952 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 07:51:57.953 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 0 successful, 0 failed, 3 missing
2025-10-07 07:51:57.954 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 07:51:57.959 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:51:57.962 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:51:57.963 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:51:57.966 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:51:57.967 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 4 invoices (page 1 of 1)
2025-10-07 07:55:10.587 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:10.587 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:10.590 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:55:10.590 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:55:10.590 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:55:10.593 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:55:10.594 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Retrieved 4 invoices (page 1 of 1)
2025-10-07 07:55:10.595 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:10.597 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:10.597 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:55:10.598 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:55:10.600 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:55:10.603 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:10.603 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:55:10.604 [http-nio-8080-exec-4] INFO  c.e.b.controllers.InvoiceController - Retrieved 4 invoices (page 1 of 1)
2025-10-07 07:55:10.606 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:55:10.607 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:10.609 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:55:10.610 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:55:10.611 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:10.614 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:55:10.614 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:55:10.615 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 4 invoices (page 1 of 1)
2025-10-07 07:55:10.619 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:10.621 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:55:10.621 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:55:10.624 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:55:10.625 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 4 invoices (page 1 of 1)
2025-10-07 07:55:11.574 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:11.578 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:55:11.579 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:55:11.582 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:55:11.582 [http-nio-8080-exec-7] INFO  c.e.b.controllers.InvoiceController - Retrieved 4 invoices (page 1 of 1)
2025-10-07 07:55:11.585 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:11.588 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:55:11.588 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:55:11.591 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:55:11.592 [http-nio-8080-exec-9] INFO  c.e.b.controllers.InvoiceController - Retrieved 4 invoices (page 1 of 1)
2025-10-07 07:55:17.380 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:17.384 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 07:55:17.385 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:55:17.389 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 07:55:17.391 [http-nio-8080-exec-10] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 0 successful, 0 failed, 3 missing
2025-10-07 07:55:17.392 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 07:55:18.371 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:18.374 [http-nio-8080-exec-3] INFO  c.e.b.controllers.PrintJobController - REST API: Creating print jobs for invoice 32
2025-10-07 07:55:18.377 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 07:55:18.383 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 07:55:18.384 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Creating print jobs for invoice 32 with 1 lines
2025-10-07 07:55:18.384 [http-nio-8080-exec-3] INFO  c.e.b.services.PdfGenerationService - Generating PDF for invoice 32 with type CLIENT
2025-10-07 07:55:18.614 [http-nio-8080-exec-3] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/invoices/20251007_075518_e49eb41e_invoice_32_client.pdf
2025-10-07 07:55:18.614 [http-nio-8080-exec-3] INFO  c.e.b.services.PdfGenerationService - PDF generated and stored successfully: http://localhost:9000/elguindy/invoices/20251007_075518_e49eb41e_invoice_32_client.pdf
2025-10-07 07:55:18.615 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 07:55:18.617 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - CLIENT print job created for invoice 32: 36
2025-10-07 07:55:18.617 [http-nio-8080-exec-3] INFO  c.e.b.services.PdfGenerationService - Generating PDF for invoice 32 with type OWNER
2025-10-07 07:55:18.631 [http-nio-8080-exec-3] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/invoices/20251007_075518_3b2f85a3_invoice_32_owner.pdf
2025-10-07 07:55:18.631 [http-nio-8080-exec-3] INFO  c.e.b.services.PdfGenerationService - PDF generated and stored successfully: http://localhost:9000/elguindy/invoices/20251007_075518_3b2f85a3_invoice_32_owner.pdf
2025-10-07 07:55:18.632 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 07:55:18.633 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - OWNER print job created for invoice 32: 37
2025-10-07 07:55:18.633 [http-nio-8080-exec-3] INFO  c.e.b.services.PdfGenerationService - Generating sticker PDF for invoice 32
2025-10-07 07:55:18.647 [http-nio-8080-exec-3] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/stickers/20251007_075518_40fb48b7_sticker_32.pdf
2025-10-07 07:55:18.647 [http-nio-8080-exec-3] INFO  c.e.b.services.PdfGenerationService - Sticker PDF generated successfully: http://localhost:9000/elguindy/stickers/20251007_075518_40fb48b7_sticker_32.pdf
2025-10-07 07:55:18.648 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 07:55:18.649 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - All 3 print jobs created successfully for invoice 32
2025-10-07 07:55:18.655 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 07:55:18.656 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 3 successful, 0 failed, 0 missing
2025-10-07 07:55:18.657 [http-nio-8080-exec-3] INFO  c.e.b.controllers.PrintJobController - Print jobs created successfully for invoice 32: 3 successful, 0 failed
2025-10-07 07:55:18.667 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:18.670 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 07:55:18.671 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:55:18.673 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 07:55:18.674 [http-nio-8080-exec-4] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 3 successful, 0 failed, 0 missing
2025-10-07 07:55:18.675 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 07:55:22.945 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:22.949 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:55:22.950 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:55:22.953 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 3 queued print jobs
2025-10-07 07:55:22.954 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Found 3 queued print jobs
2025-10-07 07:55:22.958 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:55:22.961 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:55:22.967 [http-nio-8080-exec-1] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 07:55:22.977 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:22.982 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:55:22.983 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:55:22.985 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Found 3 queued print jobs
2025-10-07 07:55:22.986 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Found 3 queued print jobs
2025-10-07 07:55:22.987 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:55:22.989 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:55:22.991 [http-nio-8080-exec-5] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 07:55:25.570 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:25.574 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:55:25.575 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:55:25.577 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Found 3 queued print jobs
2025-10-07 07:55:25.578 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - Found 3 queued print jobs
2025-10-07 07:55:25.579 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:55:25.581 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:55:25.582 [http-nio-8080-exec-2] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 07:55:25.588 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:25.591 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:55:25.592 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:55:25.593 [http-nio-8080-exec-8] INFO  c.e.backend.services.PrintJobService - Found 3 queued print jobs
2025-10-07 07:55:25.594 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - Found 3 queued print jobs
2025-10-07 07:55:25.594 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:55:25.596 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:55:25.597 [http-nio-8080-exec-8] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 07:55:27.432 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:27.437 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:27.438 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:55:27.440 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:55:27.445 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:55:27.447 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:55:27.450 [http-nio-8080-exec-7] INFO  c.e.b.controllers.InvoiceController - Retrieved 4 invoices (page 1 of 1)
2025-10-07 07:55:27.457 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:27.467 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:27.467 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:55:27.468 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:55:27.471 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:55:27.472 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:55:27.475 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Retrieved 4 invoices (page 1 of 1)
2025-10-07 07:55:27.718 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:27.720 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:55:27.721 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:55:27.724 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:55:27.728 [http-nio-8080-exec-3] INFO  c.e.b.controllers.InvoiceController - Retrieved 4 invoices (page 1 of 1)
2025-10-07 07:55:28.760 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:28.765 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 07:55:28.766 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:55:28.770 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 07:55:28.771 [http-nio-8080-exec-4] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 3 successful, 0 failed, 0 missing
2025-10-07 07:55:28.774 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 07:55:37.588 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:37.591 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:55:37.592 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:55:37.593 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 3 queued print jobs
2025-10-07 07:55:37.595 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Found 3 queued print jobs
2025-10-07 07:55:37.595 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:55:37.597 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:55:37.598 [http-nio-8080-exec-1] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 07:55:37.603 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:37.606 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:55:37.606 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:55:37.608 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Found 3 queued print jobs
2025-10-07 07:55:37.608 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Found 3 queued print jobs
2025-10-07 07:55:37.610 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:55:37.612 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:55:37.613 [http-nio-8080-exec-5] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 07:55:48.781 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:48.784 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:55:48.784 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:55:48.786 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Found 3 queued print jobs
2025-10-07 07:55:48.786 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - Found 3 queued print jobs
2025-10-07 07:55:48.787 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:55:48.788 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:55:48.789 [http-nio-8080-exec-2] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 07:55:48.793 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:55:48.796 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:55:48.796 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:55:48.797 [http-nio-8080-exec-8] INFO  c.e.backend.services.PrintJobService - Found 3 queued print jobs
2025-10-07 07:55:48.798 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - Found 3 queued print jobs
2025-10-07 07:55:48.799 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:55:48.800 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:55:48.801 [http-nio-8080-exec-8] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 07:56:06.665 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:56:06.666 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:56:06.669 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:56:06.670 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:56:06.670 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:56:06.674 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:56:06.678 [http-nio-8080-exec-7] INFO  c.e.b.controllers.InvoiceController - Retrieved 4 invoices (page 1 of 1)
2025-10-07 07:56:06.678 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:56:06.681 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 07:56:06.682 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:56:06.684 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:56:06.685 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:56:06.688 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:56:06.689 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Retrieved 4 invoices (page 1 of 1)
2025-10-07 07:56:06.966 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:56:06.969 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:56:06.969 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:56:06.972 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:56:06.972 [http-nio-8080-exec-3] INFO  c.e.b.controllers.InvoiceController - Retrieved 4 invoices (page 1 of 1)
2025-10-07 07:56:27.795 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:56:27.799 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        upper(c1_0.name) like upper(?) escape '\'
2025-10-07 07:56:29.958 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:56:29.962 [http-nio-8080-exec-1] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 100.0x100.0, cutting: SHATF
2025-10-07 07:56:29.962 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 07:56:29.964 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 07:56:29.977 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:56:29.977 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:56:29.981 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 100.0x100.0, cutting: SHATF
2025-10-07 07:56:29.981 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 100.0x100.0, cutting: SHATF
2025-10-07 07:56:29.981 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 07:56:29.981 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 07:56:29.982 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 07:56:29.982 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 07:56:31.073 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:56:31.076 [http-nio-8080-exec-8] INFO  c.e.backend.services.InvoiceService - Starting invoice creation for customer ID: 1
2025-10-07 07:56:31.077 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:56:31.078 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.Invoice */insert 
    into
        invoice (customer_id, issue_date, notes, payment_date, status, total_price) 
    values
        (?, ?, ?, ?, ?, ?)
2025-10-07 07:56:31.080 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 07:56:31.081 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 07:56:31.082 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.InvoiceLine */insert 
    into
        invoice_line (area_m2, cutting_price, cutting_type, dimension_unit, glass_type_id, height, invoice_id, length_m, line_total, width) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-07 07:56:31.084 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.Invoice */update invoice 
    set
        customer_id=?,
        issue_date=?,
        notes=?,
        payment_date=?,
        status=?,
        total_price=? 
    where
        id=?
2025-10-07 07:56:31.085 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        where
            i1_0.id=?
2025-10-07 07:56:31.086 [http-nio-8080-exec-8] INFO  c.e.backend.services.InvoiceService - Invoice 33 created successfully for customer 'Abdullah Shaddad' (ID: 1) with 1 lines, total: 4002.0 EGP
2025-10-07 07:56:32.038 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:56:32.042 [http-nio-8080-exec-7] INFO  c.e.b.controllers.PrintJobController - REST API: Creating print jobs for invoice 33
2025-10-07 07:56:32.042 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 07:56:32.045 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 07:56:32.046 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Creating print jobs for invoice 33 with 1 lines
2025-10-07 07:56:32.046 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - Generating PDF for invoice 33 with type CLIENT
2025-10-07 07:56:32.070 [http-nio-8080-exec-7] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/invoices/20251007_075632_c952f64f_invoice_33_client.pdf
2025-10-07 07:56:32.071 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - PDF generated and stored successfully: http://localhost:9000/elguindy/invoices/20251007_075632_c952f64f_invoice_33_client.pdf
2025-10-07 07:56:32.071 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 07:56:32.073 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - CLIENT print job created for invoice 33: 39
2025-10-07 07:56:32.073 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - Generating PDF for invoice 33 with type OWNER
2025-10-07 07:56:32.086 [http-nio-8080-exec-7] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/invoices/20251007_075632_1d3f81ba_invoice_33_owner.pdf
2025-10-07 07:56:32.087 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - PDF generated and stored successfully: http://localhost:9000/elguindy/invoices/20251007_075632_1d3f81ba_invoice_33_owner.pdf
2025-10-07 07:56:32.087 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 07:56:32.088 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - OWNER print job created for invoice 33: 40
2025-10-07 07:56:32.088 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - Generating sticker PDF for invoice 33
2025-10-07 07:56:32.100 [http-nio-8080-exec-7] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/stickers/20251007_075632_760ff1c1_sticker_33.pdf
2025-10-07 07:56:32.101 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - Sticker PDF generated successfully: http://localhost:9000/elguindy/stickers/20251007_075632_760ff1c1_sticker_33.pdf
2025-10-07 07:56:32.101 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 07:56:32.103 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - All 3 print jobs created successfully for invoice 33
2025-10-07 07:56:32.107 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 07:56:32.108 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 33: 3 successful, 0 failed, 0 missing
2025-10-07 07:56:32.109 [http-nio-8080-exec-7] INFO  c.e.b.controllers.PrintJobController - Print jobs created successfully for invoice 33: 3 successful, 0 failed
2025-10-07 07:56:32.116 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:56:32.118 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 33
2025-10-07 07:56:32.119 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:56:32.122 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 07:56:32.123 [http-nio-8080-exec-6] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 33: 3 successful, 0 failed, 0 missing
2025-10-07 07:56:32.124 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 33: 3 total jobs
2025-10-07 07:56:32.129 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:56:32.132 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 07:56:32.133 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 07:56:32.135 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:56:32.136 [http-nio-8080-exec-3] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 07:56:37.607 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:56:37.610 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 07:56:37.611 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:56:37.613 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 07:56:37.614 [http-nio-8080-exec-4] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 3 successful, 0 failed, 0 missing
2025-10-07 07:56:37.615 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 07:56:40.290 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:56:40.294 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:56:40.296 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.Invoice */update invoice 
    set
        customer_id=?,
        issue_date=?,
        notes=?,
        payment_date=?,
        status=?,
        total_price=? 
    where
        id=?
2025-10-07 07:56:40.300 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:56:40.301 [http-nio-8080-exec-5] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.example.backend.models.Invoice["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:342)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1587)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 07:56:44.558 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:56:44.561 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:56:44.563 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.Invoice */update invoice 
    set
        customer_id=?,
        issue_date=?,
        notes=?,
        payment_date=?,
        status=?,
        total_price=? 
    where
        id=?
2025-10-07 07:56:44.566 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:56:44.568 [http-nio-8080-exec-2] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.example.backend.models.Invoice["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:342)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1587)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 07:56:59.340 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:56:59.343 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 30
2025-10-07 07:56:59.343 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:56:59.346 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 07:56:59.347 [http-nio-8080-exec-8] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 30: 0 successful, 0 failed, 3 missing
2025-10-07 07:56:59.348 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 30: 3 total jobs
2025-10-07 07:57:00.687 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:57:00.690 [http-nio-8080-exec-7] INFO  c.e.b.controllers.PrintJobController - REST API: Creating print jobs for invoice 30
2025-10-07 07:57:00.691 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 07:57:00.693 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 07:57:00.694 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Creating print jobs for invoice 30 with 1 lines
2025-10-07 07:57:00.694 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - Generating PDF for invoice 30 with type CLIENT
2025-10-07 07:57:00.724 [http-nio-8080-exec-7] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/invoices/20251007_075700_4cff0a24_invoice_30_client.pdf
2025-10-07 07:57:00.725 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - PDF generated and stored successfully: http://localhost:9000/elguindy/invoices/20251007_075700_4cff0a24_invoice_30_client.pdf
2025-10-07 07:57:00.725 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 07:57:00.727 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - CLIENT print job created for invoice 30: 42
2025-10-07 07:57:00.727 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - Generating PDF for invoice 30 with type OWNER
2025-10-07 07:57:00.740 [http-nio-8080-exec-7] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/invoices/20251007_075700_21ec6624_invoice_30_owner.pdf
2025-10-07 07:57:00.740 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - PDF generated and stored successfully: http://localhost:9000/elguindy/invoices/20251007_075700_21ec6624_invoice_30_owner.pdf
2025-10-07 07:57:00.741 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 07:57:00.743 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - OWNER print job created for invoice 30: 43
2025-10-07 07:57:00.743 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - Generating sticker PDF for invoice 30
2025-10-07 07:57:00.754 [http-nio-8080-exec-7] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/stickers/20251007_075700_1f49b351_sticker_30.pdf
2025-10-07 07:57:00.754 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - Sticker PDF generated successfully: http://localhost:9000/elguindy/stickers/20251007_075700_1f49b351_sticker_30.pdf
2025-10-07 07:57:00.755 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 07:57:00.757 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - All 3 print jobs created successfully for invoice 30
2025-10-07 07:57:00.763 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 07:57:00.765 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 30: 3 successful, 0 failed, 0 missing
2025-10-07 07:57:00.766 [http-nio-8080-exec-7] INFO  c.e.b.controllers.PrintJobController - Print jobs created successfully for invoice 30: 3 successful, 0 failed
2025-10-07 07:57:00.771 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:57:00.773 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 30
2025-10-07 07:57:00.773 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:57:00.775 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 07:57:00.777 [http-nio-8080-exec-10] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 30: 3 successful, 0 failed, 0 missing
2025-10-07 07:57:00.778 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 30: 3 total jobs
2025-10-07 07:57:06.783 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:57:06.787 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 07:57:06.787 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:57:06.789 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 07:57:06.790 [http-nio-8080-exec-6] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 3 successful, 0 failed, 0 missing
2025-10-07 07:57:06.791 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 07:57:09.033 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:57:09.037 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 31
2025-10-07 07:57:09.037 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:57:09.039 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 07:57:09.040 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 31: 0 successful, 0 failed, 3 missing
2025-10-07 07:57:09.041 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 31: 3 total jobs
2025-10-07 07:57:13.117 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:57:13.120 [http-nio-8080-exec-1] INFO  c.e.b.controllers.PrintJobController - REST API: Creating print jobs for invoice 31
2025-10-07 07:57:13.120 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 07:57:13.123 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 07:57:13.125 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Creating print jobs for invoice 31 with 1 lines
2025-10-07 07:57:13.125 [http-nio-8080-exec-1] INFO  c.e.b.services.PdfGenerationService - Generating PDF for invoice 31 with type CLIENT
2025-10-07 07:57:13.152 [http-nio-8080-exec-1] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/invoices/20251007_075713_4b38dbbc_invoice_31_client.pdf
2025-10-07 07:57:13.152 [http-nio-8080-exec-1] INFO  c.e.b.services.PdfGenerationService - PDF generated and stored successfully: http://localhost:9000/elguindy/invoices/20251007_075713_4b38dbbc_invoice_31_client.pdf
2025-10-07 07:57:13.152 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 07:57:13.154 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - CLIENT print job created for invoice 31: 45
2025-10-07 07:57:13.154 [http-nio-8080-exec-1] INFO  c.e.b.services.PdfGenerationService - Generating PDF for invoice 31 with type OWNER
2025-10-07 07:57:13.164 [http-nio-8080-exec-1] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/invoices/20251007_075713_5302151b_invoice_31_owner.pdf
2025-10-07 07:57:13.164 [http-nio-8080-exec-1] INFO  c.e.b.services.PdfGenerationService - PDF generated and stored successfully: http://localhost:9000/elguindy/invoices/20251007_075713_5302151b_invoice_31_owner.pdf
2025-10-07 07:57:13.165 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 07:57:13.166 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - OWNER print job created for invoice 31: 46
2025-10-07 07:57:13.166 [http-nio-8080-exec-1] INFO  c.e.b.services.PdfGenerationService - Generating sticker PDF for invoice 31
2025-10-07 07:57:13.177 [http-nio-8080-exec-1] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/stickers/20251007_075713_12f84c66_sticker_31.pdf
2025-10-07 07:57:13.177 [http-nio-8080-exec-1] INFO  c.e.b.services.PdfGenerationService - Sticker PDF generated successfully: http://localhost:9000/elguindy/stickers/20251007_075713_12f84c66_sticker_31.pdf
2025-10-07 07:57:13.178 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 07:57:13.180 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - All 3 print jobs created successfully for invoice 31
2025-10-07 07:57:13.184 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 07:57:13.185 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 31: 3 successful, 0 failed, 0 missing
2025-10-07 07:57:13.186 [http-nio-8080-exec-1] INFO  c.e.b.controllers.PrintJobController - Print jobs created successfully for invoice 31: 3 successful, 0 failed
2025-10-07 07:57:13.191 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:57:13.193 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 31
2025-10-07 07:57:13.194 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:57:13.196 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 07:57:13.198 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 31: 3 successful, 0 failed, 0 missing
2025-10-07 07:57:13.199 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 31: 3 total jobs
2025-10-07 07:57:15.755 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:57:15.759 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:57:15.760 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:57:15.762 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 07:57:15.763 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 07:57:15.763 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:57:15.764 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:57:15.766 [http-nio-8080-exec-2] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 07:57:15.771 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:57:15.775 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:57:15.776 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:57:15.777 [http-nio-8080-exec-8] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 07:57:15.778 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 07:57:15.780 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:57:15.781 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:57:15.782 [http-nio-8080-exec-8] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 07:57:35.666 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:57:35.670 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:57:35.671 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:57:35.673 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 07:57:35.675 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 07:57:35.675 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:57:35.676 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:57:35.678 [http-nio-8080-exec-9] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 07:57:35.682 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:57:35.685 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:57:35.686 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:57:35.687 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 07:57:35.688 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 07:57:35.688 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:57:35.689 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:57:35.690 [http-nio-8080-exec-7] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 07:57:37.647 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-07 07:57:37.652 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-10-07 07:57:37.653 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-10-07 07:57:37.653 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@2ad41ea0]]
2025-10-07 07:57:37.653 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-10-07 07:57:37.656 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 07:57:37.658 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-07 07:57:37.660 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-07 07:57:39.450 [main] INFO  c.example.backend.BackendApplication - Starting BackendApplication using Java 23.0.2 with PID 37320 (C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem\backend\target\classes started by Abdullah Shaddad in C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem)
2025-10-07 07:57:39.452 [main] DEBUG c.example.backend.BackendApplication - Running with Spring Boot v3.5.5, Spring v6.2.10
2025-10-07 07:57:39.452 [main] INFO  c.example.backend.BackendApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-07 07:57:40.243 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 07:57:40.244 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-10-07 07:57:40.264 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CustomerRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 07:57:40.265 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingDetailRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 07:57:40.265 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingRateRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 07:57:40.266 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.GlassTypeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 07:57:40.267 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceLineRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 07:57:40.267 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 07:57:40.268 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.NotificationRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 07:57:40.269 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.PrintJobRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 07:57:40.270 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 07:57:40.270 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 0 JDBC repository interfaces.
2025-10-07 07:57:40.277 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 07:57:40.277 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-07 07:57:40.304 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 24 ms. Found 9 JPA repository interfaces.
2025-10-07 07:57:40.588 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-07 07:57:40.597 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-07 07:57:40.597 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-07 07:57:40.627 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-07 07:57:40.627 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1007 ms
2025-10-07 07:57:40.711 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-07 07:57:40.739 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-07 07:57:40.759 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-07 07:57:40.913 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-07 07:57:40.930 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-07 07:57:41.008 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1533338c
2025-10-07 07:57:41.009 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-07 07:57:41.027 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-07 07:57:41.043 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-07 07:57:41.708 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-07 07:57:41.954 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 07:57:42.106 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-07 07:57:42.618 [main] DEBUG c.e.b.c.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-07 07:57:42.647 [main] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-07 07:57:42.647 [main] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-07 07:57:43.112 [main] INFO  c.e.backend.services.StorageService - MinIO bucket already exists: elguindy
2025-10-07 07:57:43.146 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-07 07:57:43.634 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-10-07 07:57:43.634 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@26aab903]]
2025-10-07 07:57:43.635 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-10-07 07:57:43.646 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-07 07:57:43.650 [main] INFO  c.example.backend.BackendApplication - Started BackendApplication in 4.496 seconds (process running for 5.054)
2025-10-07 07:57:43.657 [main] INFO  c.e.backend.config.DataInitializer - Starting application data initialization...
2025-10-07 07:57:43.657 [main] INFO  c.e.backend.config.DataInitializer - Application data initialization completed successfully.
2025-10-07 07:57:43.711 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 07:57:43.722 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 07:57:43.724 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 07:57:43.726 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 07:57:43.727 [main] INFO  c.e.backend.config.DataInitializer - User initialization completed. Default users created if they didn't exist.
2025-10-07 07:57:43.727 [main] INFO  c.e.backend.config.DataInitializer - IMPORTANT: Please change default passwords after first login for security!
2025-10-07 07:57:47.003 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-07 07:57:47.003 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-07 07:57:47.004 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-10-07 07:57:47.092 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:57:47.116 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:57:47.121 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:57:47.129 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 07:57:47.137 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 07:57:47.170 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:57:47.181 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:57:47.187 [http-nio-8080-exec-1] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 07:57:47.197 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:57:47.200 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:57:47.202 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:57:47.205 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 07:57:47.207 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 07:57:47.207 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:57:47.209 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:57:47.211 [http-nio-8080-exec-2] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 07:57:51.671 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:57:51.677 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:57:51.677 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:57:51.681 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 07:57:51.683 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 07:57:51.684 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:57:51.686 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:57:51.689 [http-nio-8080-exec-3] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 07:57:51.695 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:57:51.700 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:57:51.701 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:57:51.704 [http-nio-8080-exec-4] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 07:57:51.706 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 07:57:51.707 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:57:51.708 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:57:51.709 [http-nio-8080-exec-4] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 07:58:22.568 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:58:22.573 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:58:22.574 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:58:22.576 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 07:58:22.577 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 07:58:22.577 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:58:22.579 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:58:22.580 [http-nio-8080-exec-5] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 07:58:43.641 [MessageBroker-1] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2025-10-07 07:58:52.567 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:58:52.571 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:58:52.572 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:58:52.574 [http-nio-8080-exec-6] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 07:58:52.576 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 07:58:52.577 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:58:52.578 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:58:52.579 [http-nio-8080-exec-6] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 07:59:22.579 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:59:22.584 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:59:22.584 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:59:22.586 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 07:59:22.587 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 07:59:22.588 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:59:22.589 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:59:22.590 [http-nio-8080-exec-7] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 07:59:52.572 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 07:59:52.576 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 07:59:52.577 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 07:59:52.579 [http-nio-8080-exec-8] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 07:59:52.580 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 07:59:52.580 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 07:59:52.581 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 07:59:52.583 [http-nio-8080-exec-8] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:00:22.572 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:00:22.576 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:00:22.576 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:00:22.578 [http-nio-8080-exec-10] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 08:00:22.579 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 08:00:22.580 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:00:22.581 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:00:22.583 [http-nio-8080-exec-10] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:00:52.581 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:00:52.585 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:00:52.586 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:00:52.588 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 08:00:52.589 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 08:00:52.590 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:00:52.591 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:00:52.592 [http-nio-8080-exec-9] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:02:18.589 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:02:18.594 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:02:18.595 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:02:18.598 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 08:02:18.599 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 08:02:18.600 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:02:18.601 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:02:18.603 [http-nio-8080-exec-1] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:02:43.589 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:02:43.589 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:02:43.598 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:02:43.600 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:02:43.606 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:02:43.616 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:02:43.617 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:02:43.619 [http-nio-8080-exec-2] WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2025-10-07 08:02:44.576 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:02:44.581 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:02:44.581 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:02:44.585 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:02:44.585 [http-nio-8080-exec-4] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:02:56.319 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:02:56.326 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:02:56.327 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:02:56.329 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 08:02:56.330 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 08:02:56.331 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:02:56.332 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:02:56.334 [http-nio-8080-exec-5] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:02:57.870 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:02:57.870 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:02:57.874 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:02:57.875 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:02:57.875 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:02:57.878 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:02:57.879 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:02:57.882 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:02:57.882 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:02:57.887 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:02:57.887 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:02:57.887 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:02:57.890 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:02:57.891 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:02:58.165 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:02:58.169 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:02:58.170 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:02:58.172 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:02:58.173 [http-nio-8080-exec-9] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:02:58.924 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:02:58.929 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 08:02:58.931 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:02:58.938 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:02:58.941 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 3 successful, 0 failed, 0 missing
2025-10-07 08:02:58.943 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 08:03:21.290 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:03:21.295 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 33
2025-10-07 08:03:21.295 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:03:21.299 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:03:21.302 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 33: 3 successful, 0 failed, 0 missing
2025-10-07 08:03:21.303 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 33: 3 total jobs
2025-10-07 08:03:24.409 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:03:24.414 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:03:24.415 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:03:24.417 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 08:03:24.420 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 08:03:24.422 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:03:24.424 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:03:24.427 [http-nio-8080-exec-2] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:03:24.433 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:03:24.437 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:03:24.437 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:03:24.441 [http-nio-8080-exec-4] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 08:03:24.442 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 08:03:24.443 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:03:24.444 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:03:24.446 [http-nio-8080-exec-4] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:03:27.380 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:03:27.393 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:03:27.395 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:03:27.397 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:03:27.399 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:03:27.402 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:03:27.403 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:03:27.415 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:03:27.417 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:03:27.422 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:03:27.423 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:03:27.424 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:03:27.429 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:03:27.431 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:03:27.676 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:03:27.680 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:03:27.681 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:03:27.685 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:03:27.686 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:03:28.464 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:03:28.467 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 30
2025-10-07 08:03:28.467 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:03:28.470 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:03:28.471 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 30: 3 successful, 0 failed, 0 missing
2025-10-07 08:03:28.472 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 30: 3 total jobs
2025-10-07 08:03:45.350 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:03:45.355 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:03:45.356 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:03:45.358 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 08:03:45.359 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 08:03:45.359 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:03:45.362 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:03:45.365 [http-nio-8080-exec-1] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:03:45.370 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:03:45.375 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:03:45.376 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:03:45.378 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 08:03:45.379 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 08:03:45.380 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:03:45.381 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:03:45.383 [http-nio-8080-exec-3] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:03:52.675 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:03:52.679 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:03:52.680 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:03:52.682 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 08:03:52.683 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 08:03:52.685 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:03:52.686 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:03:52.688 [http-nio-8080-exec-2] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:03:52.693 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:03:52.696 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:03:52.697 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:03:52.699 [http-nio-8080-exec-4] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 08:03:52.700 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 08:03:52.701 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:03:52.702 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:03:52.703 [http-nio-8080-exec-4] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:04:23.567 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:04:23.571 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:04:23.572 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:04:23.573 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 08:04:23.574 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 08:04:23.575 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:04:23.576 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:04:23.577 [http-nio-8080-exec-7] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:04:53.573 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:04:53.577 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:04:53.577 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:04:53.578 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 08:04:53.579 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 08:04:53.580 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:04:53.581 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:04:53.581 [http-nio-8080-exec-5] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:05:23.576 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:05:23.579 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:05:23.580 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:05:23.581 [http-nio-8080-exec-6] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 08:05:23.582 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 08:05:23.583 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:05:23.585 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:05:23.586 [http-nio-8080-exec-6] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:05:53.576 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:05:53.579 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:05:53.580 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:05:53.581 [http-nio-8080-exec-8] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 08:05:53.582 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 08:05:53.582 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:05:53.583 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:05:53.584 [http-nio-8080-exec-8] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:151)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:111)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:423)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1583)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:05:58.261 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-07 08:05:58.266 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-10-07 08:05:58.268 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-10-07 08:05:58.268 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@26aab903]]
2025-10-07 08:05:58.268 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-10-07 08:05:58.272 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 08:05:58.273 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-07 08:05:58.275 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-07 08:07:25.506 [main] INFO  c.example.backend.BackendApplication - Starting BackendApplication using Java 23.0.2 with PID 14928 (C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem\backend\target\classes started by Abdullah Shaddad in C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem)
2025-10-07 08:07:25.507 [main] DEBUG c.example.backend.BackendApplication - Running with Spring Boot v3.5.5, Spring v6.2.10
2025-10-07 08:07:25.508 [main] INFO  c.example.backend.BackendApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-07 08:07:25.961 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 08:07:25.962 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-10-07 08:07:25.986 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CustomerRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:07:25.987 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingDetailRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:07:25.988 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingRateRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:07:25.988 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.GlassTypeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:07:25.989 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceLineRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:07:25.990 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:07:25.990 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.NotificationRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:07:25.992 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.PrintJobRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:07:25.993 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:07:25.993 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 27 ms. Found 0 JDBC repository interfaces.
2025-10-07 08:07:26.000 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 08:07:26.001 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-07 08:07:26.026 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 9 JPA repository interfaces.
2025-10-07 08:07:26.341 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-07 08:07:26.349 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-07 08:07:26.349 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-07 08:07:26.387 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-07 08:07:26.387 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 844 ms
2025-10-07 08:07:26.474 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-07 08:07:26.507 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-07 08:07:26.528 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-07 08:07:26.700 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-07 08:07:26.719 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-07 08:07:26.802 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@7ee12d58
2025-10-07 08:07:26.803 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-07 08:07:26.823 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-07 08:07:26.840 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-07 08:07:27.523 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-07 08:07:27.784 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 08:07:27.970 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-07 08:07:28.544 [main] DEBUG c.e.b.c.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-07 08:07:28.572 [main] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-07 08:07:28.573 [main] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-07 08:07:29.079 [main] INFO  c.e.backend.services.StorageService - MinIO bucket already exists: elguindy
2025-10-07 08:07:29.116 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-07 08:07:29.654 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-10-07 08:07:29.655 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@4179d30b]]
2025-10-07 08:07:29.656 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-10-07 08:07:29.667 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-07 08:07:29.671 [main] INFO  c.example.backend.BackendApplication - Started BackendApplication in 4.413 seconds (process running for 4.795)
2025-10-07 08:07:29.677 [main] INFO  c.e.backend.config.DataInitializer - Starting application data initialization...
2025-10-07 08:07:29.677 [main] INFO  c.e.backend.config.DataInitializer - Application data initialization completed successfully.
2025-10-07 08:07:29.738 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:07:29.751 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:07:29.754 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:07:29.755 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:07:29.756 [main] INFO  c.e.backend.config.DataInitializer - User initialization completed. Default users created if they didn't exist.
2025-10-07 08:07:29.756 [main] INFO  c.e.backend.config.DataInitializer - IMPORTANT: Please change default passwords after first login for security!
2025-10-07 08:07:32.150 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-07 08:07:32.150 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-07 08:07:32.151 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-10-07 08:07:32.239 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:07:32.263 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:07:32.268 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:07:32.278 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 08:07:32.298 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:07:32.308 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:07:32.310 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:07:32.312 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:07:32.314 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:07:32.315 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 08:07:32.353 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:07:32.357 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:07:32.358 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:07:32.361 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Found 12 queued print jobs
2025-10-07 08:07:32.363 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:07:32.365 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:07:32.366 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:07:32.369 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:07:32.371 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:07:32.372 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - Found 12 queued print jobs
2025-10-07 08:07:37.269 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:07:37.278 [http-nio-8080-exec-4] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 36 as PRINTING
2025-10-07 08:07:37.282 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 08:07:37.296 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 08:07:37.320 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:07:37.323 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:07:37.327 [http-nio-8080-exec-4] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:342)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1587)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:07:45.919 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:07:45.926 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:07:45.927 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:07:45.930 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Found 11 queued print jobs
2025-10-07 08:07:45.931 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:07:45.933 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:07:45.936 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:07:45.938 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:07:45.940 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:07:45.941 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Found 11 queued print jobs
2025-10-07 08:07:45.947 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:07:45.951 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:07:45.951 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:07:45.954 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Found 11 queued print jobs
2025-10-07 08:07:45.955 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:07:45.957 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:07:45.959 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:07:45.960 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:07:45.961 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:07:45.962 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Found 11 queued print jobs
2025-10-07 08:07:48.833 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:07:48.838 [http-nio-8080-exec-8] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 37 as PRINTING
2025-10-07 08:07:48.839 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 08:07:48.840 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 08:07:48.844 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:07:48.845 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:07:48.847 [http-nio-8080-exec-8] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.example.backend.models.PrintJob["invoice"]->com.example.backend.models.Invoice$HibernateProxy["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:342)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1587)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:08:16.569 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:08:16.573 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:08:16.574 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:08:16.576 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Found 10 queued print jobs
2025-10-07 08:08:16.576 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:08:16.577 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:08:16.578 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:08:16.579 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:08:16.580 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:08:16.581 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - Found 10 queued print jobs
2025-10-07 08:08:29.657 [MessageBroker-1] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2025-10-07 08:08:46.574 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:08:46.580 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:08:46.581 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:08:46.583 [http-nio-8080-exec-10] INFO  c.e.backend.services.PrintJobService - Found 10 queued print jobs
2025-10-07 08:08:46.585 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:08:46.587 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:08:46.589 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:08:46.590 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:08:46.592 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:08:46.593 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - Found 10 queued print jobs
2025-10-07 08:09:04.759 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-07 08:09:04.764 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-10-07 08:09:04.766 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-10-07 08:09:04.766 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@4179d30b]]
2025-10-07 08:09:04.766 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-10-07 08:09:04.769 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 08:09:04.770 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-07 08:09:04.772 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-07 08:09:10.177 [main] INFO  c.example.backend.BackendApplication - Starting BackendApplication using Java 23.0.2 with PID 33140 (C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem\backend\target\classes started by Abdullah Shaddad in C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem)
2025-10-07 08:09:10.178 [main] DEBUG c.example.backend.BackendApplication - Running with Spring Boot v3.5.5, Spring v6.2.10
2025-10-07 08:09:10.178 [main] INFO  c.example.backend.BackendApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-07 08:09:10.640 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 08:09:10.640 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-10-07 08:09:10.664 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CustomerRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:09:10.664 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingDetailRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:09:10.665 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingRateRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:09:10.665 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.GlassTypeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:09:10.666 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceLineRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:09:10.667 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:09:10.667 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.NotificationRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:09:10.668 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.PrintJobRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:09:10.669 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:09:10.670 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 0 JDBC repository interfaces.
2025-10-07 08:09:10.677 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 08:09:10.677 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-07 08:09:10.702 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 9 JPA repository interfaces.
2025-10-07 08:09:11.005 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-07 08:09:11.015 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-07 08:09:11.015 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-07 08:09:11.054 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-07 08:09:11.054 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 842 ms
2025-10-07 08:09:11.135 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-07 08:09:11.164 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-07 08:09:11.183 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-07 08:09:11.349 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-07 08:09:11.366 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-07 08:09:11.449 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@63326a3a
2025-10-07 08:09:11.450 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-07 08:09:11.468 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-07 08:09:11.482 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-07 08:09:12.207 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-07 08:09:12.477 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 08:09:12.650 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-07 08:09:13.187 [main] DEBUG c.e.b.c.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-07 08:09:13.219 [main] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-07 08:09:13.220 [main] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-07 08:09:13.752 [main] INFO  c.e.backend.services.StorageService - MinIO bucket already exists: elguindy
2025-10-07 08:09:13.790 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-07 08:09:14.341 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-10-07 08:09:14.342 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@2ad41ea0]]
2025-10-07 08:09:14.343 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-10-07 08:09:14.355 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-07 08:09:14.359 [main] INFO  c.example.backend.BackendApplication - Started BackendApplication in 4.444 seconds (process running for 4.975)
2025-10-07 08:09:14.366 [main] INFO  c.e.backend.config.DataInitializer - Starting application data initialization...
2025-10-07 08:09:14.366 [main] INFO  c.e.backend.config.DataInitializer - Application data initialization completed successfully.
2025-10-07 08:09:14.427 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:09:14.440 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:09:14.443 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:09:14.445 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:09:14.446 [main] INFO  c.e.backend.config.DataInitializer - User initialization completed. Default users created if they didn't exist.
2025-10-07 08:09:14.446 [main] INFO  c.e.backend.config.DataInitializer - IMPORTANT: Please change default passwords after first login for security!
2025-10-07 08:09:16.598 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-07 08:09:16.598 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-07 08:09:16.599 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-10-07 08:09:16.676 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:09:16.698 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:09:16.703 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:09:16.711 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 10 queued print jobs
2025-10-07 08:09:16.721 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:16.728 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:09:16.729 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:16.731 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:16.733 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:16.734 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Found 10 queued print jobs
2025-10-07 08:09:23.992 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:09:24.000 [http-nio-8080-exec-3] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 38 as PRINTING
2025-10-07 08:09:24.005 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 08:09:24.019 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 08:09:24.025 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:24.026 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:09:24.045 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:09:24.049 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:09:24.050 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:09:24.052 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Found 9 queued print jobs
2025-10-07 08:09:24.054 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:24.057 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:09:24.058 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:24.059 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:24.061 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Found 9 queued print jobs
2025-10-07 08:09:27.272 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:09:27.277 [http-nio-8080-exec-8] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 39 as PRINTING
2025-10-07 08:09:27.278 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 08:09:27.279 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 08:09:27.282 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:27.283 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:09:27.299 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:09:27.302 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:09:27.303 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:09:27.306 [http-nio-8080-exec-6] INFO  c.e.backend.services.PrintJobService - Found 8 queued print jobs
2025-10-07 08:09:27.307 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:27.309 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:09:27.310 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:27.311 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:27.312 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - Found 8 queued print jobs
2025-10-07 08:09:34.310 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:09:34.311 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:09:34.317 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:09:34.319 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:09:34.327 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:09:34.329 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:09:34.332 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:09:34.337 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:09:34.338 [http-nio-8080-exec-7] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:09:34.340 [http-nio-8080-exec-7] WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2025-10-07 08:09:34.351 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:09:34.355 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:09:34.356 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:09:34.360 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:09:34.361 [http-nio-8080-exec-1] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:09:34.610 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:09:34.615 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:09:34.616 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:09:34.620 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:09:34.621 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:09:37.925 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:09:37.930 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:09:37.931 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:09:37.934 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Found 8 queued print jobs
2025-10-07 08:09:37.935 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:37.936 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:09:37.938 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:37.940 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:37.941 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - Found 8 queued print jobs
2025-10-07 08:09:37.946 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:09:37.953 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:09:37.954 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:09:37.956 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Found 8 queued print jobs
2025-10-07 08:09:37.957 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:37.959 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:09:37.962 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:37.964 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:37.966 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Found 8 queued print jobs
2025-10-07 08:09:42.848 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:09:42.852 [http-nio-8080-exec-8] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 40 as PRINTING
2025-10-07 08:09:42.852 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 08:09:42.854 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 08:09:42.859 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:42.860 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:09:42.873 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:09:42.877 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:09:42.878 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:09:42.881 [http-nio-8080-exec-6] INFO  c.e.backend.services.PrintJobService - Found 7 queued print jobs
2025-10-07 08:09:42.882 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:42.883 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:09:42.884 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:42.885 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:42.886 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - Found 7 queued print jobs
2025-10-07 08:09:48.251 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:09:48.256 [http-nio-8080-exec-10] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 41 as PRINTING
2025-10-07 08:09:48.257 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 08:09:48.259 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 08:09:48.275 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:48.277 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:09:48.290 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:09:48.294 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:09:48.294 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:09:48.296 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Found 6 queued print jobs
2025-10-07 08:09:48.297 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:48.298 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:09:48.300 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:09:48.300 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Found 6 queued print jobs
2025-10-07 08:10:07.915 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:07.919 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:10:07.920 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:10:07.922 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 6 queued print jobs
2025-10-07 08:10:07.923 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:10:07.925 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:10:07.925 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:10:07.926 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Found 6 queued print jobs
2025-10-07 08:10:14.337 [MessageBroker-1] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2025-10-07 08:10:28.815 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:28.819 [http-nio-8080-exec-3] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 42 as PRINTING
2025-10-07 08:10:28.820 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 08:10:28.822 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 08:10:28.827 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:10:28.828 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:10:28.847 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:28.851 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:10:28.852 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:10:28.854 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Found 5 queued print jobs
2025-10-07 08:10:28.855 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:10:28.857 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:10:28.858 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:10:28.859 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Found 5 queued print jobs
2025-10-07 08:10:31.207 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:31.211 [http-nio-8080-exec-8] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 44 as PRINTING
2025-10-07 08:10:31.212 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 08:10:31.214 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 08:10:31.220 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:10:31.221 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:10:31.236 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:31.241 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:10:31.242 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:10:31.243 [http-nio-8080-exec-6] INFO  c.e.backend.services.PrintJobService - Found 4 queued print jobs
2025-10-07 08:10:31.245 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:10:31.246 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:10:31.248 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:10:31.249 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - Found 4 queued print jobs
2025-10-07 08:10:34.213 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:34.221 [http-nio-8080-exec-10] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 45 as PRINTING
2025-10-07 08:10:34.222 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 08:10:34.225 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 08:10:34.251 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:10:34.253 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:10:34.270 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:34.277 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:10:34.277 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:10:34.280 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Found 3 queued print jobs
2025-10-07 08:10:34.281 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:10:34.283 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:10:34.284 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:10:34.285 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Found 3 queued print jobs
2025-10-07 08:10:35.955 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:35.960 [http-nio-8080-exec-3] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 46 as PRINTING
2025-10-07 08:10:35.960 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 08:10:35.963 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 08:10:35.966 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:10:35.968 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:10:35.982 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:35.986 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:10:35.987 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:10:35.988 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Found 2 queued print jobs
2025-10-07 08:10:35.990 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:10:35.991 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:10:35.992 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:10:35.993 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Found 2 queued print jobs
2025-10-07 08:10:37.894 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:37.898 [http-nio-8080-exec-8] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 47 as PRINTING
2025-10-07 08:10:37.898 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 08:10:37.900 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 08:10:37.904 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:10:37.905 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:10:37.917 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:37.919 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:10:37.920 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:10:37.921 [http-nio-8080-exec-6] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 08:10:37.922 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:10:37.924 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:10:37.925 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 08:10:37.929 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:37.932 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:10:37.934 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:10:37.935 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 08:10:37.936 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:10:37.937 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:10:37.939 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 08:10:39.909 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:39.913 [http-nio-8080-exec-7] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 43 as PRINTING
2025-10-07 08:10:39.913 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 08:10:39.915 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 08:10:39.918 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:10:39.919 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:10:39.934 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:39.938 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:10:39.938 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:10:39.940 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:10:39.941 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:10:44.551 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:44.562 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:44.565 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:10:44.566 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:10:44.570 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:10:44.571 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:10:44.573 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:10:44.579 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:44.583 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:44.591 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:10:44.592 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:10:44.592 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:10:44.595 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:10:44.596 [http-nio-8080-exec-4] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:10:44.845 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:44.849 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:10:44.849 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:10:44.853 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:10:44.854 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:10:47.318 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:47.324 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0
2025-10-07 08:10:47.332 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:47.336 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0
2025-10-07 08:10:47.840 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:47.844 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:10:47.845 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:10:47.850 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:10:47.851 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:10:47.857 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:47.860 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:10:47.861 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:10:47.865 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:10:47.866 [http-nio-8080-exec-7] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:10:50.400 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:50.404 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:10:50.410 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:10:50.413 [http-nio-8080-exec-3] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.example.backend.models.Invoice["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:342)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1587)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:10:57.230 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:57.236 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0
2025-10-07 08:10:57.244 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:57.248 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0
2025-10-07 08:10:58.163 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:58.165 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:58.167 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:10:58.168 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:10:58.172 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:10:58.172 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:10:58.174 [http-nio-8080-exec-4] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:10:58.180 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:58.181 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:58.186 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:10:58.191 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:10:58.192 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:10:58.202 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:10:58.205 [http-nio-8080-exec-9] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:10:58.453 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:10:58.456 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:10:58.457 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:10:58.460 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:10:58.460 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:11:02.110 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:11:02.114 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 08:11:02.114 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:11:02.122 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:11:02.125 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 3 successful, 0 failed, 0 missing
2025-10-07 08:11:02.126 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 08:11:04.546 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:11:04.555 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:11:04.556 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:11:04.559 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:11:04.562 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:11:04.566 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:11:04.583 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:11:04.584 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:11:04.586 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:11:04.589 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:11:06.129 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:11:06.136 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:11:06.136 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:11:06.139 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:11:06.143 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:11:06.165 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:11:06.172 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:11:06.173 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:11:06.186 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:11:06.191 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:11:07.200 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:11:07.200 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:11:07.207 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:11:07.208 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:11:07.208 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:11:07.217 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:11:07.219 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:11:07.226 [http-nio-8080-exec-4] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:11:07.228 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:11:07.232 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:11:07.235 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:11:07.236 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:11:07.243 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:11:07.244 [http-nio-8080-exec-9] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:11:07.504 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:11:07.508 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:11:07.508 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:11:07.516 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:11:07.517 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:11:08.594 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:11:08.602 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 08:11:08.602 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:11:08.606 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:11:08.608 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 3 successful, 0 failed, 0 missing
2025-10-07 08:11:08.609 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 08:25:04.646 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:25:04.678 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:25:04.689 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:25:04.690 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:25:04.693 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:25:04.699 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:25:04.708 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:25:04.708 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:25:04.713 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:25:04.713 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:25:04.717 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:25:04.718 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:25:04.739 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:25:04.742 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:25:04.743 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:25:04.750 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:25:04.750 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:25:04.761 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:25:04.762 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:25:04.773 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:25:04.780 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:25:04.785 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:25:04.788 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:25:04.802 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:25:04.807 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:25:04.808 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:25:04.815 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:25:04.817 [http-nio-8080-exec-3] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:25:05.571 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:25:05.575 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:25:05.575 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:25:05.578 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:25:05.579 [http-nio-8080-exec-1] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:25:05.582 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:25:05.584 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:25:05.585 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:25:05.588 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:25:05.588 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:26:48.008 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:26:48.011 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 08:26:48.012 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:26:48.015 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:26:48.017 [http-nio-8080-exec-6] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 3 successful, 0 failed, 0 missing
2025-10-07 08:26:48.018 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 08:26:49.758 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:26:49.762 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 08:26:49.762 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:26:49.765 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:26:49.766 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 3 successful, 0 failed, 0 missing
2025-10-07 08:26:49.767 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 08:26:53.182 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:26:53.186 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:26:53.187 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:26:53.188 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:26:53.188 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:26:53.192 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:26:53.195 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:26:53.196 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:26:53.197 [http-nio-8080-exec-10] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:26:53.198 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:26:54.769 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:26:54.773 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:26:54.773 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:26:54.775 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:26:54.778 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:26:54.781 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:26:54.785 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:26:54.786 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:26:54.787 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:26:54.787 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:26:55.824 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:26:55.824 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:26:55.829 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:26:55.830 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:26:55.831 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:26:55.835 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:26:55.837 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:26:55.838 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:26:55.840 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:26:55.842 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:26:55.843 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:26:55.844 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:26:55.847 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:26:55.848 [http-nio-8080-exec-4] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:26:56.125 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:26:56.128 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:26:56.129 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:26:56.132 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:26:56.134 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:26:57.766 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:26:57.770 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 08:26:57.770 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:26:57.773 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:26:57.774 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 3 successful, 0 failed, 0 missing
2025-10-07 08:26:57.775 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 08:27:02.087 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:27:02.090 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 31
2025-10-07 08:27:02.091 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:27:02.093 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:27:02.094 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 31: 3 successful, 0 failed, 0 missing
2025-10-07 08:27:02.095 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 31: 3 total jobs
2025-10-07 08:27:04.388 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:27:04.391 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 30
2025-10-07 08:27:04.391 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:27:04.393 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:27:04.394 [http-nio-8080-exec-10] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 30: 3 successful, 0 failed, 0 missing
2025-10-07 08:27:04.395 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 30: 3 total jobs
2025-10-07 08:27:07.443 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:27:07.446 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 33
2025-10-07 08:27:07.447 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:27:07.450 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:27:07.451 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 33: 3 successful, 0 failed, 0 missing
2025-10-07 08:27:07.451 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 33: 3 total jobs
2025-10-07 08:27:10.227 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:27:10.231 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:27:10.233 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.Invoice */update invoice 
    set
        customer_id=?,
        issue_date=?,
        notes=?,
        payment_date=?,
        status=?,
        total_price=? 
    where
        id=?
2025-10-07 08:27:10.248 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:27:10.249 [http-nio-8080-exec-8] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.example.backend.models.Invoice["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:342)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1587)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:27:12.761 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:27:12.765 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 30
2025-10-07 08:27:12.765 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:27:12.767 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:27:12.768 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 30: 3 successful, 0 failed, 0 missing
2025-10-07 08:27:12.769 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 30: 3 total jobs
2025-10-07 08:27:14.345 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:27:14.348 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 30
2025-10-07 08:27:14.349 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:27:14.351 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:27:14.352 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 30: 3 successful, 0 failed, 0 missing
2025-10-07 08:27:14.353 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 30: 3 total jobs
2025-10-07 08:27:16.821 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:27:16.824 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 30
2025-10-07 08:27:16.825 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:27:16.827 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:27:16.828 [http-nio-8080-exec-4] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 30: 3 successful, 0 failed, 0 missing
2025-10-07 08:27:16.829 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 30: 3 total jobs
2025-10-07 08:27:19.120 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:27:19.123 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:27:19.125 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.Invoice */update invoice 
    set
        customer_id=?,
        issue_date=?,
        notes=?,
        payment_date=?,
        status=?,
        total_price=? 
    where
        id=?
2025-10-07 08:27:19.130 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:27:19.131 [http-nio-8080-exec-6] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.example.backend.models.Invoice["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:342)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1587)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:27:26.444 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:27:26.448 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 30
2025-10-07 08:27:26.448 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:27:26.451 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:27:26.452 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 30: 3 successful, 0 failed, 0 missing
2025-10-07 08:27:26.452 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 30: 3 total jobs
2025-10-07 08:27:28.870 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:27:28.874 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:27:28.874 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:27:28.876 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:27:28.877 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:27:28.882 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:27:28.885 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:27:28.885 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:27:28.887 [http-nio-8080-exec-10] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:27:28.887 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:27:29.474 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:27:29.479 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:27:29.480 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:27:29.481 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:27:29.482 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:27:29.486 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:27:29.489 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:27:29.489 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:27:29.490 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:27:29.491 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:27:34.424 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:27:34.428 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:27:34.429 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:27:34.429 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:27:34.432 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:27:34.433 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:27:34.434 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:27:34.438 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:27:34.438 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:27:34.444 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:27:34.444 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:27:34.444 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:27:34.446 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:27:34.448 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:27:34.718 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:27:34.720 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:27:34.721 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:27:34.723 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:27:34.724 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:27:47.807 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:27:47.812 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 30
2025-10-07 08:27:47.812 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:27:47.814 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:27:47.816 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 30: 3 successful, 0 failed, 0 missing
2025-10-07 08:27:47.816 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 30: 3 total jobs
2025-10-07 08:28:51.665 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:28:51.665 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:28:51.669 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:28:51.669 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:28:51.669 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:28:51.672 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:28:51.673 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:28:51.676 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:28:51.676 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:28:51.678 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:28:51.678 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:28:51.678 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:28:51.680 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:28:51.681 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:28:52.576 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:28:52.580 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:28:52.581 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:28:52.584 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:28:52.585 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:28:52.589 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:28:52.592 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:28:52.592 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:28:52.597 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:28:52.598 [http-nio-8080-exec-9] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:29:46.581 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:29:46.581 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:29:46.585 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:29:46.585 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:29:46.585 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:29:46.588 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:29:46.588 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:29:46.590 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:29:46.591 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:29:46.591 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:29:46.592 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:29:46.592 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:29:46.594 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:29:46.596 [http-nio-8080-exec-1] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:29:46.884 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:29:46.888 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:29:46.889 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:29:46.892 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:29:46.893 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:29:47.571 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:29:47.574 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:29:47.574 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:29:47.577 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:29:47.578 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:29:49.327 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:29:49.341 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 08:29:49.342 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:29:49.346 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:29:49.349 [http-nio-8080-exec-4] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 3 successful, 0 failed, 0 missing
2025-10-07 08:29:49.350 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 08:29:49.361 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:29:49.364 [http-nio-8080-exec-6] INFO  c.e.b.controllers.PrintJobController - REST API: Creating STICKER print job for invoice 32
2025-10-07 08:29:49.371 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 08:29:49.376 [http-nio-8080-exec-6] INFO  c.e.b.services.PdfGenerationService - Generating sticker PDF for invoice 32
2025-10-07 08:29:49.534 [http-nio-8080-exec-6] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/stickers/20251007_082949_61e571bf_sticker_32.pdf
2025-10-07 08:29:49.534 [http-nio-8080-exec-6] INFO  c.e.b.services.PdfGenerationService - Sticker PDF generated successfully: http://localhost:9000/elguindy/stickers/20251007_082949_61e571bf_sticker_32.pdf
2025-10-07 08:29:49.539 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 08:29:49.558 [http-nio-8080-exec-6] INFO  c.e.b.controllers.PrintJobController - STICKER print job created successfully for invoice 32: PDF at http://localhost:9000/elguindy/stickers/20251007_082949_61e571bf_sticker_32.pdf
2025-10-07 08:29:51.190 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:29:51.194 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:29:51.195 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:29:51.197 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 08:29:51.198 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:29:51.199 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:29:51.200 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 08:29:51.205 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:29:51.207 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:29:51.208 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:29:51.209 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 08:29:51.210 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:29:51.211 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:29:51.212 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 08:29:52.673 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:29:52.676 [http-nio-8080-exec-3] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 48 as PRINTING
2025-10-07 08:29:52.677 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 08:29:52.678 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 08:29:52.692 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:29:52.693 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:29:52.709 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:29:52.712 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:29:52.712 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:29:52.713 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:29:52.715 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:29:56.138 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:29:56.138 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:29:56.141 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:29:56.142 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:29:56.142 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:29:56.148 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:29:56.150 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:29:56.150 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:29:56.153 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:29:56.154 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:29:56.157 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:29:56.157 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:29:56.161 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:29:56.162 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:29:56.428 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:29:56.431 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:29:56.432 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:29:56.435 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:29:56.436 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:29:58.072 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:29:58.075 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 08:29:58.075 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:29:58.078 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:29:58.079 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 4 successful, 0 failed, 0 missing
2025-10-07 08:29:58.080 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 08:29:58.086 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:29:58.091 [http-nio-8080-exec-7] INFO  c.e.b.controllers.PrintJobController - REST API: Creating STICKER print job for invoice 32
2025-10-07 08:29:58.092 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 08:29:58.095 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - Generating sticker PDF for invoice 32
2025-10-07 08:29:58.108 [http-nio-8080-exec-7] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/stickers/20251007_082958_fad05598_sticker_32.pdf
2025-10-07 08:29:58.108 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - Sticker PDF generated successfully: http://localhost:9000/elguindy/stickers/20251007_082958_fad05598_sticker_32.pdf
2025-10-07 08:29:58.109 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 08:29:58.113 [http-nio-8080-exec-7] INFO  c.e.b.controllers.PrintJobController - STICKER print job created successfully for invoice 32: PDF at http://localhost:9000/elguindy/stickers/20251007_082958_fad05598_sticker_32.pdf
2025-10-07 08:29:58.694 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:29:58.697 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:29:58.698 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:29:58.700 [http-nio-8080-exec-10] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 08:29:58.701 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:29:58.702 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:29:58.703 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 08:29:58.706 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:29:58.713 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:29:58.714 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:29:58.715 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 08:29:58.716 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:29:58.717 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:29:58.718 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 08:30:03.512 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:30:03.513 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:30:03.515 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:30:03.516 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:30:03.520 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:30:03.522 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:30:03.522 [http-nio-8080-exec-1] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:30:03.530 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:30:03.535 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:30:03.535 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:30:03.538 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:30:03.539 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:30:03.542 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:30:03.542 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:30:03.801 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:30:03.805 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:30:03.805 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:30:03.807 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:30:03.808 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:30:10.155 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:30:10.158 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 08:30:10.159 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:30:10.162 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:30:10.163 [http-nio-8080-exec-6] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 5 successful, 0 failed, 0 missing
2025-10-07 08:30:10.164 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 08:30:14.348 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:30:14.352 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:30:14.354 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.Invoice */update invoice 
    set
        customer_id=?,
        issue_date=?,
        notes=?,
        payment_date=?,
        status=?,
        total_price=? 
    where
        id=?
2025-10-07 08:30:14.368 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:30:14.370 [http-nio-8080-exec-7] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.example.backend.models.Invoice["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:342)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1587)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:30:28.466 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:30:28.466 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:30:28.470 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:30:28.470 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:30:28.470 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:30:28.474 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:30:28.475 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:30:28.572 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:30:28.572 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:30:28.575 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:30:28.575 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:30:28.575 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:30:28.578 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:30:28.579 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:30:28.769 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:30:28.772 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:30:28.773 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:30:28.775 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:30:28.776 [http-nio-8080-exec-4] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:30:29.578 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:30:29.581 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:30:29.582 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:30:29.584 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:30:29.585 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:31:13.465 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:31:13.470 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:31:13.476 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.Invoice */update invoice 
    set
        customer_id=?,
        issue_date=?,
        notes=?,
        payment_date=?,
        status=?,
        total_price=? 
    where
        id=?
2025-10-07 08:31:13.485 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:31:13.486 [http-nio-8080-exec-9] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.example.backend.models.Invoice["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:342)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1587)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:31:15.098 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:31:15.098 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:31:15.102 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:31:15.103 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:31:15.103 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:31:15.106 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:31:15.106 [http-nio-8080-exec-7] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:31:15.109 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:31:15.109 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:31:15.110 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:31:15.111 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:31:15.111 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:31:15.114 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:31:15.114 [http-nio-8080-exec-1] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:31:15.376 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:31:15.378 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:31:15.378 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:31:15.381 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:31:15.381 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:31:22.432 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:31:22.437 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.id,
        cr1_0.active,
        cr1_0.cutting_type,
        cr1_0.max_thickness,
        cr1_0.min_thickness,
        cr1_0.rate_per_meter 
    from
        cutting_rates cr1_0
2025-10-07 08:31:22.443 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:31:22.446 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.id,
        cr1_0.active,
        cr1_0.cutting_type,
        cr1_0.max_thickness,
        cr1_0.min_thickness,
        cr1_0.rate_per_meter 
    from
        cutting_rates cr1_0
2025-10-07 08:31:23.376 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:31:23.381 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0
2025-10-07 08:31:23.387 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:31:23.392 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0
2025-10-07 08:31:24.993 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:31:24.997 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:31:24.997 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:31:24.998 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 08:31:24.999 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:31:25.000 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:31:25.001 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 08:31:25.004 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:31:25.005 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:31:25.006 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:31:25.007 [http-nio-8080-exec-8] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 08:31:25.008 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:31:25.009 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:31:25.010 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 08:31:25.716 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:31:25.721 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:31:25.721 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:31:25.724 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:31:25.725 [http-nio-8080-exec-4] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:31:25.737 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:31:25.742 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:31:25.756 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:31:25.756 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:31:25.759 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:31:25.759 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:31:25.759 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:31:25.762 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:31:25.763 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:31:25.974 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:31:25.977 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:31:25.977 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:31:25.981 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:31:25.982 [http-nio-8080-exec-9] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:31:27.090 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:31:27.096 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0
2025-10-07 08:31:27.100 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:31:27.104 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0
2025-10-07 08:31:27.790 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:31:27.793 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:31:27.794 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:31:27.797 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:31:27.798 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:31:27.821 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:31:27.824 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:31:27.825 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:31:27.827 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:31:27.829 [http-nio-8080-exec-1] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:31:29.623 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:31:29.626 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:31:29.628 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:31:29.629 [http-nio-8080-exec-8] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.example.backend.models.Invoice["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:342)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1587)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:32:28.553 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:32:28.553 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:32:28.557 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:32:28.557 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:32:28.557 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:32:28.560 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:32:28.561 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:32:28.563 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:32:28.563 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:32:28.566 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:32:28.566 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:32:28.567 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:32:28.569 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:32:28.570 [http-nio-8080-exec-3] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:32:28.844 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:32:28.846 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:32:28.846 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:32:28.849 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:32:28.849 [http-nio-8080-exec-7] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:32:38.903 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:32:38.906 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:32:38.907 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:32:38.907 [http-nio-8080-exec-10] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 08:32:38.908 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:32:38.911 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:32:38.912 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 08:32:38.916 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:32:38.919 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:32:38.919 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:32:38.920 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 08:32:38.921 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:32:38.922 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:32:38.923 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 08:32:46.781 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:32:46.783 [http-nio-8080-exec-4] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 49 as PRINTING
2025-10-07 08:32:46.784 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 08:32:46.785 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 08:32:46.798 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:32:46.799 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:32:46.816 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:32:46.819 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:32:46.819 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:32:46.820 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:32:46.820 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:32:50.183 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:32:50.184 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:32:50.186 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:32:50.186 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:32:50.187 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:32:50.190 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:32:50.191 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:32:50.192 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:32:50.193 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:32:50.195 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:32:50.195 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:32:50.195 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:32:50.197 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:32:50.198 [http-nio-8080-exec-3] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:32:50.475 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:32:50.477 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:32:50.478 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:32:50.480 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:32:50.481 [http-nio-8080-exec-7] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:34:54.873 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:34:54.878 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:34:54.878 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:34:54.882 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:34:54.883 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:34:54.886 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:34:54.889 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:34:54.890 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:34:54.892 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:34:54.893 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:34:58.854 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:34:58.857 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:34:58.859 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:34:58.860 [http-nio-8080-exec-5] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.example.backend.models.Invoice["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:342)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1587)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:36:15.650 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:36:15.655 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:36:15.656 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:36:15.658 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:36:15.659 [http-nio-8080-exec-3] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:36:15.663 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:36:15.666 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:36:15.666 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:36:15.669 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:36:15.670 [http-nio-8080-exec-7] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:36:16.470 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:36:16.474 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:36:16.476 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:36:16.478 [http-nio-8080-exec-4] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.example.backend.models.Invoice["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:342)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1587)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:36:27.179 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:36:27.183 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:36:27.185 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:36:27.186 [http-nio-8080-exec-10] ERROR c.e.b.e.i.InvoiceExceptionHandler - Unexpected error: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:491)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:345)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:263)
	at org.springframework.web.servlet.mvc.method.annotation.ResponseEntityReturnValueHandler.handleReturnValue(ResponseEntityReturnValueHandler.java:79)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.example.backend.models.Invoice["customer"]->com.example.backend.models.customer.Customer$HibernateProxy["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1359)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:415)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:29)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:760)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:183)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:503)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:342)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1587)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:485)
	... 110 common frames omitted
2025-10-07 08:37:27.616 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-07 08:37:27.621 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-10-07 08:37:27.623 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-10-07 08:37:27.623 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@2ad41ea0]]
2025-10-07 08:37:27.623 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-10-07 08:37:27.628 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 08:37:27.630 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-07 08:37:27.632 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-07 08:37:32.913 [main] INFO  c.example.backend.BackendApplication - Starting BackendApplication using Java 23.0.2 with PID 34300 (C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem\backend\target\classes started by Abdullah Shaddad in C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem)
2025-10-07 08:37:32.914 [main] DEBUG c.example.backend.BackendApplication - Running with Spring Boot v3.5.5, Spring v6.2.10
2025-10-07 08:37:32.914 [main] INFO  c.example.backend.BackendApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-07 08:37:33.360 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 08:37:33.360 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-10-07 08:37:33.384 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CustomerRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:37:33.385 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingDetailRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:37:33.386 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingRateRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:37:33.386 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.GlassTypeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:37:33.387 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceLineRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:37:33.388 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:37:33.388 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.NotificationRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:37:33.390 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.PrintJobRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:37:33.391 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:37:33.391 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 27 ms. Found 0 JDBC repository interfaces.
2025-10-07 08:37:33.398 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 08:37:33.398 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-07 08:37:33.423 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 9 JPA repository interfaces.
2025-10-07 08:37:33.723 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-07 08:37:33.730 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-07 08:37:33.730 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-07 08:37:33.768 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-07 08:37:33.768 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 819 ms
2025-10-07 08:37:33.850 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-07 08:37:33.881 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-07 08:37:33.902 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-07 08:37:34.054 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-07 08:37:34.072 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-07 08:37:34.150 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@627bcd7e
2025-10-07 08:37:34.151 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-07 08:37:34.168 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-07 08:37:34.182 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-07 08:37:34.843 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-07 08:37:35.102 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 08:37:35.252 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-07 08:37:35.773 [main] DEBUG c.e.b.c.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-07 08:37:35.800 [main] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-07 08:37:35.800 [main] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-07 08:37:36.300 [main] INFO  c.e.backend.services.StorageService - MinIO bucket already exists: elguindy
2025-10-07 08:37:36.335 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-07 08:37:36.859 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-10-07 08:37:36.860 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@3a8e9401]]
2025-10-07 08:37:36.861 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-10-07 08:37:36.870 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-07 08:37:36.875 [main] INFO  c.example.backend.BackendApplication - Started BackendApplication in 4.206 seconds (process running for 4.579)
2025-10-07 08:37:36.880 [main] INFO  c.e.backend.config.DataInitializer - Starting application data initialization...
2025-10-07 08:37:36.881 [main] INFO  c.e.backend.config.DataInitializer - Application data initialization completed successfully.
2025-10-07 08:37:36.940 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:37:36.952 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:37:36.954 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:37:36.956 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:37:36.957 [main] INFO  c.e.backend.config.DataInitializer - User initialization completed. Default users created if they didn't exist.
2025-10-07 08:37:36.957 [main] INFO  c.e.backend.config.DataInitializer - IMPORTANT: Please change default passwords after first login for security!
2025-10-07 08:37:42.565 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-07 08:37:42.565 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-07 08:37:42.566 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-10-07 08:37:42.676 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:37:42.733 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 08:37:42.814 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pj1_0.invoice_id,
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.invoice_id=?
2025-10-07 08:37:52.642 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:37:52.642 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:37:52.653 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:37:52.655 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:37:52.661 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:37:52.665 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:37:52.671 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:37:52.676 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:37:52.678 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:37:52.681 [http-nio-8080-exec-2] WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2025-10-07 08:37:52.691 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:37:52.696 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:37:52.697 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:37:52.703 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:37:52.705 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:37:52.939 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:37:52.943 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:37:52.944 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:37:52.951 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:37:52.952 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:37:59.916 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:37:59.923 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:37:59.926 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:37:59.928 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:37:59.930 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:37:59.938 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:37:59.943 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:37:59.944 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:37:59.946 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:37:59.946 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:38:02.328 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:02.328 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:02.332 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:38:02.333 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:38:02.333 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:38:02.338 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:38:02.339 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:38:02.344 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:02.346 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:02.348 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:38:02.350 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:38:02.351 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:38:02.355 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:38:02.357 [http-nio-8080-exec-3] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:38:02.625 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:02.632 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:38:02.632 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:38:02.638 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:38:02.640 [http-nio-8080-exec-4] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:38:03.312 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:03.326 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 08:38:03.329 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:38:03.340 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:38:03.344 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 5 successful, 0 failed, 0 missing
2025-10-07 08:38:03.346 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 08:38:07.125 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:07.130 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 08:38:07.131 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:38:07.134 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:38:07.135 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 5 successful, 0 failed, 0 missing
2025-10-07 08:38:07.136 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 08:38:07.144 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:07.147 [http-nio-8080-exec-6] INFO  c.e.b.controllers.PrintJobController - REST API: Creating STICKER print job for invoice 32
2025-10-07 08:38:07.147 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 08:38:07.150 [http-nio-8080-exec-6] INFO  c.e.b.services.PdfGenerationService - Generating sticker PDF for invoice 32
2025-10-07 08:38:07.318 [http-nio-8080-exec-6] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/stickers/20251007_083807_b30a228e_sticker_32.pdf
2025-10-07 08:38:07.318 [http-nio-8080-exec-6] INFO  c.e.b.services.PdfGenerationService - Sticker PDF generated successfully: http://localhost:9000/elguindy/stickers/20251007_083807_b30a228e_sticker_32.pdf
2025-10-07 08:38:07.326 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 08:38:07.340 [http-nio-8080-exec-6] INFO  c.e.b.controllers.PrintJobController - STICKER print job created successfully for invoice 32: PDF at http://localhost:9000/elguindy/stickers/20251007_083807_b30a228e_sticker_32.pdf
2025-10-07 08:38:12.463 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:12.468 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:38:12.469 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:38:12.471 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 08:38:12.473 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:38:12.476 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:38:12.477 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 08:38:12.484 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:12.489 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:38:12.489 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:38:12.492 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 08:38:12.493 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:38:12.494 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:38:12.496 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 08:38:14.992 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:14.997 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:38:14.998 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:38:15.001 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:38:15.004 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:38:15.011 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:15.017 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:38:15.018 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:38:15.023 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:38:15.025 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:38:23.297 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:23.303 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 08:38:23.306 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pj1_0.invoice_id,
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.invoice_id=?
2025-10-07 08:38:28.340 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:28.347 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0
2025-10-07 08:38:28.355 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:28.359 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0
2025-10-07 08:38:33.054 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:33.058 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:38:33.059 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:38:33.061 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 08:38:33.062 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:38:33.064 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:38:33.065 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 08:38:33.070 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:33.074 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:38:33.074 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:38:33.076 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 08:38:33.078 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:38:33.080 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:38:33.081 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 08:38:36.052 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:36.058 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.id,
        cr1_0.active,
        cr1_0.cutting_type,
        cr1_0.max_thickness,
        cr1_0.min_thickness,
        cr1_0.rate_per_meter 
    from
        cutting_rates cr1_0
2025-10-07 08:38:36.066 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:36.071 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.id,
        cr1_0.active,
        cr1_0.cutting_type,
        cr1_0.max_thickness,
        cr1_0.min_thickness,
        cr1_0.rate_per_meter 
    from
        cutting_rates cr1_0
2025-10-07 08:38:36.638 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:36.645 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:38:36.653 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:36.659 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:38:36.858 [MessageBroker-1] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2025-10-07 08:38:37.091 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:37.096 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0
2025-10-07 08:38:37.105 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:37.118 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0
2025-10-07 08:38:41.381 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:41.387 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0
2025-10-07 08:38:41.397 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:41.401 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0
2025-10-07 08:38:42.180 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:42.181 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:42.185 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:38:42.186 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:38:42.186 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:38:42.190 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:38:42.191 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:38:42.192 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:42.194 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:42.194 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:38:42.197 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:38:42.197 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:38:42.202 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:38:42.204 [http-nio-8080-exec-7] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:38:42.469 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:42.472 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:38:42.472 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:38:42.477 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:38:42.478 [http-nio-8080-exec-9] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:38:42.838 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:42.843 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:38:42.844 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:38:42.849 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:38:42.851 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:38:42.855 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:42.860 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:38:42.861 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:38:42.866 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:38:42.876 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:38:48.781 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:48.785 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:38:48.786 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:38:48.787 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 08:38:48.789 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:38:48.790 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:38:48.791 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 08:38:48.795 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:48.799 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:38:48.800 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:38:48.801 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 08:38:48.802 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:38:48.804 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:38:48.805 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 08:38:52.693 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:52.697 [http-nio-8080-exec-6] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 50 as PRINTING
2025-10-07 08:38:52.698 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 08:38:52.707 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 08:38:52.714 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:38:52.716 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:38:52.732 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:38:52.735 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:38:52.736 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:38:52.737 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:38:52.738 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:39:19.577 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:39:19.580 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:39:19.580 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:39:19.581 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:39:19.582 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:39:41.979 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:39:41.979 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:39:41.984 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:39:41.984 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:39:41.984 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:39:41.989 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:39:41.991 [http-nio-8080-exec-7] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:39:41.993 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:39:41.996 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:39:41.996 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:39:42.000 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:39:42.000 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:39:42.005 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:39:42.007 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:39:42.272 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:39:42.275 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:39:42.276 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:39:42.279 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:39:42.280 [http-nio-8080-exec-3] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:39:42.984 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:39:42.989 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0
2025-10-07 08:39:42.996 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:39:43.000 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0
2025-10-07 08:39:43.479 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:39:43.483 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:39:43.484 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:39:43.488 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:39:43.490 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:39:43.494 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:39:43.497 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:39:43.498 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:39:43.502 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:39:43.503 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:39:45.426 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:39:45.426 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:39:45.429 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:39:45.430 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:39:45.430 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:39:45.434 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:39:45.435 [http-nio-8080-exec-9] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:39:45.436 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:39:45.439 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:39:45.439 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:39:45.442 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:39:45.443 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:39:45.447 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:39:45.448 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:39:45.720 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:39:45.723 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:39:45.724 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:39:45.726 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:39:45.727 [http-nio-8080-exec-3] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:39:51.164 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:39:51.168 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 08:39:51.168 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:39:51.171 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:39:51.172 [http-nio-8080-exec-4] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 6 successful, 0 failed, 0 missing
2025-10-07 08:39:51.173 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 08:39:51.177 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:39:51.180 [http-nio-8080-exec-1] INFO  c.e.b.controllers.PrintJobController - REST API: Creating STICKER print job for invoice 32
2025-10-07 08:39:51.180 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 08:39:51.182 [http-nio-8080-exec-1] INFO  c.e.b.services.PdfGenerationService - Generating sticker PDF for invoice 32
2025-10-07 08:39:51.205 [http-nio-8080-exec-1] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/stickers/20251007_083951_5dff51ae_sticker_32.pdf
2025-10-07 08:39:51.205 [http-nio-8080-exec-1] INFO  c.e.b.services.PdfGenerationService - Sticker PDF generated successfully: http://localhost:9000/elguindy/stickers/20251007_083951_5dff51ae_sticker_32.pdf
2025-10-07 08:39:51.206 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 08:39:51.210 [http-nio-8080-exec-1] INFO  c.e.b.controllers.PrintJobController - STICKER print job created successfully for invoice 32: PDF at http://localhost:9000/elguindy/stickers/20251007_083951_5dff51ae_sticker_32.pdf
2025-10-07 08:39:58.033 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:39:58.036 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:39:58.037 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:39:58.039 [http-nio-8080-exec-6] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 08:39:58.040 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:39:58.041 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:39:58.041 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 08:39:58.045 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:39:58.049 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:39:58.049 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:39:58.051 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 08:39:58.052 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:39:58.053 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:39:58.054 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 08:40:28.028 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:40:28.034 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:40:28.035 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:40:28.037 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 08:40:28.038 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:40:28.040 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:40:28.041 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 08:40:58.579 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:40:58.582 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:40:58.582 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:40:58.583 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 08:40:58.584 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:40:58.585 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:40:58.586 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 08:41:05.766 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:41:05.766 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:41:05.771 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:41:05.772 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:41:05.772 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:41:05.777 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:41:05.778 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:41:05.779 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:41:05.781 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:41:05.782 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:41:05.784 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:41:05.785 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:41:05.789 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:41:05.790 [http-nio-8080-exec-1] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:41:06.061 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:41:06.064 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:41:06.064 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:41:06.068 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:41:06.069 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:41:07.672 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:41:07.675 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 08:41:07.676 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:41:07.679 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:41:07.680 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 7 successful, 0 failed, 0 missing
2025-10-07 08:41:07.681 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 08:43:56.881 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-07 08:43:56.886 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-10-07 08:43:56.887 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-10-07 08:43:56.888 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@3a8e9401]]
2025-10-07 08:43:56.888 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-10-07 08:43:56.891 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 08:43:56.893 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-07 08:43:56.895 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-07 08:44:02.071 [main] INFO  c.example.backend.BackendApplication - Starting BackendApplication using Java 23.0.2 with PID 40604 (C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem\backend\target\classes started by Abdullah Shaddad in C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem)
2025-10-07 08:44:02.072 [main] DEBUG c.example.backend.BackendApplication - Running with Spring Boot v3.5.5, Spring v6.2.10
2025-10-07 08:44:02.073 [main] INFO  c.example.backend.BackendApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-07 08:44:02.530 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 08:44:02.531 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-10-07 08:44:02.554 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CustomerRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:44:02.555 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingDetailRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:44:02.555 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingRateRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:44:02.556 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.GlassTypeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:44:02.557 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceLineRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:44:02.558 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:44:02.558 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.NotificationRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:44:02.560 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.PrintJobRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:44:02.560 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:44:02.561 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 26 ms. Found 0 JDBC repository interfaces.
2025-10-07 08:44:02.567 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 08:44:02.568 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-07 08:44:02.593 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 9 JPA repository interfaces.
2025-10-07 08:44:02.881 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-07 08:44:02.888 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-07 08:44:02.888 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-07 08:44:02.924 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-07 08:44:02.924 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 816 ms
2025-10-07 08:44:03.007 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-07 08:44:03.038 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-07 08:44:03.058 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-07 08:44:03.217 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-07 08:44:03.235 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-07 08:44:03.344 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@365e65bb
2025-10-07 08:44:03.345 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-07 08:44:03.369 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-07 08:44:03.384 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-07 08:44:04.036 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-07 08:44:04.290 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 08:44:04.449 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-07 08:44:04.972 [main] DEBUG c.e.b.c.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-07 08:44:04.997 [main] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-07 08:44:04.997 [main] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-07 08:44:05.480 [main] INFO  c.e.backend.services.StorageService - MinIO bucket already exists: elguindy
2025-10-07 08:44:05.513 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-07 08:44:06.031 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-10-07 08:44:06.032 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@2f4b8c36]]
2025-10-07 08:44:06.033 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-10-07 08:44:06.042 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-07 08:44:06.046 [main] INFO  c.example.backend.BackendApplication - Started BackendApplication in 4.217 seconds (process running for 4.586)
2025-10-07 08:44:06.051 [main] INFO  c.e.backend.config.DataInitializer - Starting application data initialization...
2025-10-07 08:44:06.052 [main] INFO  c.e.backend.config.DataInitializer - Application data initialization completed successfully.
2025-10-07 08:44:06.106 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:44:06.117 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:44:06.119 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:44:06.121 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:44:06.121 [main] INFO  c.e.backend.config.DataInitializer - User initialization completed. Default users created if they didn't exist.
2025-10-07 08:44:06.121 [main] INFO  c.e.backend.config.DataInitializer - IMPORTANT: Please change default passwords after first login for security!
2025-10-07 08:44:13.512 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-07 08:44:13.512 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-07 08:44:13.513 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-10-07 08:44:13.612 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:44:13.612 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:44:13.639 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:44:13.641 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:44:13.649 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:44:13.671 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:44:13.674 [http-nio-8080-exec-1] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:44:13.675 [http-nio-8080-exec-1] WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2025-10-07 08:44:13.685 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:44:13.688 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:44:13.689 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:44:13.690 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:44:13.692 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:44:13.695 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:44:13.696 [http-nio-8080-exec-4] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:44:13.777 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:44:13.783 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:44:13.784 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:44:13.789 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:44:13.790 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:44:15.806 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:44:15.811 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 08:44:15.813 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:44:15.820 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:44:15.824 [http-nio-8080-exec-6] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 7 successful, 0 failed, 0 missing
2025-10-07 08:44:15.826 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 08:44:15.834 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:44:15.838 [http-nio-8080-exec-7] INFO  c.e.b.controllers.PrintJobController - REST API: Creating STICKER print job for invoice 32
2025-10-07 08:44:15.844 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 08:44:15.849 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - Generating sticker PDF for invoice 32
2025-10-07 08:44:15.940 [http-nio-8080-exec-7] WARN  c.e.b.services.PdfGenerationService - Arabic font not found, using fallback font
2025-10-07 08:44:16.067 [http-nio-8080-exec-7] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/stickers/20251007_084416_316fcb29_sticker_32.pdf
2025-10-07 08:44:16.067 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - Sticker PDF generated successfully: http://localhost:9000/elguindy/stickers/20251007_084416_316fcb29_sticker_32.pdf
2025-10-07 08:44:16.077 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 08:44:16.092 [http-nio-8080-exec-7] INFO  c.e.b.controllers.PrintJobController - STICKER print job created successfully for invoice 32: PDF at http://localhost:9000/elguindy/stickers/20251007_084416_316fcb29_sticker_32.pdf
2025-10-07 08:44:17.252 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:44:17.258 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:44:17.260 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:44:17.263 [http-nio-8080-exec-8] INFO  c.e.backend.services.PrintJobService - Found 2 queued print jobs
2025-10-07 08:44:17.267 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:44:17.269 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:44:17.271 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - Found 2 queued print jobs
2025-10-07 08:44:17.280 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:44:17.285 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:44:17.285 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:44:17.287 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Found 2 queued print jobs
2025-10-07 08:44:17.288 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:44:17.290 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:44:17.291 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - Found 2 queued print jobs
2025-10-07 08:44:43.585 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:44:43.587 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:44:43.593 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:44:43.593 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:44:43.593 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:44:43.600 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:44:43.602 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:44:43.604 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:44:43.605 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:44:43.609 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:44:43.609 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:44:43.610 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:44:43.614 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:44:43.615 [http-nio-8080-exec-3] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:44:43.876 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:44:43.881 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:44:43.881 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:44:43.885 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:44:43.886 [http-nio-8080-exec-4] INFO  c.e.b.controllers.InvoiceController - Retrieved 5 invoices (page 1 of 1)
2025-10-07 08:44:45.536 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:44:45.541 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 08:44:45.541 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:44:45.543 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:44:45.545 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 8 successful, 0 failed, 0 missing
2025-10-07 08:44:45.546 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 08:44:48.458 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:44:48.462 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 14
2025-10-07 08:44:48.462 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:44:48.465 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:44:48.467 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 14: 8 successful, 0 failed, 2 missing
2025-10-07 08:44:48.468 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 14: 3 total jobs
2025-10-07 08:44:48.475 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:44:48.478 [http-nio-8080-exec-9] INFO  c.e.b.controllers.PrintJobController - REST API: Creating CLIENT print job for invoice 14
2025-10-07 08:44:48.478 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 08:44:48.481 [http-nio-8080-exec-9] INFO  c.e.b.services.PdfGenerationService - Generating PDF for invoice 14 with type CLIENT
2025-10-07 08:44:48.482 [http-nio-8080-exec-9] WARN  c.e.b.services.PdfGenerationService - Arabic font not found, using fallback font
2025-10-07 08:44:48.497 [http-nio-8080-exec-9] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/invoices/20251007_084448_5c3d574c_invoice_14_client.pdf
2025-10-07 08:44:48.497 [http-nio-8080-exec-9] INFO  c.e.b.services.PdfGenerationService - PDF generated and stored successfully: http://localhost:9000/elguindy/invoices/20251007_084448_5c3d574c_invoice_14_client.pdf
2025-10-07 08:44:48.498 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 08:44:48.499 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - CLIENT print job created for invoice 14: 53
2025-10-07 08:44:48.502 [http-nio-8080-exec-9] INFO  c.e.b.controllers.PrintJobController - CLIENT print job created successfully for invoice 14: PDF at http://localhost:9000/elguindy/invoices/20251007_084448_5c3d574c_invoice_14_client.pdf
2025-10-07 08:44:48.545 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:44:48.548 [http-nio-8080-exec-10] INFO  c.e.b.controllers.PrintJobController - REST API: Creating OWNER print job for invoice 14
2025-10-07 08:44:48.549 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 08:44:48.552 [http-nio-8080-exec-10] INFO  c.e.b.services.PdfGenerationService - Generating PDF for invoice 14 with type OWNER
2025-10-07 08:44:48.553 [http-nio-8080-exec-10] WARN  c.e.b.services.PdfGenerationService - Arabic font not found, using fallback font
2025-10-07 08:44:48.567 [http-nio-8080-exec-10] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/invoices/20251007_084448_4d7b128f_invoice_14_owner.pdf
2025-10-07 08:44:48.567 [http-nio-8080-exec-10] INFO  c.e.b.services.PdfGenerationService - PDF generated and stored successfully: http://localhost:9000/elguindy/invoices/20251007_084448_4d7b128f_invoice_14_owner.pdf
2025-10-07 08:44:48.568 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 08:44:48.570 [http-nio-8080-exec-10] INFO  c.e.backend.services.PrintJobService - OWNER print job created for invoice 14: 54
2025-10-07 08:44:48.573 [http-nio-8080-exec-10] INFO  c.e.b.controllers.PrintJobController - OWNER print job created successfully for invoice 14: PDF at http://localhost:9000/elguindy/invoices/20251007_084448_4d7b128f_invoice_14_owner.pdf
2025-10-07 08:44:50.943 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:44:50.948 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 33
2025-10-07 08:44:50.948 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:44:50.951 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:44:50.952 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 33: 3 successful, 0 failed, 0 missing
2025-10-07 08:44:50.953 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 33: 3 total jobs
2025-10-07 08:44:54.406 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:44:54.411 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 30
2025-10-07 08:44:54.411 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:44:54.413 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:44:54.415 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 30: 3 successful, 0 failed, 0 missing
2025-10-07 08:44:54.417 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 30: 3 total jobs
2025-10-07 08:45:02.658 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:45:02.666 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        upper(c1_0.name) like upper(?) escape '\'
2025-10-07 08:45:06.038 [MessageBroker-1] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2025-10-07 08:45:20.313 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:45:20.348 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 10.0x20.0, cutting: SHATF
2025-10-07 08:45:20.349 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:45:20.354 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 08:45:20.389 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:45:20.389 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:45:20.393 [http-nio-8080-exec-7] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 10.0x20.0, cutting: SHATF
2025-10-07 08:45:20.393 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 10.0x20.0, cutting: SHATF
2025-10-07 08:45:20.394 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:45:20.394 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:45:20.395 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 08:45:20.395 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 08:45:23.333 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:45:23.343 [http-nio-8080-exec-8] INFO  c.e.backend.services.InvoiceService - Starting invoice creation for customer ID: 1
2025-10-07 08:45:23.344 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:45:23.346 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.Invoice */insert 
    into
        invoice (customer_id, issue_date, notes, payment_date, status, total_price) 
    values
        (?, ?, ?, ?, ?, ?)
2025-10-07 08:45:23.349 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:45:23.350 [http-nio-8080-exec-8] ERROR c.e.backend.services.InvoiceService - Invalid dimensions for line 1 in invoice 34: Width=10.0, Height=20.0
2025-10-07 08:45:23.350 [http-nio-8080-exec-8] ERROR c.e.backend.services.InvoiceService - All invoice lines failed for invoice 34: البند 1: أبعاد غير صالحة - العرض كبير جداً (الحد الأقصى: 5.0 متر)
2025-10-07 08:45:23.350 [http-nio-8080-exec-8] ERROR c.e.backend.services.InvoiceService - Invoice creation failed at step 'Invoice Lines Creation': فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - العرض كبير جداً (الحد الأقصى: 5.0 متر)
com.example.backend.exceptions.invoice.InvoiceLineCreationException: فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - العرض كبير جداً (الحد الأقصى: 5.0 متر)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:102)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 08:45:23.358 [http-nio-8080-exec-8] ERROR c.e.b.e.i.InvoiceExceptionHandler - Invoice operation failed: فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - العرض كبير جداً (الحد الأقصى: 5.0 متر)
com.example.backend.exceptions.invoice.InvoiceLineCreationException: فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - العرض كبير جداً (الحد الأقصى: 5.0 متر)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:102)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 08:45:34.458 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:45:34.463 [http-nio-8080-exec-9] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 5.0x5.0, cutting: SHATF
2025-10-07 08:45:34.463 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:45:34.465 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 08:45:34.476 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:45:34.476 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:45:34.480 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 5.0x5.0, cutting: SHATF
2025-10-07 08:45:34.480 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 5.0x5.0, cutting: SHATF
2025-10-07 08:45:34.480 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:45:34.481 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:45:34.482 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 08:45:34.482 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 08:45:39.935 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:45:39.940 [http-nio-8080-exec-1] INFO  c.e.backend.services.InvoiceService - Starting invoice creation for customer ID: 1
2025-10-07 08:45:39.940 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:45:39.942 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.Invoice */insert 
    into
        invoice (customer_id, issue_date, notes, payment_date, status, total_price) 
    values
        (?, ?, ?, ?, ?, ?)
2025-10-07 08:45:39.943 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:45:39.944 [http-nio-8080-exec-1] ERROR c.e.backend.services.InvoiceService - Invalid dimensions for line 1 in invoice 35: Width=5.0, Height=5.0
2025-10-07 08:45:39.944 [http-nio-8080-exec-1] ERROR c.e.backend.services.InvoiceService - All invoice lines failed for invoice 35: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
2025-10-07 08:45:39.944 [http-nio-8080-exec-1] ERROR c.e.backend.services.InvoiceService - Invoice creation failed at step 'Invoice Lines Creation': فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
com.example.backend.exceptions.invoice.InvoiceLineCreationException: فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:102)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 08:45:39.948 [http-nio-8080-exec-1] ERROR c.e.b.e.i.InvoiceExceptionHandler - Invoice operation failed: فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
com.example.backend.exceptions.invoice.InvoiceLineCreationException: فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:102)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 08:45:49.964 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:45:49.968 [http-nio-8080-exec-3] INFO  c.e.backend.services.InvoiceService - Starting invoice creation for customer ID: 1
2025-10-07 08:45:49.968 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:45:49.970 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.Invoice */insert 
    into
        invoice (customer_id, issue_date, notes, payment_date, status, total_price) 
    values
        (?, ?, ?, ?, ?, ?)
2025-10-07 08:45:49.973 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:45:49.973 [http-nio-8080-exec-3] ERROR c.e.backend.services.InvoiceService - Invalid dimensions for line 1 in invoice 36: Width=5.0, Height=5.0
2025-10-07 08:45:49.973 [http-nio-8080-exec-3] ERROR c.e.backend.services.InvoiceService - All invoice lines failed for invoice 36: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
2025-10-07 08:45:49.974 [http-nio-8080-exec-3] ERROR c.e.backend.services.InvoiceService - Invoice creation failed at step 'Invoice Lines Creation': فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
com.example.backend.exceptions.invoice.InvoiceLineCreationException: فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:102)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 08:45:49.976 [http-nio-8080-exec-3] ERROR c.e.b.e.i.InvoiceExceptionHandler - Invoice operation failed: فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
com.example.backend.exceptions.invoice.InvoiceLineCreationException: فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:102)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 08:45:56.026 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:45:56.032 [http-nio-8080-exec-4] INFO  c.e.backend.services.InvoiceService - Starting invoice creation for customer ID: 1
2025-10-07 08:45:56.033 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:45:56.034 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.Invoice */insert 
    into
        invoice (customer_id, issue_date, notes, payment_date, status, total_price) 
    values
        (?, ?, ?, ?, ?, ?)
2025-10-07 08:45:56.037 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:45:56.039 [http-nio-8080-exec-4] ERROR c.e.backend.services.InvoiceService - Invalid dimensions for line 1 in invoice 37: Width=5.0, Height=5.0
2025-10-07 08:45:56.039 [http-nio-8080-exec-4] ERROR c.e.backend.services.InvoiceService - All invoice lines failed for invoice 37: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
2025-10-07 08:45:56.039 [http-nio-8080-exec-4] ERROR c.e.backend.services.InvoiceService - Invoice creation failed at step 'Invoice Lines Creation': فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
com.example.backend.exceptions.invoice.InvoiceLineCreationException: فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:102)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 08:45:56.042 [http-nio-8080-exec-4] ERROR c.e.b.e.i.InvoiceExceptionHandler - Invoice operation failed: فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
com.example.backend.exceptions.invoice.InvoiceLineCreationException: فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:102)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 08:46:03.032 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:03.037 [http-nio-8080-exec-5] INFO  c.e.backend.services.InvoiceService - Starting invoice creation for customer ID: 1
2025-10-07 08:46:03.038 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:46:03.039 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.Invoice */insert 
    into
        invoice (customer_id, issue_date, notes, payment_date, status, total_price) 
    values
        (?, ?, ?, ?, ?, ?)
2025-10-07 08:46:03.040 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:46:03.041 [http-nio-8080-exec-5] ERROR c.e.backend.services.InvoiceService - Invalid dimensions for line 1 in invoice 38: Width=5.0, Height=5.0
2025-10-07 08:46:03.041 [http-nio-8080-exec-5] ERROR c.e.backend.services.InvoiceService - All invoice lines failed for invoice 38: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
2025-10-07 08:46:03.041 [http-nio-8080-exec-5] ERROR c.e.backend.services.InvoiceService - Invoice creation failed at step 'Invoice Lines Creation': فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
com.example.backend.exceptions.invoice.InvoiceLineCreationException: فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:102)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 08:46:03.043 [http-nio-8080-exec-5] ERROR c.e.b.e.i.InvoiceExceptionHandler - Invoice operation failed: فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
com.example.backend.exceptions.invoice.InvoiceLineCreationException: فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:102)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 08:46:09.167 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:09.171 [http-nio-8080-exec-7] INFO  c.e.backend.services.InvoiceService - Starting invoice creation for customer ID: 1
2025-10-07 08:46:09.171 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:46:09.173 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.Invoice */insert 
    into
        invoice (customer_id, issue_date, notes, payment_date, status, total_price) 
    values
        (?, ?, ?, ?, ?, ?)
2025-10-07 08:46:09.174 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:46:09.175 [http-nio-8080-exec-7] ERROR c.e.backend.services.InvoiceService - Invalid dimensions for line 1 in invoice 39: Width=5.0, Height=5.0
2025-10-07 08:46:09.176 [http-nio-8080-exec-7] ERROR c.e.backend.services.InvoiceService - All invoice lines failed for invoice 39: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
2025-10-07 08:46:09.176 [http-nio-8080-exec-7] ERROR c.e.backend.services.InvoiceService - Invoice creation failed at step 'Invoice Lines Creation': فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
com.example.backend.exceptions.invoice.InvoiceLineCreationException: فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:102)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 08:46:09.177 [http-nio-8080-exec-7] ERROR c.e.b.e.i.InvoiceExceptionHandler - Invoice operation failed: فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
com.example.backend.exceptions.invoice.InvoiceLineCreationException: فشل في إنشاء جميع بنود الفاتورة: البند 1: أبعاد غير صالحة - الارتفاع كبير جداً (الحد الأقصى: 3.0 متر)
	at com.example.backend.services.InvoiceService.createInvoice(InvoiceService.java:102)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.example.backend.services.InvoiceService$$SpringCGLIB$$0.createInvoice(<generated>)
	at com.example.backend.controllers.InvoiceController.createInvoice(InvoiceController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.backend.config.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:89)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-10-07 08:46:23.188 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:23.193 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 10.0x100.0, cutting: SHATF
2025-10-07 08:46:23.193 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:46:23.195 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 08:46:23.215 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:23.215 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:23.218 [http-nio-8080-exec-9] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 10.0x100.0, cutting: SHATF
2025-10-07 08:46:23.218 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 10.0x100.0, cutting: SHATF
2025-10-07 08:46:23.219 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:46:23.219 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:46:23.220 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 08:46:23.220 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 08:46:25.894 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:25.898 [http-nio-8080-exec-10] INFO  c.e.backend.services.InvoiceService - Starting invoice creation for customer ID: 1
2025-10-07 08:46:25.899 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:46:25.900 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.Invoice */insert 
    into
        invoice (customer_id, issue_date, notes, payment_date, status, total_price) 
    values
        (?, ?, ?, ?, ?, ?)
2025-10-07 08:46:25.901 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:46:25.903 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 08:46:25.905 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.InvoiceLine */insert 
    into
        invoice_line (area_m2, cutting_price, cutting_type, dimension_unit, glass_type_id, height, invoice_id, length_m, line_total, width) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-07 08:46:25.915 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.Invoice */update invoice 
    set
        customer_id=?,
        issue_date=?,
        notes=?,
        payment_date=?,
        status=?,
        total_price=? 
    where
        id=?
2025-10-07 08:46:25.920 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        where
            i1_0.id=?
2025-10-07 08:46:25.926 [http-nio-8080-exec-10] INFO  c.e.backend.services.InvoiceService - Invoice 40 created successfully for customer 'Abdullah Shaddad' (ID: 1) with 1 lines, total: 2220.0 EGP
2025-10-07 08:46:25.946 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:25.950 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:46:25.951 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:46:25.954 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:46:25.955 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Retrieved 6 invoices (page 1 of 1)
2025-10-07 08:46:27.920 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:27.924 [http-nio-8080-exec-3] INFO  c.e.b.controllers.PrintJobController - REST API: Creating print jobs for invoice 40
2025-10-07 08:46:27.924 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 08:46:27.928 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 08:46:27.930 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Creating print jobs for invoice 40 with 1 lines
2025-10-07 08:46:27.930 [http-nio-8080-exec-3] INFO  c.e.b.services.PdfGenerationService - Generating PDF for invoice 40 with type CLIENT
2025-10-07 08:46:27.930 [http-nio-8080-exec-3] WARN  c.e.b.services.PdfGenerationService - Arabic font not found, using fallback font
2025-10-07 08:46:27.947 [http-nio-8080-exec-3] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/invoices/20251007_084627_361f6540_invoice_40_client.pdf
2025-10-07 08:46:27.947 [http-nio-8080-exec-3] INFO  c.e.b.services.PdfGenerationService - PDF generated and stored successfully: http://localhost:9000/elguindy/invoices/20251007_084627_361f6540_invoice_40_client.pdf
2025-10-07 08:46:27.947 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 08:46:27.949 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - CLIENT print job created for invoice 40: 55
2025-10-07 08:46:27.949 [http-nio-8080-exec-3] INFO  c.e.b.services.PdfGenerationService - Generating PDF for invoice 40 with type OWNER
2025-10-07 08:46:27.950 [http-nio-8080-exec-3] WARN  c.e.b.services.PdfGenerationService - Arabic font not found, using fallback font
2025-10-07 08:46:27.961 [http-nio-8080-exec-3] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/invoices/20251007_084627_1404a3ff_invoice_40_owner.pdf
2025-10-07 08:46:27.961 [http-nio-8080-exec-3] INFO  c.e.b.services.PdfGenerationService - PDF generated and stored successfully: http://localhost:9000/elguindy/invoices/20251007_084627_1404a3ff_invoice_40_owner.pdf
2025-10-07 08:46:27.961 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 08:46:27.963 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - OWNER print job created for invoice 40: 56
2025-10-07 08:46:27.963 [http-nio-8080-exec-3] INFO  c.e.b.services.PdfGenerationService - Generating sticker PDF for invoice 40
2025-10-07 08:46:27.963 [http-nio-8080-exec-3] WARN  c.e.b.services.PdfGenerationService - Arabic font not found, using fallback font
2025-10-07 08:46:27.973 [http-nio-8080-exec-3] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/stickers/20251007_084627_07efc9e4_sticker_40.pdf
2025-10-07 08:46:27.973 [http-nio-8080-exec-3] INFO  c.e.b.services.PdfGenerationService - Sticker PDF generated successfully: http://localhost:9000/elguindy/stickers/20251007_084627_07efc9e4_sticker_40.pdf
2025-10-07 08:46:27.973 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 08:46:27.975 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - All 3 print jobs created successfully for invoice 40
2025-10-07 08:46:27.980 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:46:27.981 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 40: 3 successful, 0 failed, 0 missing
2025-10-07 08:46:27.982 [http-nio-8080-exec-3] INFO  c.e.b.controllers.PrintJobController - Print jobs created successfully for invoice 40: 3 successful, 0 failed
2025-10-07 08:46:27.990 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:27.993 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 40
2025-10-07 08:46:27.994 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:27.995 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:46:27.996 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 40: 3 successful, 0 failed, 0 missing
2025-10-07 08:46:27.997 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 40: 3 total jobs
2025-10-07 08:46:33.874 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:33.878 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:46:33.879 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:46:33.882 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Found 7 queued print jobs
2025-10-07 08:46:33.883 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:33.885 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:46:33.887 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:33.888 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:33.889 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Found 7 queued print jobs
2025-10-07 08:46:33.894 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:33.898 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:46:33.899 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:46:33.901 [http-nio-8080-exec-6] INFO  c.e.backend.services.PrintJobService - Found 7 queued print jobs
2025-10-07 08:46:33.904 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:33.905 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:46:33.907 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:33.908 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:33.909 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - Found 7 queued print jobs
2025-10-07 08:46:37.662 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:37.666 [http-nio-8080-exec-8] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 51 as PRINTING
2025-10-07 08:46:37.667 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 08:46:37.669 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 08:46:37.682 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:37.684 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:46:37.701 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:37.703 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:46:37.704 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:46:37.706 [http-nio-8080-exec-10] INFO  c.e.backend.services.PrintJobService - Found 6 queued print jobs
2025-10-07 08:46:37.708 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:37.709 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:46:37.710 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:37.712 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:37.713 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - Found 6 queued print jobs
2025-10-07 08:46:39.578 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:39.582 [http-nio-8080-exec-1] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 52 as PRINTING
2025-10-07 08:46:39.582 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 08:46:39.584 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 08:46:39.599 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:39.601 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:46:39.617 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:39.621 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:46:39.622 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:46:39.624 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Found 5 queued print jobs
2025-10-07 08:46:39.625 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:39.626 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:46:39.628 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:39.629 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - Found 5 queued print jobs
2025-10-07 08:46:41.298 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:41.302 [http-nio-8080-exec-5] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 53 as PRINTING
2025-10-07 08:46:41.303 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 08:46:41.305 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 08:46:41.308 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:41.310 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:46:41.326 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:41.330 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:46:41.330 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:46:41.333 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Found 4 queued print jobs
2025-10-07 08:46:41.334 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:41.336 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:46:41.337 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:41.338 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Found 4 queued print jobs
2025-10-07 08:46:41.765 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:41.768 [http-nio-8080-exec-9] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 54 as PRINTING
2025-10-07 08:46:41.769 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 08:46:41.771 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 08:46:41.774 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:41.776 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:46:41.789 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:41.792 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:46:41.793 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:46:41.795 [http-nio-8080-exec-8] INFO  c.e.backend.services.PrintJobService - Found 3 queued print jobs
2025-10-07 08:46:41.796 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:41.797 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:46:41.799 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - Found 3 queued print jobs
2025-10-07 08:46:43.448 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:43.450 [http-nio-8080-exec-2] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 55 as PRINTING
2025-10-07 08:46:43.451 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 08:46:43.453 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 08:46:43.467 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:43.468 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:46:43.483 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:43.486 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:46:43.486 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:46:43.489 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 2 queued print jobs
2025-10-07 08:46:43.490 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:43.491 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:46:43.492 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Found 2 queued print jobs
2025-10-07 08:46:46.057 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:46.067 [http-nio-8080-exec-4] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 56 as PRINTING
2025-10-07 08:46:46.067 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 08:46:46.072 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 08:46:46.078 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:46.079 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:46:46.096 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:46.099 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:46:46.100 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:46:46.101 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 08:46:46.102 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:46.103 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:46:46.104 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 08:46:49.113 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:49.116 [http-nio-8080-exec-6] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 57 as PRINTING
2025-10-07 08:46:49.116 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 08:46:49.118 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 08:46:49.121 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:46:49.122 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:46:49.136 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:46:49.141 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:46:49.141 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:46:49.143 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:46:49.144 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:47:04.573 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:47:04.577 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:47:04.578 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:47:04.579 [http-nio-8080-exec-8] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:47:04.580 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:47:34.583 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:47:34.586 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:47:34.587 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:47:34.588 [http-nio-8080-exec-10] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:47:34.588 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:48:04.578 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:48:04.582 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:48:04.583 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:48:04.584 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:48:04.585 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:48:34.579 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:48:34.582 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:48:34.582 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:48:34.583 [http-nio-8080-exec-4] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:48:34.584 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:49:04.580 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:04.583 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:49:04.583 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:49:04.584 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:49:04.585 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:49:09.580 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:09.580 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:09.584 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:49:09.584 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:49:09.585 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:49:09.588 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:49:09.589 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 6 invoices (page 1 of 1)
2025-10-07 08:49:10.580 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:10.585 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:49:10.585 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:49:10.588 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:49:10.589 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Retrieved 6 invoices (page 1 of 1)
2025-10-07 08:49:12.545 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-07 08:49:12.550 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-10-07 08:49:12.552 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-10-07 08:49:12.552 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@2f4b8c36]]
2025-10-07 08:49:12.553 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-10-07 08:49:12.556 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 08:49:12.558 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-07 08:49:12.560 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-07 08:49:18.027 [main] INFO  c.example.backend.BackendApplication - Starting BackendApplication using Java 23.0.2 with PID 28664 (C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem\backend\target\classes started by Abdullah Shaddad in C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem)
2025-10-07 08:49:18.028 [main] DEBUG c.example.backend.BackendApplication - Running with Spring Boot v3.5.5, Spring v6.2.10
2025-10-07 08:49:18.029 [main] INFO  c.example.backend.BackendApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-07 08:49:18.499 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 08:49:18.499 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-10-07 08:49:18.525 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CustomerRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:49:18.526 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingDetailRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:49:18.527 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingRateRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:49:18.527 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.GlassTypeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:49:18.528 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceLineRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:49:18.529 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:49:18.529 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.NotificationRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:49:18.531 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.PrintJobRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:49:18.532 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:49:18.532 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 26 ms. Found 0 JDBC repository interfaces.
2025-10-07 08:49:18.541 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 08:49:18.541 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-07 08:49:18.575 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 31 ms. Found 9 JPA repository interfaces.
2025-10-07 08:49:18.899 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-07 08:49:18.908 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-07 08:49:18.908 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-07 08:49:18.945 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-07 08:49:18.945 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 881 ms
2025-10-07 08:49:19.032 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-07 08:49:19.063 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-07 08:49:19.083 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-07 08:49:19.255 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-07 08:49:19.274 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-07 08:49:19.361 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@57fce8b
2025-10-07 08:49:19.362 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-07 08:49:19.390 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-07 08:49:19.408 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-07 08:49:20.183 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-07 08:49:20.452 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 08:49:20.637 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-07 08:49:21.339 [main] DEBUG c.e.b.c.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-07 08:49:21.367 [main] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-07 08:49:21.367 [main] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-07 08:49:21.995 [main] INFO  c.e.backend.services.StorageService - MinIO bucket already exists: elguindy
2025-10-07 08:49:22.028 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-07 08:49:22.551 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-10-07 08:49:22.552 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@650c9a94]]
2025-10-07 08:49:22.553 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-10-07 08:49:22.564 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-07 08:49:22.569 [main] INFO  c.example.backend.BackendApplication - Started BackendApplication in 4.801 seconds (process running for 5.349)
2025-10-07 08:49:22.575 [main] INFO  c.e.backend.config.DataInitializer - Starting application data initialization...
2025-10-07 08:49:22.575 [main] INFO  c.e.backend.config.DataInitializer - Application data initialization completed successfully.
2025-10-07 08:49:22.641 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:49:22.652 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:49:22.655 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:49:22.656 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:49:22.657 [main] INFO  c.e.backend.config.DataInitializer - User initialization completed. Default users created if they didn't exist.
2025-10-07 08:49:22.657 [main] INFO  c.e.backend.config.DataInitializer - IMPORTANT: Please change default passwords after first login for security!
2025-10-07 08:49:22.748 [http-nio-8080-exec-3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-07 08:49:22.748 [http-nio-8080-exec-3] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-07 08:49:22.749 [http-nio-8080-exec-3] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-10-07 08:49:22.827 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:22.827 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:22.827 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:22.849 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:49:22.852 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:49:22.852 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:49:22.855 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:49:22.856 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:49:22.858 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:49:22.860 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:49:22.882 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:49:22.884 [http-nio-8080-exec-1] INFO  c.e.b.controllers.InvoiceController - Retrieved 6 invoices (page 1 of 1)
2025-10-07 08:49:22.886 [http-nio-8080-exec-1] WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2025-10-07 08:49:22.895 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:22.899 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:49:22.900 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:49:22.904 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:49:22.905 [http-nio-8080-exec-4] INFO  c.e.b.controllers.InvoiceController - Retrieved 6 invoices (page 1 of 1)
2025-10-07 08:49:25.247 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:25.252 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:49:25.252 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:25.252 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:49:25.258 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:49:25.258 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:49:25.260 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 6 invoices (page 1 of 1)
2025-10-07 08:49:25.265 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:25.265 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:25.271 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:49:25.271 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:49:25.271 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:49:25.275 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:49:25.277 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 6 invoices (page 1 of 1)
2025-10-07 08:49:25.542 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:25.545 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:49:25.546 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:49:25.549 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:49:25.550 [http-nio-8080-exec-9] INFO  c.e.b.controllers.InvoiceController - Retrieved 6 invoices (page 1 of 1)
2025-10-07 08:49:29.319 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:29.324 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:49:29.325 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:49:29.327 [http-nio-8080-exec-10] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:49:29.328 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:49:29.332 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:29.338 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:49:29.338 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:49:29.340 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 08:49:29.341 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 08:49:31.526 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:31.526 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:31.540 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:49:31.541 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:49:31.541 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:49:31.545 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:49:31.547 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Retrieved 6 invoices (page 1 of 1)
2025-10-07 08:49:31.549 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:31.552 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:31.554 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:49:31.558 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:49:31.559 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:49:31.564 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:49:31.566 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Retrieved 6 invoices (page 1 of 1)
2025-10-07 08:49:31.814 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:31.818 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:49:31.818 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:49:31.822 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:49:31.823 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 6 invoices (page 1 of 1)
2025-10-07 08:49:34.817 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:34.825 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        upper(c1_0.name) like upper(?) escape '\'
2025-10-07 08:49:42.858 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:42.900 [http-nio-8080-exec-4] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 100.0x100.0, cutting: SHATF
2025-10-07 08:49:42.902 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:49:42.908 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 08:49:42.928 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:42.928 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:42.931 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 100.0x100.0, cutting: SHATF
2025-10-07 08:49:42.931 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:49:42.931 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 100.0x100.0, cutting: SHATF
2025-10-07 08:49:42.932 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:49:42.933 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 08:49:42.933 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 08:49:46.071 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:46.079 [http-nio-8080-exec-8] INFO  c.e.backend.services.InvoiceService - Starting invoice creation for customer ID: 1
2025-10-07 08:49:46.080 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:49:46.091 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.Invoice */insert 
    into
        invoice (customer_id, issue_date, notes, payment_date, status, total_price) 
    values
        (?, ?, ?, ?, ?, ?)
2025-10-07 08:49:46.100 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:49:46.102 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 08:49:46.104 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.InvoiceLine */insert 
    into
        invoice_line (area_m2, cutting_price, cutting_type, dimension_unit, glass_type_id, height, invoice_id, length_m, line_total, width) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-07 08:49:46.119 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.Invoice */update invoice 
    set
        customer_id=?,
        issue_date=?,
        notes=?,
        payment_date=?,
        status=?,
        total_price=? 
    where
        id=?
2025-10-07 08:49:46.122 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        where
            i1_0.id=?
2025-10-07 08:49:46.130 [http-nio-8080-exec-8] INFO  c.e.backend.services.InvoiceService - Invoice 41 created successfully for customer 'Abdullah Shaddad' (ID: 1) with 1 lines, total: 4002.0 EGP
2025-10-07 08:49:46.151 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:46.155 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:49:46.155 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:49:46.160 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:49:46.161 [http-nio-8080-exec-9] INFO  c.e.b.controllers.InvoiceController - Retrieved 7 invoices (page 1 of 1)
2025-10-07 08:49:47.586 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:47.591 [http-nio-8080-exec-3] INFO  c.e.b.controllers.PrintJobController - REST API: Creating STICKER print job for invoice 41
2025-10-07 08:49:47.593 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 08:49:47.597 [http-nio-8080-exec-3] INFO  c.e.b.services.PdfGenerationService - Generating sticker PDF for invoice 41
2025-10-07 08:49:47.680 [http-nio-8080-exec-3] WARN  c.e.b.services.PdfGenerationService - Arabic font not found, using fallback font
2025-10-07 08:49:47.807 [http-nio-8080-exec-3] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/stickers/20251007_084947_4c622d08_sticker_41.pdf
2025-10-07 08:49:47.807 [http-nio-8080-exec-3] INFO  c.e.b.services.PdfGenerationService - Sticker PDF generated successfully: http://localhost:9000/elguindy/stickers/20251007_084947_4c622d08_sticker_41.pdf
2025-10-07 08:49:47.808 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 08:49:47.814 [http-nio-8080-exec-3] INFO  c.e.b.controllers.PrintJobController - STICKER print job created successfully for invoice 41: PDF at http://localhost:9000/elguindy/stickers/20251007_084947_4c622d08_sticker_41.pdf
2025-10-07 08:49:47.822 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:47.827 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 41
2025-10-07 08:49:47.827 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:49:47.830 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:49:47.833 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 41: 1 successful, 0 failed, 2 missing
2025-10-07 08:49:47.835 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 41: 3 total jobs
2025-10-07 08:49:50.161 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:50.166 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:49:50.167 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:49:50.169 [http-nio-8080-exec-4] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 08:49:50.171 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:49:50.173 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:49:50.174 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 08:49:50.179 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:50.182 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:49:50.184 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:49:50.185 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 08:49:50.186 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:49:50.189 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:49:50.190 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 08:49:52.671 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:52.675 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:49:52.675 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:52.676 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:49:52.679 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:49:52.681 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:49:52.682 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Retrieved 7 invoices (page 1 of 1)
2025-10-07 08:49:52.687 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:52.687 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:52.702 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:49:52.702 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:49:52.702 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:49:52.707 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:49:52.708 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 7 invoices (page 1 of 1)
2025-10-07 08:49:52.968 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:52.972 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:49:52.972 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:49:52.976 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:49:52.977 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Retrieved 7 invoices (page 1 of 1)
2025-10-07 08:49:56.246 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:49:56.250 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 08:49:56.250 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:49:56.253 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:49:56.255 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 8 successful, 0 failed, 0 missing
2025-10-07 08:49:56.256 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 08:50:01.625 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:50:01.630 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 31
2025-10-07 08:50:01.630 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:50:01.633 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:50:01.635 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 31: 3 successful, 0 failed, 0 missing
2025-10-07 08:50:01.636 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 31: 3 total jobs
2025-10-07 08:50:03.711 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:50:03.716 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 41
2025-10-07 08:50:03.717 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:50:03.720 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:50:03.722 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 41: 1 successful, 0 failed, 2 missing
2025-10-07 08:50:03.724 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 41: 3 total jobs
2025-10-07 08:50:03.735 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:50:03.740 [http-nio-8080-exec-5] INFO  c.e.b.controllers.PrintJobController - REST API: Creating CLIENT print job for invoice 41
2025-10-07 08:50:03.741 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 08:50:03.744 [http-nio-8080-exec-5] INFO  c.e.b.services.PdfGenerationService - Generating PDF for invoice 41 with type CLIENT
2025-10-07 08:50:03.745 [http-nio-8080-exec-5] WARN  c.e.b.services.PdfGenerationService - Arabic font not found, using fallback font
2025-10-07 08:50:03.787 [http-nio-8080-exec-5] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/invoices/20251007_085003_d211db81_invoice_41_client.pdf
2025-10-07 08:50:03.787 [http-nio-8080-exec-5] INFO  c.e.b.services.PdfGenerationService - PDF generated and stored successfully: http://localhost:9000/elguindy/invoices/20251007_085003_d211db81_invoice_41_client.pdf
2025-10-07 08:50:03.788 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 08:50:03.790 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - CLIENT print job created for invoice 41: 59
2025-10-07 08:50:03.795 [http-nio-8080-exec-5] INFO  c.e.b.controllers.PrintJobController - CLIENT print job created successfully for invoice 41: PDF at http://localhost:9000/elguindy/invoices/20251007_085003_d211db81_invoice_41_client.pdf
2025-10-07 08:50:03.855 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:50:03.859 [http-nio-8080-exec-7] INFO  c.e.b.controllers.PrintJobController - REST API: Creating OWNER print job for invoice 41
2025-10-07 08:50:03.859 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 08:50:03.864 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - Generating PDF for invoice 41 with type OWNER
2025-10-07 08:50:03.866 [http-nio-8080-exec-7] WARN  c.e.b.services.PdfGenerationService - Arabic font not found, using fallback font
2025-10-07 08:50:03.880 [http-nio-8080-exec-7] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/invoices/20251007_085003_a09e5922_invoice_41_owner.pdf
2025-10-07 08:50:03.881 [http-nio-8080-exec-7] INFO  c.e.b.services.PdfGenerationService - PDF generated and stored successfully: http://localhost:9000/elguindy/invoices/20251007_085003_a09e5922_invoice_41_owner.pdf
2025-10-07 08:50:03.882 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 08:50:03.884 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - OWNER print job created for invoice 41: 60
2025-10-07 08:50:03.890 [http-nio-8080-exec-7] INFO  c.e.b.controllers.PrintJobController - OWNER print job created successfully for invoice 41: PDF at http://localhost:9000/elguindy/invoices/20251007_085003_a09e5922_invoice_41_owner.pdf
2025-10-07 08:50:07.626 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:50:07.630 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 40
2025-10-07 08:50:07.631 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:50:07.633 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:50:07.635 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 40: 3 successful, 0 failed, 0 missing
2025-10-07 08:50:07.636 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 40: 3 total jobs
2025-10-07 08:50:16.816 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:50:16.819 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 08:50:16.820 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:50:16.823 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:50:16.824 [http-nio-8080-exec-8] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 8 successful, 0 failed, 0 missing
2025-10-07 08:50:16.825 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 08:50:22.555 [MessageBroker-1] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2025-10-07 08:51:17.194 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:51:17.199 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0
2025-10-07 08:51:17.204 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:51:17.207 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0
2025-10-07 08:51:18.314 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:51:18.318 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:51:18.319 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:51:18.319 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:51:18.323 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:51:18.324 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:51:18.325 [http-nio-8080-exec-7] INFO  c.e.b.controllers.InvoiceController - Retrieved 7 invoices (page 1 of 1)
2025-10-07 08:51:18.329 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:51:18.330 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:51:18.333 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:51:18.334 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:51:18.334 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:51:18.339 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:51:18.341 [http-nio-8080-exec-8] INFO  c.e.b.controllers.InvoiceController - Retrieved 7 invoices (page 1 of 1)
2025-10-07 08:51:18.657 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:51:18.663 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:51:18.664 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:51:18.670 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:51:18.673 [http-nio-8080-exec-1] INFO  c.e.b.controllers.InvoiceController - Retrieved 7 invoices (page 1 of 1)
2025-10-07 08:51:19.087 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:51:19.091 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:51:19.092 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:51:19.094 [http-nio-8080-exec-10] INFO  c.e.backend.services.PrintJobService - Found 3 queued print jobs
2025-10-07 08:51:19.096 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:51:19.098 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:51:19.099 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - Found 3 queued print jobs
2025-10-07 08:51:19.103 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:51:19.106 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:51:19.108 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:51:19.110 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Found 3 queued print jobs
2025-10-07 08:51:19.111 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:51:19.112 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:51:19.113 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - Found 3 queued print jobs
2025-10-07 08:51:49.572 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:51:49.575 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:51:49.575 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:51:49.576 [http-nio-8080-exec-4] INFO  c.e.backend.services.PrintJobService - Found 3 queued print jobs
2025-10-07 08:51:49.577 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:51:49.578 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:51:49.579 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - Found 3 queued print jobs
2025-10-07 08:52:19.570 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:52:19.574 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 08:52:19.574 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 08:52:19.576 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Found 3 queued print jobs
2025-10-07 08:52:19.576 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:52:19.577 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:52:19.578 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Found 3 queued print jobs
2025-10-07 08:52:38.917 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:52:38.921 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:52:38.924 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:52:38.924 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:52:38.927 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:52:38.928 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:52:38.930 [http-nio-8080-exec-3] INFO  c.e.b.controllers.InvoiceController - Retrieved 7 invoices (page 1 of 1)
2025-10-07 08:52:38.933 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:52:38.933 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:52:38.937 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:52:38.937 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:52:38.937 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 08:52:38.941 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:52:38.942 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Retrieved 7 invoices (page 1 of 1)
2025-10-07 08:52:39.209 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:52:39.212 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:52:39.212 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:52:39.216 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:52:39.216 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Retrieved 7 invoices (page 1 of 1)
2025-10-07 08:52:40.229 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:52:40.232 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 08:52:40.232 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:52:40.235 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:52:40.236 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 8 successful, 0 failed, 0 missing
2025-10-07 08:52:40.237 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 08:52:51.899 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:52:51.903 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 08:52:51.903 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:52:51.906 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:52:51.908 [http-nio-8080-exec-6] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 8 successful, 0 failed, 0 missing
2025-10-07 08:52:51.908 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 08:53:07.188 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-07 08:53:07.193 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-10-07 08:53:07.194 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-10-07 08:53:07.194 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@650c9a94]]
2025-10-07 08:53:07.194 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-10-07 08:53:07.197 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 08:53:07.199 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-07 08:53:07.201 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-07 08:53:12.403 [main] INFO  c.example.backend.BackendApplication - Starting BackendApplication using Java 23.0.2 with PID 33204 (C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem\backend\target\classes started by Abdullah Shaddad in C:\Users\Abdullah Shaddad\Desktop\ElGuindyGlassInvoicingSystem)
2025-10-07 08:53:12.404 [main] DEBUG c.example.backend.BackendApplication - Running with Spring Boot v3.5.5, Spring v6.2.10
2025-10-07 08:53:12.404 [main] INFO  c.example.backend.BackendApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-07 08:53:12.887 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 08:53:12.888 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-10-07 08:53:12.914 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CustomerRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:53:12.915 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingDetailRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:53:12.915 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingRateRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:53:12.917 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.GlassTypeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:53:12.917 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceLineRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:53:12.918 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:53:12.918 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.NotificationRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:53:12.919 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.PrintJobRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:53:12.920 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-07 08:53:12.920 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 30 ms. Found 0 JDBC repository interfaces.
2025-10-07 08:53:12.927 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-07 08:53:12.927 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-07 08:53:12.951 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 9 JPA repository interfaces.
2025-10-07 08:53:13.326 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-07 08:53:13.338 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-07 08:53:13.338 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-07 08:53:13.397 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-07 08:53:13.397 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 958 ms
2025-10-07 08:53:13.510 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-07 08:53:13.544 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-07 08:53:13.566 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-07 08:53:13.742 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-07 08:53:13.763 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-07 08:53:13.847 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@4aac81ca
2025-10-07 08:53:13.848 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-07 08:53:13.867 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-07 08:53:13.882 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-07 08:53:14.568 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-07 08:53:14.865 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-07 08:53:15.023 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-07 08:53:15.539 [main] DEBUG c.e.b.c.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-07 08:53:15.565 [main] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-07 08:53:15.567 [main] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-07 08:53:16.070 [main] INFO  c.e.backend.services.StorageService - MinIO bucket already exists: elguindy
2025-10-07 08:53:16.105 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-07 08:53:16.717 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-10-07 08:53:16.717 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@14efd31b]]
2025-10-07 08:53:16.718 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-10-07 08:53:16.735 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-07 08:53:16.742 [main] INFO  c.example.backend.BackendApplication - Started BackendApplication in 4.598 seconds (process running for 4.967)
2025-10-07 08:53:16.755 [main] INFO  c.e.backend.config.DataInitializer - Starting application data initialization...
2025-10-07 08:53:16.756 [main] INFO  c.e.backend.config.DataInitializer - Application data initialization completed successfully.
2025-10-07 08:53:16.845 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:53:16.858 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:53:16.861 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:53:16.862 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-07 08:53:16.864 [main] INFO  c.e.backend.config.DataInitializer - User initialization completed. Default users created if they didn't exist.
2025-10-07 08:53:16.864 [main] INFO  c.e.backend.config.DataInitializer - IMPORTANT: Please change default passwords after first login for security!
2025-10-07 08:53:26.513 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-07 08:53:26.513 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-07 08:53:26.514 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-10-07 08:53:26.592 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:53:26.619 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 08:53:26.625 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:53:26.648 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:53:26.653 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 8 successful, 0 failed, 0 missing
2025-10-07 08:53:26.655 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 08:53:31.971 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:53:31.982 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        upper(c1_0.name) like upper(?) escape '\'
2025-10-07 08:53:42.055 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:53:42.102 [http-nio-8080-exec-3] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 199.0x199.0, cutting: SHATF
2025-10-07 08:53:42.103 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:53:42.111 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 08:53:42.140 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:53:42.141 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:53:42.145 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 199.0x199.0, cutting: SHATF
2025-10-07 08:53:42.146 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:53:42.146 [http-nio-8080-exec-4] INFO  c.e.b.controllers.InvoiceController - Previewing line calculation for glass type: 1, dimensions: 199.0x199.0, cutting: SHATF
2025-10-07 08:53:42.147 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:53:42.148 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 08:53:42.148 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 08:53:43.702 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:53:43.712 [http-nio-8080-exec-6] INFO  c.e.backend.services.InvoiceService - Starting invoice creation for customer ID: 1
2025-10-07 08:53:43.713 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:53:43.726 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.Invoice */insert 
    into
        invoice (customer_id, issue_date, notes, payment_date, status, total_price) 
    values
        (?, ?, ?, ?, ?, ?)
2025-10-07 08:53:43.736 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0 
    where
        gt1_0.id=?
2025-10-07 08:53:43.739 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        cr 
    FROM
        CuttingRate cr 
    WHERE
        cr.cuttingType = :cuttingType 
        AND cr.active = true 
        AND :thickness >= cr.minThickness 
        AND :thickness <= cr.maxThickness 
    ORDER BY
        cr.minThickness */ select
            cr1_0.id,
            cr1_0.active,
            cr1_0.cutting_type,
            cr1_0.max_thickness,
            cr1_0.min_thickness,
            cr1_0.rate_per_meter 
        from
            cutting_rates cr1_0 
        where
            cr1_0.cutting_type=? 
            and cr1_0.active=true 
            and ?>=cr1_0.min_thickness 
            and ?<=cr1_0.max_thickness 
        order by
            cr1_0.min_thickness
2025-10-07 08:53:43.741 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.InvoiceLine */insert 
    into
        invoice_line (area_m2, cutting_price, cutting_type, dimension_unit, glass_type_id, height, invoice_id, length_m, line_total, width) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-07 08:53:43.753 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.Invoice */update invoice 
    set
        customer_id=?,
        issue_date=?,
        notes=?,
        payment_date=?,
        status=?,
        total_price=? 
    where
        id=?
2025-10-07 08:53:43.757 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        where
            i1_0.id=?
2025-10-07 08:53:43.767 [http-nio-8080-exec-6] INFO  c.e.backend.services.InvoiceService - Invoice 42 created successfully for customer 'Abdullah Shaddad' (ID: 1) with 1 lines, total: 7967.9202 EGP
2025-10-07 08:53:43.780 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:53:43.786 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 08:53:43.792 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 08:53:43.799 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 08:53:43.802 [http-nio-8080-exec-10] INFO  c.e.b.controllers.InvoiceController - Retrieved 8 invoices (page 1 of 1)
2025-10-07 08:53:43.804 [http-nio-8080-exec-10] WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2025-10-07 08:53:44.623 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:53:44.628 [http-nio-8080-exec-9] INFO  c.e.b.controllers.PrintJobController - REST API: Creating STICKER print job for invoice 42
2025-10-07 08:53:44.631 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 08:53:44.635 [http-nio-8080-exec-9] INFO  c.e.b.services.PdfGenerationService - Generating sticker PDF for invoice 42
2025-10-07 08:53:44.723 [http-nio-8080-exec-9] WARN  c.e.b.services.PdfGenerationService - Arabic font not found, using fallback font
2025-10-07 08:53:44.850 [http-nio-8080-exec-9] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/stickers/20251007_085344_b28759ed_sticker_42.pdf
2025-10-07 08:53:44.850 [http-nio-8080-exec-9] INFO  c.e.b.services.PdfGenerationService - Sticker PDF generated successfully: http://localhost:9000/elguindy/stickers/20251007_085344_b28759ed_sticker_42.pdf
2025-10-07 08:53:44.851 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 08:53:44.857 [http-nio-8080-exec-9] INFO  c.e.b.controllers.PrintJobController - STICKER print job created successfully for invoice 42: PDF at http://localhost:9000/elguindy/stickers/20251007_085344_b28759ed_sticker_42.pdf
2025-10-07 08:53:44.868 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:53:44.872 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 42
2025-10-07 08:53:44.872 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:53:44.876 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:53:44.878 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 42: 1 successful, 0 failed, 2 missing
2025-10-07 08:53:44.879 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 42: 3 total jobs
2025-10-07 08:53:48.151 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:53:48.155 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 08:53:48.156 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:53:48.159 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:53:48.161 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 8 successful, 0 failed, 0 missing
2025-10-07 08:53:48.162 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 08:53:56.837 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:53:56.842 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 42
2025-10-07 08:53:56.842 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 08:53:56.845 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 08:53:56.847 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 42: 1 successful, 0 failed, 2 missing
2025-10-07 08:53:56.848 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 42: 3 total jobs
2025-10-07 08:53:56.857 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:53:56.861 [http-nio-8080-exec-4] INFO  c.e.b.controllers.PrintJobController - REST API: Creating CLIENT print job for invoice 42
2025-10-07 08:53:56.862 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 08:53:56.865 [http-nio-8080-exec-4] INFO  c.e.b.services.PdfGenerationService - Generating PDF for invoice 42 with type CLIENT
2025-10-07 08:53:56.866 [http-nio-8080-exec-4] WARN  c.e.b.services.PdfGenerationService - Arabic font not found, using fallback font
2025-10-07 08:53:56.891 [http-nio-8080-exec-4] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/invoices/20251007_085356_ae70ebb9_invoice_42_client.pdf
2025-10-07 08:53:56.892 [http-nio-8080-exec-4] INFO  c.e.b.services.PdfGenerationService - PDF generated and stored successfully: http://localhost:9000/elguindy/invoices/20251007_085356_ae70ebb9_invoice_42_client.pdf
2025-10-07 08:53:56.892 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 08:53:56.894 [http-nio-8080-exec-4] INFO  c.e.backend.services.PrintJobService - CLIENT print job created for invoice 42: 62
2025-10-07 08:53:56.898 [http-nio-8080-exec-4] INFO  c.e.b.controllers.PrintJobController - CLIENT print job created successfully for invoice 42: PDF at http://localhost:9000/elguindy/invoices/20251007_085356_ae70ebb9_invoice_42_client.pdf
2025-10-07 08:53:56.945 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 08:53:56.948 [http-nio-8080-exec-10] INFO  c.e.b.controllers.PrintJobController - REST API: Creating OWNER print job for invoice 42
2025-10-07 08:53:56.949 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    LEFT JOIN
        
    FETCH
        i.invoiceLines il 
    LEFT JOIN
        
    FETCH
        il.glassType 
    LEFT JOIN
        
    FETCH
        i.customer 
    WHERE
        i.id = :id */ select
            i1_0.id,
            i1_0.customer_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.name,
            c1_0.phone,
            il1_0.invoice_id,
            il1_0.id,
            il1_0.area_m2,
            il1_0.cutting_price,
            il1_0.cutting_type,
            il1_0.dimension_unit,
            il1_0.glass_type_id,
            gt1_0.id,
            gt1_0.calculation_method,
            gt1_0.color,
            gt1_0.name,
            gt1_0.price_per_meter,
            gt1_0.thickness,
            il1_0.height,
            il1_0.length_m,
            il1_0.line_total,
            il1_0.width,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        left join
            invoice_line il1_0 
                on i1_0.id=il1_0.invoice_id 
        left join
            glass_type gt1_0 
                on gt1_0.id=il1_0.glass_type_id 
        left join
            customer c1_0 
                on c1_0.id=i1_0.customer_id 
        where
            i1_0.id=?
2025-10-07 08:53:56.951 [http-nio-8080-exec-10] INFO  c.e.b.services.PdfGenerationService - Generating PDF for invoice 42 with type OWNER
2025-10-07 08:53:56.953 [http-nio-8080-exec-10] WARN  c.e.b.services.PdfGenerationService - Arabic font not found, using fallback font
2025-10-07 08:53:56.965 [http-nio-8080-exec-10] INFO  c.e.backend.services.StorageService - PDF stored successfully: http://localhost:9000/elguindy/invoices/20251007_085356_d6a30f23_invoice_42_owner.pdf
2025-10-07 08:53:56.966 [http-nio-8080-exec-10] INFO  c.e.b.services.PdfGenerationService - PDF generated and stored successfully: http://localhost:9000/elguindy/invoices/20251007_085356_d6a30f23_invoice_42_owner.pdf
2025-10-07 08:53:56.966 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.PrintJob */insert 
    into
        print_job (created_at, error_message, invoice_id, pdf_path, printed_at, status, type) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-07 08:53:56.968 [http-nio-8080-exec-10] INFO  c.e.backend.services.PrintJobService - OWNER print job created for invoice 42: 63
2025-10-07 08:53:56.971 [http-nio-8080-exec-10] INFO  c.e.b.controllers.PrintJobController - OWNER print job created successfully for invoice 42: PDF at http://localhost:9000/elguindy/invoices/20251007_085356_d6a30f23_invoice_42_owner.pdf
2025-10-07 08:54:16.711 [MessageBroker-1] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2025-10-07 09:24:16.728 [MessageBroker-1] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 2, active threads = 1, queued tasks = 0, completed tasks = 1]
2025-10-07 09:37:25.345 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:37:25.345 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:37:25.360 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 09:37:25.361 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 09:37:25.362 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 09:37:25.368 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:37:25.370 [http-nio-8080-exec-7] INFO  c.e.b.controllers.InvoiceController - Retrieved 8 invoices (page 1 of 1)
2025-10-07 09:37:25.372 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:37:25.374 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:37:25.376 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 09:37:25.376 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 09:37:25.377 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 09:37:25.380 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:37:25.382 [http-nio-8080-exec-3] INFO  c.e.b.controllers.InvoiceController - Retrieved 8 invoices (page 1 of 1)
2025-10-07 09:37:25.632 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:37:25.636 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 09:37:25.638 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 09:37:25.644 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:37:25.646 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 8 invoices (page 1 of 1)
2025-10-07 09:37:30.996 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:37:31.001 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 30
2025-10-07 09:37:31.001 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:37:31.004 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 09:37:31.007 [http-nio-8080-exec-6] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 30: 3 successful, 0 failed, 0 missing
2025-10-07 09:37:31.008 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 30: 3 total jobs
2025-10-07 09:37:46.237 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:37:46.241 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 42
2025-10-07 09:37:46.242 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:37:46.244 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 09:37:46.246 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 42: 3 successful, 0 failed, 0 missing
2025-10-07 09:37:46.247 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 42: 3 total jobs
2025-10-07 09:37:56.895 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:37:56.898 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 42
2025-10-07 09:37:56.899 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:37:56.901 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 09:37:56.902 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 42: 3 successful, 0 failed, 0 missing
2025-10-07 09:37:56.903 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 42: 3 total jobs
2025-10-07 09:38:08.835 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:38:08.840 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 30
2025-10-07 09:38:08.841 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:38:08.844 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 09:38:08.846 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 30: 3 successful, 0 failed, 0 missing
2025-10-07 09:38:08.847 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 30: 3 total jobs
2025-10-07 09:38:53.863 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:38:53.868 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 09:38:53.868 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:38:53.870 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 09:38:53.872 [http-nio-8080-exec-10] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 8 successful, 0 failed, 0 missing
2025-10-07 09:38:53.874 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 09:39:00.356 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:39:00.360 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 09:39:00.361 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:39:00.371 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 09:39:00.373 [http-nio-8080-exec-8] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 8 successful, 0 failed, 0 missing
2025-10-07 09:39:00.375 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 09:39:24.406 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:39:24.411 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 09:39:24.411 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:39:24.414 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 09:39:24.415 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 8 successful, 0 failed, 0 missing
2025-10-07 09:39:24.416 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 09:39:31.049 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:39:31.054 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 42
2025-10-07 09:39:31.054 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:39:31.056 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 09:39:31.057 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 42: 3 successful, 0 failed, 0 missing
2025-10-07 09:39:31.059 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 42: 3 total jobs
2025-10-07 09:40:13.702 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:40:13.702 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:40:13.706 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 09:40:13.706 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 09:40:13.706 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 09:40:13.710 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:40:13.712 [http-nio-8080-exec-7] INFO  c.e.b.controllers.InvoiceController - Retrieved 8 invoices (page 1 of 1)
2025-10-07 09:40:13.713 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:40:13.717 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 09:40:13.717 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:40:13.720 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 09:40:13.721 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 09:40:13.725 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:40:13.726 [http-nio-8080-exec-2] INFO  c.e.b.controllers.InvoiceController - Retrieved 8 invoices (page 1 of 1)
2025-10-07 09:40:14.002 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:40:14.005 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 09:40:14.006 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 09:40:14.009 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:40:14.010 [http-nio-8080-exec-4] INFO  c.e.b.controllers.InvoiceController - Retrieved 8 invoices (page 1 of 1)
2025-10-07 09:40:14.487 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:40:14.491 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 09:40:14.492 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 09:40:14.497 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:40:14.499 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Retrieved 8 invoices (page 1 of 1)
2025-10-07 09:40:14.502 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:40:14.506 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 09:40:14.507 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 09:40:14.512 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:40:14.513 [http-nio-8080-exec-6] INFO  c.e.b.controllers.InvoiceController - Retrieved 8 invoices (page 1 of 1)
2025-10-07 09:40:15.643 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:40:15.648 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 09:40:15.649 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:40:15.652 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 09:40:15.656 [http-nio-8080-exec-8] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 8 successful, 0 failed, 0 missing
2025-10-07 09:40:15.658 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 09:40:21.996 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:40:21.996 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:40:22.001 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 09:40:22.001 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 09:40:22.001 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 09:40:22.005 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:40:22.006 [http-nio-8080-exec-9] INFO  c.e.b.controllers.InvoiceController - Retrieved 8 invoices (page 1 of 1)
2025-10-07 09:40:22.008 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:40:22.011 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:40:22.012 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        gt1_0.id,
        gt1_0.calculation_method,
        gt1_0.color,
        gt1_0.name,
        gt1_0.price_per_meter,
        gt1_0.thickness 
    from
        glass_type gt1_0
2025-10-07 09:40:22.013 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 09:40:22.014 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 09:40:22.019 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:40:22.020 [http-nio-8080-exec-7] INFO  c.e.b.controllers.InvoiceController - Retrieved 8 invoices (page 1 of 1)
2025-10-07 09:40:22.290 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:40:22.294 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.InvoiceController - Fetching recent invoices (last 30 days)
2025-10-07 09:40:22.295 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        i 
    FROM
        Invoice i 
    WHERE
        i.issueDate BETWEEN :startDate AND :endDate 
    ORDER BY
        i.issueDate DESC,
        i.issueDate desc */ select
            i1_0.id,
            i1_0.customer_id,
            i1_0.issue_date,
            i1_0.notes,
            i1_0.payment_date,
            i1_0.status,
            i1_0.total_price 
        from
            invoice i1_0 
        where
            i1_0.issue_date between ? and ? 
        order by
            i1_0.issue_date desc,
            i1_0.issue_date desc 
        fetch
            first ? rows only
2025-10-07 09:40:22.300 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:40:22.301 [http-nio-8080-exec-5] INFO  c.e.b.controllers.InvoiceController - Retrieved 8 invoices (page 1 of 1)
2025-10-07 09:40:26.522 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:40:26.525 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 42
2025-10-07 09:40:26.525 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:40:26.528 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 09:40:26.529 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 42: 3 successful, 0 failed, 0 missing
2025-10-07 09:40:26.530 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 42: 3 total jobs
2025-10-07 09:41:24.014 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:41:24.019 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 09:41:24.019 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:41:24.021 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 09:41:24.023 [http-nio-8080-exec-6] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 8 successful, 0 failed, 0 missing
2025-10-07 09:41:24.024 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 09:41:45.508 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:41:45.512 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 09:41:45.513 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:41:45.515 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 09:41:45.517 [http-nio-8080-exec-8] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 8 successful, 0 failed, 0 missing
2025-10-07 09:41:45.518 [http-nio-8080-exec-8] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 09:42:26.298 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:42:26.303 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 09:42:26.303 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:42:26.306 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 09:42:26.308 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 8 successful, 0 failed, 0 missing
2025-10-07 09:42:26.309 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 09:43:55.747 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:43:55.766 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 09:43:55.767 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:43:55.770 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 09:43:55.773 [http-nio-8080-exec-3] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 8 successful, 0 failed, 0 missing
2025-10-07 09:43:55.774 [http-nio-8080-exec-3] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 09:44:03.239 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:44:03.244 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 42
2025-10-07 09:44:03.244 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:44:03.247 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 09:44:03.248 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 42: 3 successful, 0 failed, 0 missing
2025-10-07 09:44:03.249 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 42: 3 total jobs
2025-10-07 09:44:10.780 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:44:10.788 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 42
2025-10-07 09:44:10.788 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:44:10.791 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 09:44:10.792 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 42: 3 successful, 0 failed, 0 missing
2025-10-07 09:44:10.793 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 42: 3 total jobs
2025-10-07 09:44:29.495 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:44:29.498 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 32
2025-10-07 09:44:29.499 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:44:29.502 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 09:44:29.503 [http-nio-8080-exec-2] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 32: 8 successful, 0 failed, 0 missing
2025-10-07 09:44:29.504 [http-nio-8080-exec-2] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 32: 3 total jobs
2025-10-07 09:44:35.995 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:44:36.000 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting print job status for invoice 42
2025-10-07 09:44:36.000 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:44:36.003 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    left join
        invoice i1_0 
            on i1_0.id=pj1_0.invoice_id 
    where
        i1_0.id=?
2025-10-07 09:44:36.004 [http-nio-8080-exec-4] INFO  c.e.backend.services.PrintJobService - Print job status for invoice 42: 3 successful, 0 failed, 0 missing
2025-10-07 09:44:36.005 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - Print job status retrieved for invoice 42: 3 total jobs
2025-10-07 09:44:56.120 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:44:56.125 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 09:44:56.128 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 09:44:56.132 [http-nio-8080-exec-10] INFO  c.e.backend.services.PrintJobService - Found 6 queued print jobs
2025-10-07 09:44:56.135 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:44:56.136 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:44:56.138 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:44:56.140 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - Found 6 queued print jobs
2025-10-07 09:44:56.147 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:44:56.151 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 09:44:56.152 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 09:44:56.155 [http-nio-8080-exec-6] INFO  c.e.backend.services.PrintJobService - Found 6 queued print jobs
2025-10-07 09:44:56.157 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:44:56.158 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:44:56.159 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:44:56.160 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - Found 6 queued print jobs
2025-10-07 09:45:08.322 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:45:08.326 [http-nio-8080-exec-1] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 60 as PRINTING
2025-10-07 09:45:08.326 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 09:45:08.330 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 09:45:08.345 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:45:08.347 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:45:08.366 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:45:08.368 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 09:45:08.369 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 09:45:08.372 [http-nio-8080-exec-9] INFO  c.e.backend.services.PrintJobService - Found 5 queued print jobs
2025-10-07 09:45:08.374 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:45:08.375 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:45:08.376 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:45:08.378 [http-nio-8080-exec-9] DEBUG c.e.b.controllers.PrintJobController - Found 5 queued print jobs
2025-10-07 09:45:11.068 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:45:11.072 [http-nio-8080-exec-7] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 59 as PRINTING
2025-10-07 09:45:11.072 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 09:45:11.074 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 09:45:11.088 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:45:11.089 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:45:11.105 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:45:11.108 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 09:45:11.108 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 09:45:11.110 [http-nio-8080-exec-5] INFO  c.e.backend.services.PrintJobService - Found 4 queued print jobs
2025-10-07 09:45:11.111 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:45:11.112 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:45:11.113 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:45:11.114 [http-nio-8080-exec-5] DEBUG c.e.b.controllers.PrintJobController - Found 4 queued print jobs
2025-10-07 09:45:12.972 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:45:12.976 [http-nio-8080-exec-4] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 61 as PRINTING
2025-10-07 09:45:12.977 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 09:45:12.979 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 09:45:12.983 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:45:12.984 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:45:12.999 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:45:13.002 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 09:45:13.003 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 09:45:13.005 [http-nio-8080-exec-10] INFO  c.e.backend.services.PrintJobService - Found 3 queued print jobs
2025-10-07 09:45:13.006 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:45:13.007 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:45:13.009 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:45:13.010 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - Found 3 queued print jobs
2025-10-07 09:45:15.169 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:45:15.172 [http-nio-8080-exec-8] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 62 as PRINTING
2025-10-07 09:45:15.173 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 09:45:15.176 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 09:45:15.189 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:45:15.191 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:45:15.206 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:45:15.210 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 09:45:15.211 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 09:45:15.213 [http-nio-8080-exec-1] INFO  c.e.backend.services.PrintJobService - Found 2 queued print jobs
2025-10-07 09:45:15.215 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:45:15.216 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:45:15.217 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:45:15.219 [http-nio-8080-exec-1] DEBUG c.e.b.controllers.PrintJobController - Found 2 queued print jobs
2025-10-07 09:45:17.278 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:45:17.282 [http-nio-8080-exec-3] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 63 as PRINTING
2025-10-07 09:45:17.283 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 09:45:17.284 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 09:45:17.299 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:45:17.300 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:45:17.313 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:45:17.317 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 09:45:17.317 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 09:45:17.319 [http-nio-8080-exec-7] INFO  c.e.backend.services.PrintJobService - Found 1 queued print jobs
2025-10-07 09:45:17.320 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:45:17.321 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:45:17.322 [http-nio-8080-exec-7] DEBUG c.e.b.controllers.PrintJobController - Found 1 queued print jobs
2025-10-07 09:45:20.269 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:45:20.272 [http-nio-8080-exec-2] INFO  c.e.b.controllers.PrintJobController - REST API: Marking print job 58 as PRINTING
2025-10-07 09:45:20.273 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pj1_0.id,
        pj1_0.created_at,
        pj1_0.error_message,
        pj1_0.invoice_id,
        pj1_0.pdf_path,
        pj1_0.printed_at,
        pj1_0.status,
        pj1_0.type 
    from
        print_job pj1_0 
    where
        pj1_0.id=?
2025-10-07 09:45:20.275 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.backend.models.PrintJob */update print_job 
    set
        error_message=?,
        invoice_id=?,
        pdf_path=?,
        printed_at=?,
        status=?,
        type=? 
    where
        id=?
2025-10-07 09:45:20.279 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id,
        i1_0.customer_id,
        i1_0.issue_date,
        i1_0.notes,
        i1_0.payment_date,
        i1_0.status,
        i1_0.total_price 
    from
        invoice i1_0 
    where
        i1_0.id=?
2025-10-07 09:45:20.282 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.name,
        c1_0.phone 
    from
        customer c1_0 
    where
        c1_0.id=?
2025-10-07 09:45:20.297 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:45:20.300 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 09:45:20.300 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 09:45:20.302 [http-nio-8080-exec-4] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 09:45:20.302 [http-nio-8080-exec-4] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 09:45:26.127 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:45:26.130 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 09:45:26.131 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 09:45:26.131 [http-nio-8080-exec-10] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 09:45:26.132 [http-nio-8080-exec-10] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-07 09:45:56.124 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-10-07 09:45:56.128 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - REST API: Getting queued print jobs
2025-10-07 09:45:56.129 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        PrintJob p 
    WHERE
        p.status = :status 
    ORDER BY
        p.createdAt ASC */ select
            pj1_0.id,
            pj1_0.created_at,
            pj1_0.error_message,
            pj1_0.invoice_id,
            pj1_0.pdf_path,
            pj1_0.printed_at,
            pj1_0.status,
            pj1_0.type 
        from
            print_job pj1_0 
        where
            pj1_0.status=? 
        order by
            pj1_0.created_at
2025-10-07 09:45:56.130 [http-nio-8080-exec-6] INFO  c.e.backend.services.PrintJobService - Found 0 queued print jobs
2025-10-07 09:45:56.130 [http-nio-8080-exec-6] DEBUG c.e.b.controllers.PrintJobController - Found 0 queued print jobs
2025-10-09 19:32:51.436 [main] INFO  c.example.backend.BackendApplication - Starting BackendApplication using Java 23.0.2 with PID 35792 (C:\Users\lenovo\Desktop\Work\ElGuindyGlassInvoicingSystem\backend\target\classes started by lenovo in C:\Users\lenovo\Desktop\Work\ElGuindyGlassInvoicingSystem)
2025-10-09 19:32:51.442 [main] DEBUG c.example.backend.BackendApplication - Running with Spring Boot v3.5.5, Spring v6.2.10
2025-10-09 19:32:51.444 [main] INFO  c.example.backend.BackendApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-09 19:32:53.546 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-09 19:32:53.548 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-10-09 19:32:53.636 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CustomerRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 19:32:53.638 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingDetailRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 19:32:53.641 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingRateRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 19:32:53.643 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.GlassTypeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 19:32:53.646 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceLineRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 19:32:53.648 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 19:32:53.650 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.NotificationRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 19:32:53.653 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.PrintJobRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 19:32:53.656 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 19:32:53.657 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 99 ms. Found 0 JDBC repository interfaces.
2025-10-09 19:32:53.674 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-09 19:32:53.675 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-09 19:32:53.739 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 57 ms. Found 9 JPA repository interfaces.
2025-10-09 19:32:55.329 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-09 19:32:55.358 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-09 19:32:55.360 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-09 19:32:55.527 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-09 19:32:55.527 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3904 ms
2025-10-09 19:32:56.171 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-09 19:32:56.416 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-09 19:32:56.531 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-09 19:32:57.344 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-09 19:32:57.451 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-09 19:32:58.003 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1c90029b
2025-10-09 19:32:58.008 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-09 19:32:58.105 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-09 19:32:58.170 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.6
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-09 19:33:01.511 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-09 19:33:02.080 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-09 19:33:02.833 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-09 19:33:04.906 [main] DEBUG c.e.b.c.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-09 19:33:05.028 [main] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-09 19:33:05.028 [main] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-09 19:33:07.030 [main] INFO  c.e.backend.services.StorageService - MinIO bucket already exists: elguindy
2025-10-09 19:33:07.203 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-09 19:33:09.458 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-10-09 19:33:09.458 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@6fcd6a7e]]
2025-10-09 19:33:09.461 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-10-09 19:33:09.501 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-09 19:33:09.514 [main] INFO  c.example.backend.BackendApplication - Started BackendApplication in 19.488 seconds (process running for 21.648)
2025-10-09 19:33:09.534 [main] INFO  c.e.backend.config.DataInitializer - Starting application data initialization...
2025-10-09 19:33:09.535 [main] INFO  c.e.backend.config.DataInitializer - Application data initialization completed successfully.
2025-10-09 19:33:09.755 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-09 19:33:09.812 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-09 19:33:10.123 [main] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.user.User */insert 
    into
        users (first_name, is_active, last_name, password, role, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-09 19:33:10.147 [main] INFO  org.hibernate.orm.jdbc.batch - HHH100503: On release of batch it still contained JDBC statements
2025-10-09 19:33:10.148 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 23514
2025-10-09 19:33:10.148 [main] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Batch entry 0 /* insert for com.example.backend.models.user.User */insert into users (first_name,is_active,last_name,password,role,username,id) values (('System'),('TRUE'::boolean),('Admin'),('$2a$10$sV8Zmf2/v13pptP.tu6Sy.2odYTG5N/GoLL1kafFx35hEb2EnuNzC'),('ADMIN'),('admin'),('504d0617-c7a8-4424-8c2a-2b016910ea5b'::uuid)) was aborted: ERROR: new row for relation "users" violates check constraint "users_role_check"
  Detail: Failing row contains (504d0617-c7a8-4424-8c2a-2b016910ea5b, System, t, Admin, $2a$10$sV8Zmf2/v13pptP.tu6Sy.2odYTG5N/GoLL1kafFx35hEb2EnuNzC, ADMIN, admin).  Call getNextException to see other errors in the batch.
2025-10-09 19:33:10.148 [main] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: new row for relation "users" violates check constraint "users_role_check"
  Detail: Failing row contains (504d0617-c7a8-4424-8c2a-2b016910ea5b, System, t, Admin, $2a$10$sV8Zmf2/v13pptP.tu6Sy.2odYTG5N/GoLL1kafFx35hEb2EnuNzC, ADMIN, admin).
2025-10-09 19:33:10.165 [main] ERROR c.e.backend.config.DataInitializer - Failed to create default ADMIN user: Username already exists: admin
2025-10-09 19:33:10.168 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-09 19:33:10.176 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-09 19:33:10.179 [main] INFO  c.e.backend.config.DataInitializer - User initialization completed. Default users created if they didn't exist.
2025-10-09 19:33:10.179 [main] INFO  c.e.backend.config.DataInitializer - IMPORTANT: Please change default passwords after first login for security!
2025-10-09 19:34:09.461 [MessageBroker-1] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2025-10-09 20:04:09.479 [MessageBroker-1] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 2, active threads = 1, queued tasks = 0, completed tasks = 1]
2025-10-09 20:34:09.498 [MessageBroker-2] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 3, active threads = 1, queued tasks = 0, completed tasks = 2]
2025-10-09 20:39:23.293 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-09 20:39:23.328 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-10-09 20:39:23.344 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-10-09 20:39:23.344 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@6fcd6a7e]]
2025-10-09 20:39:23.344 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-10-09 20:39:23.373 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-09 20:39:23.433 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-09 20:39:23.444 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-09 20:41:45.022 [main] INFO  c.example.backend.BackendApplication - Starting BackendApplication using Java 23.0.2 with PID 17204 (C:\Users\lenovo\Desktop\Work\ElGuindyGlassInvoicingSystem\backend\target\classes started by lenovo in C:\Users\lenovo\Desktop\Work\ElGuindyGlassInvoicingSystem)
2025-10-09 20:41:45.028 [main] DEBUG c.example.backend.BackendApplication - Running with Spring Boot v3.5.5, Spring v6.2.10
2025-10-09 20:41:45.031 [main] INFO  c.example.backend.BackendApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-09 20:41:48.979 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-09 20:41:48.983 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-10-09 20:41:49.109 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CustomerRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:41:49.113 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingDetailRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:41:49.117 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingRateRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:41:49.120 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.GlassTypeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:41:49.125 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceLineRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:41:49.129 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:41:49.133 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.NotificationRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:41:49.140 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.PrintJobRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:41:49.147 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:41:49.149 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 147 ms. Found 0 JDBC repository interfaces.
2025-10-09 20:41:49.210 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-09 20:41:49.213 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-09 20:41:49.382 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 151 ms. Found 9 JPA repository interfaces.
2025-10-09 20:41:52.494 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-09 20:41:52.554 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-09 20:41:52.554 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-09 20:41:52.857 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-09 20:41:52.858 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 7548 ms
2025-10-09 20:41:53.373 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-09 20:41:53.571 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-09 20:41:53.725 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-09 20:41:54.762 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-09 20:41:54.841 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-09 20:41:55.322 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@4a122e68
2025-10-09 20:41:55.327 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-09 20:41:55.517 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-09 20:41:55.629 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.6
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-09 20:41:57.851 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-09 20:41:58.396 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-09 20:41:58.685 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-09 20:41:59.940 [main] DEBUG c.e.b.c.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-09 20:41:59.994 [main] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-09 20:41:59.995 [main] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-09 20:42:01.107 [main] INFO  c.e.backend.services.StorageService - MinIO bucket already exists: elguindy
2025-10-09 20:42:01.168 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-09 20:42:02.112 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-10-09 20:42:02.112 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@11f4ffb]]
2025-10-09 20:42:02.114 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-10-09 20:42:02.132 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-09 20:42:02.139 [main] INFO  c.example.backend.BackendApplication - Started BackendApplication in 19.013 seconds (process running for 22.639)
2025-10-09 20:42:02.151 [main] INFO  c.e.backend.config.DataInitializer - Starting application data initialization...
2025-10-09 20:42:02.151 [main] INFO  c.e.backend.config.DataInitializer - Application data initialization completed successfully.
2025-10-09 20:42:02.253 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-09 20:42:02.275 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-09 20:42:02.427 [main] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.user.User */insert 
    into
        users (first_name, is_active, last_name, password, role, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-09 20:42:02.439 [main] INFO  org.hibernate.orm.jdbc.batch - HHH100503: On release of batch it still contained JDBC statements
2025-10-09 20:42:02.439 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 23514
2025-10-09 20:42:02.439 [main] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Batch entry 0 /* insert for com.example.backend.models.user.User */insert into users (first_name,is_active,last_name,password,role,username,id) values (('System'),('TRUE'::boolean),('Admin'),('$2a$10$ogFJDKPhm6icQFdvotoN0Oyu.nCeMtALVKzPvjU8/b4DdvQKcT6Jm'),('ADMIN'),('admin'),('140eea85-bcb1-4aa8-be49-8fa683d63326'::uuid)) was aborted: ERROR: new row for relation "users" violates check constraint "users_role_check"
  Detail: Failing row contains (140eea85-bcb1-4aa8-be49-8fa683d63326, System, t, Admin, $2a$10$ogFJDKPhm6icQFdvotoN0Oyu.nCeMtALVKzPvjU8/b4DdvQKcT6Jm, ADMIN, admin).  Call getNextException to see other errors in the batch.
2025-10-09 20:42:02.439 [main] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: new row for relation "users" violates check constraint "users_role_check"
  Detail: Failing row contains (140eea85-bcb1-4aa8-be49-8fa683d63326, System, t, Admin, $2a$10$ogFJDKPhm6icQFdvotoN0Oyu.nCeMtALVKzPvjU8/b4DdvQKcT6Jm, ADMIN, admin).
2025-10-09 20:42:02.449 [main] ERROR c.e.backend.config.DataInitializer - Failed to create default ADMIN user: Username already exists: admin
2025-10-09 20:42:02.450 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-09 20:42:02.453 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-09 20:42:02.456 [main] INFO  c.e.backend.config.DataInitializer - User initialization completed. Default users created if they didn't exist.
2025-10-09 20:42:02.456 [main] INFO  c.e.backend.config.DataInitializer - IMPORTANT: Please change default passwords after first login for security!
2025-10-09 20:43:02.112 [MessageBroker-1] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2025-10-09 20:43:32.571 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-09 20:43:32.590 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-10-09 20:43:32.594 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-10-09 20:43:32.594 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@11f4ffb]]
2025-10-09 20:43:32.595 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-10-09 20:43:32.602 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-09 20:43:32.606 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-09 20:43:32.617 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-09 20:43:35.762 [main] INFO  c.example.backend.BackendApplication - Starting BackendApplication using Java 23.0.2 with PID 18448 (C:\Users\lenovo\Desktop\Work\ElGuindyGlassInvoicingSystem\backend\target\classes started by lenovo in C:\Users\lenovo\Desktop\Work\ElGuindyGlassInvoicingSystem)
2025-10-09 20:43:35.765 [main] DEBUG c.example.backend.BackendApplication - Running with Spring Boot v3.5.5, Spring v6.2.10
2025-10-09 20:43:35.766 [main] INFO  c.example.backend.BackendApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-09 20:43:36.720 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-09 20:43:36.721 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-10-09 20:43:36.760 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CustomerRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:43:36.761 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingDetailRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:43:36.763 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingRateRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:43:36.765 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.GlassTypeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:43:36.767 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceLineRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:43:36.768 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:43:36.769 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.NotificationRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:43:36.773 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.PrintJobRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:43:36.776 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:43:36.777 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 50 ms. Found 0 JDBC repository interfaces.
2025-10-09 20:43:36.788 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-09 20:43:36.789 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-09 20:43:36.838 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 42 ms. Found 9 JPA repository interfaces.
2025-10-09 20:43:37.401 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-09 20:43:37.416 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-09 20:43:37.416 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-09 20:43:37.491 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-09 20:43:37.491 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1636 ms
2025-10-09 20:43:37.642 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-09 20:43:37.701 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-09 20:43:37.745 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-09 20:43:37.993 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-09 20:43:38.020 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-09 20:43:38.162 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@2d07aacc
2025-10-09 20:43:38.163 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-09 20:43:38.192 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-09 20:43:38.221 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.6
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-09 20:43:39.464 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-09 20:43:39.955 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-09 20:43:40.336 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-09 20:43:42.653 [main] DEBUG c.e.b.c.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-09 20:43:42.813 [main] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-09 20:43:42.814 [main] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-09 20:43:45.444 [main] INFO  c.e.backend.services.StorageService - MinIO bucket already exists: elguindy
2025-10-09 20:43:45.573 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-09 20:43:47.055 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-10-09 20:43:47.056 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@7a7ebcf3]]
2025-10-09 20:43:47.058 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-10-09 20:43:47.083 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-09 20:43:47.094 [main] INFO  c.example.backend.BackendApplication - Started BackendApplication in 12.011 seconds (process running for 13.259)
2025-10-09 20:43:47.111 [main] INFO  c.e.backend.config.DataInitializer - Starting application data initialization...
2025-10-09 20:43:47.111 [main] INFO  c.e.backend.config.DataInitializer - Application data initialization completed successfully.
2025-10-09 20:43:47.263 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-09 20:43:47.294 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-09 20:43:47.544 [main] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.user.User */insert 
    into
        users (first_name, is_active, last_name, password, role, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-09 20:43:47.562 [main] INFO  org.hibernate.orm.jdbc.batch - HHH100503: On release of batch it still contained JDBC statements
2025-10-09 20:43:47.563 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 23514
2025-10-09 20:43:47.563 [main] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Batch entry 0 /* insert for com.example.backend.models.user.User */insert into users (first_name,is_active,last_name,password,role,username,id) values (('System'),('TRUE'::boolean),('Admin'),('$2a$10$E/2QX4Y9fFQ3c17EcpcsbekKGHMXE08gCZT5MaDuBe5/f8Pdxh5By'),('ADMIN'),('admin'),('aa86e18a-cd8b-42e6-bd2a-a54a4a942bc9'::uuid)) was aborted: ERROR: new row for relation "users" violates check constraint "users_role_check"
  Detail: Failing row contains (aa86e18a-cd8b-42e6-bd2a-a54a4a942bc9, System, t, Admin, $2a$10$E/2QX4Y9fFQ3c17EcpcsbekKGHMXE08gCZT5MaDuBe5/f8Pdxh5By, ADMIN, admin).  Call getNextException to see other errors in the batch.
2025-10-09 20:43:47.563 [main] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: new row for relation "users" violates check constraint "users_role_check"
  Detail: Failing row contains (aa86e18a-cd8b-42e6-bd2a-a54a4a942bc9, System, t, Admin, $2a$10$E/2QX4Y9fFQ3c17EcpcsbekKGHMXE08gCZT5MaDuBe5/f8Pdxh5By, ADMIN, admin).
2025-10-09 20:43:47.579 [main] ERROR c.e.backend.config.DataInitializer - Failed to create default ADMIN user: Username already exists: admin
2025-10-09 20:43:47.581 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-09 20:43:47.586 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-09 20:43:47.589 [main] INFO  c.e.backend.config.DataInitializer - User initialization completed. Default users created if they didn't exist.
2025-10-09 20:43:47.589 [main] INFO  c.e.backend.config.DataInitializer - IMPORTANT: Please change default passwords after first login for security!
2025-10-09 20:44:47.059 [MessageBroker-1] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2025-10-09 20:46:42.875 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-09 20:46:42.886 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-10-09 20:46:42.889 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-10-09 20:46:42.889 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@7a7ebcf3]]
2025-10-09 20:46:42.889 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-10-09 20:46:42.896 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-09 20:46:42.898 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-09 20:46:42.905 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-09 20:46:45.595 [main] INFO  c.example.backend.BackendApplication - Starting BackendApplication using Java 23.0.2 with PID 35700 (C:\Users\lenovo\Desktop\Work\ElGuindyGlassInvoicingSystem\backend\target\classes started by lenovo in C:\Users\lenovo\Desktop\Work\ElGuindyGlassInvoicingSystem)
2025-10-09 20:46:45.596 [main] DEBUG c.example.backend.BackendApplication - Running with Spring Boot v3.5.5, Spring v6.2.10
2025-10-09 20:46:45.597 [main] INFO  c.example.backend.BackendApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-09 20:46:46.398 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-09 20:46:46.400 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-10-09 20:46:46.447 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CustomerRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:46:46.449 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingDetailRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:46:46.450 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.CuttingRateRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:46:46.452 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.GlassTypeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:46:46.453 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceLineRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:46:46.454 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.InvoiceRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:46:46.455 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.NotificationRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:46:46.457 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.PrintJobRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:46:46.459 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.backend.repositories.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-10-09 20:46:46.460 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 52 ms. Found 0 JDBC repository interfaces.
2025-10-09 20:46:46.472 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-09 20:46:46.472 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-09 20:46:46.517 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 40 ms. Found 9 JPA repository interfaces.
2025-10-09 20:46:47.015 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-09 20:46:47.034 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-09 20:46:47.034 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-09 20:46:47.089 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-09 20:46:47.090 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1422 ms
2025-10-09 20:46:47.237 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-09 20:46:47.288 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-09 20:46:47.320 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-09 20:46:47.569 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-09 20:46:47.603 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-09 20:46:47.732 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@69a73867
2025-10-09 20:46:47.734 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-09 20:46:47.760 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-09 20:46:47.781 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.6
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-09 20:46:48.812 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-09 20:46:49.298 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-09 20:46:49.617 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-09 20:46:50.878 [main] DEBUG c.e.b.c.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-09 20:46:50.949 [main] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-09 20:46:50.950 [main] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-09 20:46:52.095 [main] INFO  c.e.backend.services.StorageService - MinIO bucket already exists: elguindy
2025-10-09 20:46:52.165 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-09 20:46:54.134 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-10-09 20:46:54.135 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@2fe328b9]]
2025-10-09 20:46:54.138 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-10-09 20:46:54.169 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-09 20:46:54.181 [main] INFO  c.example.backend.BackendApplication - Started BackendApplication in 9.126 seconds (process running for 10.039)
2025-10-09 20:46:54.198 [main] INFO  c.e.backend.config.DataInitializer - Starting application data initialization...
2025-10-09 20:46:54.198 [main] INFO  c.e.backend.config.DataInitializer - Application data initialization completed successfully.
2025-10-09 20:46:54.412 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-09 20:46:54.474 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-09 20:46:54.809 [main] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.backend.models.user.User */insert 
    into
        users (first_name, is_active, last_name, password, role, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-10-09 20:46:54.832 [main] INFO  org.hibernate.orm.jdbc.batch - HHH100503: On release of batch it still contained JDBC statements
2025-10-09 20:46:54.834 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 23514
2025-10-09 20:46:54.834 [main] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Batch entry 0 /* insert for com.example.backend.models.user.User */insert into users (first_name,is_active,last_name,password,role,username,id) values (('System'),('TRUE'::boolean),('Admin'),('$2a$10$H1gfqTBqqBHRSYVYGLyJiufUxM3BU.a0l4diT/NvthRjcm0jw.0B6'),('ADMIN'),('admin'),('b2dc22a4-8942-4a44-9d6b-46394c416c7a'::uuid)) was aborted: ERROR: new row for relation "users" violates check constraint "users_role_check"
  Detail: Failing row contains (b2dc22a4-8942-4a44-9d6b-46394c416c7a, System, t, Admin, $2a$10$H1gfqTBqqBHRSYVYGLyJiufUxM3BU.a0l4diT/NvthRjcm0jw.0B6, ADMIN, admin).  Call getNextException to see other errors in the batch.
2025-10-09 20:46:54.834 [main] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: new row for relation "users" violates check constraint "users_role_check"
  Detail: Failing row contains (b2dc22a4-8942-4a44-9d6b-46394c416c7a, System, t, Admin, $2a$10$H1gfqTBqqBHRSYVYGLyJiufUxM3BU.a0l4diT/NvthRjcm0jw.0B6, ADMIN, admin).
2025-10-09 20:46:54.853 [main] ERROR c.e.backend.config.DataInitializer - Failed to create default ADMIN user: Username already exists: admin
2025-10-09 20:46:54.856 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-09 20:46:54.861 [main] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
2025-10-09 20:46:54.865 [main] INFO  c.e.backend.config.DataInitializer - User initialization completed. Default users created if they didn't exist.
2025-10-09 20:46:54.865 [main] INFO  c.e.backend.config.DataInitializer - IMPORTANT: Please change default passwords after first login for security!
2025-10-09 20:47:54.130 [MessageBroker-1] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
